<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AugmentWebviewStateStore">
    <option name="stateMap">
      <map>
        <entry key="CHAT_STATE" value="{&quot;currentConversationId&quot;:&quot;74af6f30-1148-4e4e-9aa9-b13b1280d4ca&quot;,&quot;conversations&quot;:{&quot;0faf8e49-1904-4977-a97c-468a8d721bf5&quot;:{&quot;id&quot;:&quot;0faf8e49-1904-4977-a97c-468a8d721bf5&quot;,&quot;createdAtIso&quot;:&quot;2025-06-24T15:06:57.214Z&quot;,&quot;lastInteractedAtIso&quot;:&quot;2025-06-24T15:07:47.224Z&quot;,&quot;chatHistory&quot;:[{&quot;status&quot;:&quot;success&quot;,&quot;request_id&quot;:&quot;b9e42154-168e-4b51-a5cf-4b11a12c13d7&quot;,&quot;request_message&quot;:&quot;Please add a short usage section to the readme. Keep it light.&quot;,&quot;rich_text_json_repr&quot;:{&quot;type&quot;:&quot;doc&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;Please add a short usage section to the readme. Keep it light.&quot;}]}]},&quot;mentioned_items&quot;:[],&quot;structured_output_nodes&quot;:[{&quot;id&quot;:0,&quot;type&quot;:0,&quot;content&quot;:&quot;I'll add a short usage section to the README.md that's light and informative:\n\n&lt;augment_code_snippet path=\&quot;README.md\&quot; mode=\&quot;EDIT\&quot;&gt;\n```markdown\n# MedDRA Loader\n\n[![CI](https://github.com/wullli/meddra-loader/workflows/CI/badge.svg)](https://github.com/wullli/meddra-loader/actions/workflows/ci.yml)\n[![codecov](https://codecov.io/gh/wullli/meddra-loader/branch/main/graph/badge.svg)](https://codecov.io/gh/wullli/meddra-loader)\n\nDISCLAIMER: This software does not give you access to MedDRA and you need a valid subscription to work with MedDRA data: https://www.meddra.org/. It merely provides tooling for loading the MedDRA data and hierarchy with python into a networkx graph. It is only intended for use with legitimately licensed MedDRA data and users are responsible for obtaining a valid license from the MSSO.\n\n## Usage\n\n```python\nfrom pathlib import Path\nfrom meddra_loader.meddra_digraph import MedDRADiGraph\n\n# Create a new MedDRA graph\ngraph = MedDRADiGraph()\n\n# Load MedDRA data from a directory\ngraph.load(Path(\&quot;/path/to/meddra/data\&quot;))\n\n# Access MedDRA version\nprint(f\&quot;MedDRA Version: {graph.meddra_version}\&quot;)\n\n# Access loaded terms\nprint(f\&quot;Number of terms: {len(graph.terms)}\&quot;)\n\n# Access term hierarchy\nprint(f\&quot;Term levels: {graph.term_levels}\&quot;)\n```\n\nThe graph is a standard NetworkX DiGraph with additional MedDRA-specific attributes and methods.\n```\n&lt;/augment_code_snippet&gt;\n&quot;},{&quot;id&quot;:2,&quot;type&quot;:2,&quot;content&quot;:&quot;&quot;},{&quot;id&quot;:3,&quot;type&quot;:3,&quot;content&quot;:&quot;README.md:0-675\nsrc/meddra_loader/tests/test_data/README.md:0-669\nsrc/meddra_loader/tests/test_data/README.md:669-904\n.github/workflows/ci.yml:0-102\n.github/workflows/ci.yml:102-1003\n.github/workflows/ci.yml:1003-1370\npyproject.toml:0-690\npyproject.toml:690-1394\npyproject.toml:1394-1857\nmodules/meddra-loader/demo_loading.py:0-170\nmodules/meddra-loader/demo_loading.py:170-1016\nscripts/run_ci_checks.sh:0-585\n.gitignore:0-717\n.gitignore:717-1195\n.gitignore:1195-1783\n.gitignore:1783-2477\n.gitignore:2477-3001\n.gitignore:3001-3571\n.gitignore:3571-4319\nLICENSE:0-601\nsrc/sprint/entrypoints/copy_markdown.py:0-848\nsrc/sprint/models/weights/run-20241010T111217/wandb-metadata.json:0-625\nsrc/sprint/models/weights/run-20241010T111217/wandb-metadata.json:625-987\nsrc/sprint/models/weights/run-20241010T111217/wandb-metadata.json:3643-4004\nsrc/sprint/full_text/ctcae_detection_dspy.py:0-437\nsrc/sprint/full_text/ctcae_detection_dspy.py:437-834\nsrc/sprint/full_text/ctcae_detection_dspy.py:7211-8065\n.pre-commit-config.yaml:0-442\nsrc/meddra_loader/tests/test_meddra_digraph.py:0-96\nsrc/meddra_loader/tests/test_meddra_digraph.py:876-1618\nsrc/meddra_loader/tests/test_meddra_digraph.py:1618-2290\nsrc/meddra_loader/tests/test_meddra_digraph.py:2290-3029\nsrc/meddra_loader/tests/test_meddra_digraph.py:3029-3671\nsrc/meddra_loader/tests/test_data/smq_list.asc:0-693\nsrc/sprint/entrypoints/check-full-text-annotations.py:0-606\nsrc/sprint/full_text/annotations.py:0-306\nsrc/sprint/entrypoints/extract-manual-abstract-screening_first-search.py:0-752\nsrc/sprint/entrypoints/extract-manual-abstract-screening_first-search.py:752-1483\nsrc/sprint/entrypoints/extract-manual-abstract-screening_first-search.py:2789-3649\nsrc/sprint/entrypoints/download-pubmed-abstracts.py:3796-4392\nsrc/sprint/full_text/ctcae_detection_gpt.py:0-571\nsrc/sprint/full_text/ctcae_detection_gpt.py:1007-1708\nsrc/sprint/learning_rate_schedules.py:0-852\nsrc/meddra_loader/meddra_digraph.py:0-567&quot;}],&quot;seen_state&quot;:&quot;seen&quot;,&quot;structured_request_nodes&quot;:[{&quot;id&quot;:0,&quot;type&quot;:0,&quot;text_node&quot;:{&quot;content&quot;:&quot;Please add a short usage section to the readme. Keep it light.&quot;}},{&quot;id&quot;:1,&quot;type&quot;:4,&quot;ide_state_node&quot;:{&quot;workspaceFolders&quot;:[{&quot;repositoryRoot&quot;:&quot;/Users/tcwullsc/Devel/AAI/SPRINT/modules/meddra-loader&quot;,&quot;folderRoot&quot;:&quot;/Users/tcwullsc/Devel/AAI/SPRINT/modules/meddra-loader&quot;}],&quot;workspaceFoldersUnchanged&quot;:false}}],&quot;timestamp&quot;:&quot;2025-06-24T15:07:47.224Z&quot;,&quot;response_text&quot;:&quot;I'll add a short usage section to the README.md that's light and informative:\n\n````markdown path=README.md mode=EDIT\n# MedDRA Loader\n\n[![CI](https://github.com/wullli/meddra-loader/workflows/CI/badge.svg)](https://github.com/wullli/meddra-loader/actions/workflows/ci.yml)\n[![codecov](https://codecov.io/gh/wullli/meddra-loader/branch/main/graph/badge.svg)](https://codecov.io/gh/wullli/meddra-loader)\n\nDISCLAIMER: This software does not give you access to MedDRA and you need a valid subscription to work with MedDRA data: https://www.meddra.org/. It merely provides tooling for loading the MedDRA data and hierarchy with python into a networkx graph. It is only intended for use with legitimately licensed MedDRA data and users are responsible for obtaining a valid license from the MSSO.\n\n## Usage\n\n```python\nfrom pathlib import Path\nfrom meddra_loader.meddra_digraph import MedDRADiGraph\n\n# Create a new MedDRA graph\ngraph = MedDRADiGraph()\n\n# Load MedDRA data from a directory\ngraph.load(Path(\&quot;/path/to/meddra/data\&quot;))\n\n# Access MedDRA version\nprint(f\&quot;MedDRA Version: {graph.meddra_version}\&quot;)\n\n# Access loaded terms\nprint(f\&quot;Number of terms: {len(graph.terms)}\&quot;)\n\n# Access term hierarchy\nprint(f\&quot;Term levels: {graph.term_levels}\&quot;)\n```\n\nThe graph is a standard NetworkX DiGraph with additional MedDRA-specific attributes and methods.\n````\n&quot;,&quot;workspace_file_chunks&quot;:[{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;675&quot;,&quot;blob_name&quot;:&quot;62073004d6d11ace193d8558f159cb5b90efec9a98bef3fb132e26c2195653ee&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;README.md&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;669&quot;,&quot;blob_name&quot;:&quot;398c8257a27ef2177bdc248cee91ae175f6529a306fd37160a1282ce3f2025a5&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/meddra_loader/tests/test_data/README.md&quot;}},{&quot;char_start&quot;:&quot;669&quot;,&quot;char_end&quot;:&quot;904&quot;,&quot;blob_name&quot;:&quot;398c8257a27ef2177bdc248cee91ae175f6529a306fd37160a1282ce3f2025a5&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/meddra_loader/tests/test_data/README.md&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;102&quot;,&quot;blob_name&quot;:&quot;5259a526f6129dedae62889574b11375d1b0a5d489a9c47b031455419374ee6e&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.github/workflows/ci.yml&quot;}},{&quot;char_start&quot;:&quot;102&quot;,&quot;char_end&quot;:&quot;1003&quot;,&quot;blob_name&quot;:&quot;5259a526f6129dedae62889574b11375d1b0a5d489a9c47b031455419374ee6e&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.github/workflows/ci.yml&quot;}},{&quot;char_start&quot;:&quot;1003&quot;,&quot;char_end&quot;:&quot;1370&quot;,&quot;blob_name&quot;:&quot;5259a526f6129dedae62889574b11375d1b0a5d489a9c47b031455419374ee6e&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.github/workflows/ci.yml&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;690&quot;,&quot;blob_name&quot;:&quot;905481e22ff71b6ec37a74e752f12e8a7420257a71420f6e69ff39e562e10787&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;pyproject.toml&quot;}},{&quot;char_start&quot;:&quot;690&quot;,&quot;char_end&quot;:&quot;1394&quot;,&quot;blob_name&quot;:&quot;905481e22ff71b6ec37a74e752f12e8a7420257a71420f6e69ff39e562e10787&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;pyproject.toml&quot;}},{&quot;char_start&quot;:&quot;1394&quot;,&quot;char_end&quot;:&quot;1857&quot;,&quot;blob_name&quot;:&quot;905481e22ff71b6ec37a74e752f12e8a7420257a71420f6e69ff39e562e10787&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;pyproject.toml&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;170&quot;,&quot;blob_name&quot;:&quot;31b17fb986bc436069610779da2974f4ef307839a2684549cab57e7b09ca710d&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;modules/meddra-loader/demo_loading.py&quot;}},{&quot;char_start&quot;:&quot;170&quot;,&quot;char_end&quot;:&quot;1016&quot;,&quot;blob_name&quot;:&quot;31b17fb986bc436069610779da2974f4ef307839a2684549cab57e7b09ca710d&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;modules/meddra-loader/demo_loading.py&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;585&quot;,&quot;blob_name&quot;:&quot;72a511dc920288d94f775236e2c2c493cb943f3314fcec177fc5886c019e9ac0&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;scripts/run_ci_checks.sh&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;717&quot;,&quot;blob_name&quot;:&quot;36aa700825092a585d6c6781f2e3e5169589410102154e18e1d9fa1855ca1e1e&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.gitignore&quot;}},{&quot;char_start&quot;:&quot;717&quot;,&quot;char_end&quot;:&quot;1195&quot;,&quot;blob_name&quot;:&quot;36aa700825092a585d6c6781f2e3e5169589410102154e18e1d9fa1855ca1e1e&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.gitignore&quot;}},{&quot;char_start&quot;:&quot;1195&quot;,&quot;char_end&quot;:&quot;1783&quot;,&quot;blob_name&quot;:&quot;36aa700825092a585d6c6781f2e3e5169589410102154e18e1d9fa1855ca1e1e&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.gitignore&quot;}},{&quot;char_start&quot;:&quot;1783&quot;,&quot;char_end&quot;:&quot;2477&quot;,&quot;blob_name&quot;:&quot;36aa700825092a585d6c6781f2e3e5169589410102154e18e1d9fa1855ca1e1e&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.gitignore&quot;}},{&quot;char_start&quot;:&quot;2477&quot;,&quot;char_end&quot;:&quot;3001&quot;,&quot;blob_name&quot;:&quot;36aa700825092a585d6c6781f2e3e5169589410102154e18e1d9fa1855ca1e1e&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.gitignore&quot;}},{&quot;char_start&quot;:&quot;3001&quot;,&quot;char_end&quot;:&quot;3571&quot;,&quot;blob_name&quot;:&quot;36aa700825092a585d6c6781f2e3e5169589410102154e18e1d9fa1855ca1e1e&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.gitignore&quot;}},{&quot;char_start&quot;:&quot;3571&quot;,&quot;char_end&quot;:&quot;4319&quot;,&quot;blob_name&quot;:&quot;36aa700825092a585d6c6781f2e3e5169589410102154e18e1d9fa1855ca1e1e&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.gitignore&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;601&quot;,&quot;blob_name&quot;:&quot;7f5abdedd9943d076bd910829b1f5cffd28fba17dc34da49b48207c21465ab8c&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;LICENSE&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;848&quot;,&quot;blob_name&quot;:&quot;f36308a0a79ce0b724fdab2bf66aeff43fbc5309f377babe0dd02e10a7f763b5&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/sprint/entrypoints/copy_markdown.py&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;625&quot;,&quot;blob_name&quot;:&quot;f0e4b4ab9d9d387e2e3f725d3ab16ca7b3f9d2f844ddd7cd23489e85289edce3&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/sprint/models/weights/run-20241010T111217/wandb-metadata.json&quot;}},{&quot;char_start&quot;:&quot;625&quot;,&quot;char_end&quot;:&quot;987&quot;,&quot;blob_name&quot;:&quot;f0e4b4ab9d9d387e2e3f725d3ab16ca7b3f9d2f844ddd7cd23489e85289edce3&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/sprint/models/weights/run-20241010T111217/wandb-metadata.json&quot;}},{&quot;char_start&quot;:&quot;3643&quot;,&quot;char_end&quot;:&quot;4004&quot;,&quot;blob_name&quot;:&quot;f0e4b4ab9d9d387e2e3f725d3ab16ca7b3f9d2f844ddd7cd23489e85289edce3&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/sprint/models/weights/run-20241010T111217/wandb-metadata.json&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;437&quot;,&quot;blob_name&quot;:&quot;3dd0d194b8f813743d50425eb7222742c76b1774780f04f563d393f803c0ec85&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/sprint/full_text/ctcae_detection_dspy.py&quot;}},{&quot;char_start&quot;:&quot;437&quot;,&quot;char_end&quot;:&quot;834&quot;,&quot;blob_name&quot;:&quot;3dd0d194b8f813743d50425eb7222742c76b1774780f04f563d393f803c0ec85&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/sprint/full_text/ctcae_detection_dspy.py&quot;}},{&quot;char_start&quot;:&quot;7211&quot;,&quot;char_end&quot;:&quot;8065&quot;,&quot;blob_name&quot;:&quot;3dd0d194b8f813743d50425eb7222742c76b1774780f04f563d393f803c0ec85&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/sprint/full_text/ctcae_detection_dspy.py&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;442&quot;,&quot;blob_name&quot;:&quot;72133dc003b632c3b707ab048a29300c0670eeed748a0c0a132881b3c0a01cd3&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.pre-commit-config.yaml&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;96&quot;,&quot;blob_name&quot;:&quot;c2a433b808f0201241dfc4ff55336b69749905aa7f633d152fbcba4107666004&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/meddra_loader/tests/test_meddra_digraph.py&quot;}},{&quot;char_start&quot;:&quot;876&quot;,&quot;char_end&quot;:&quot;1618&quot;,&quot;blob_name&quot;:&quot;c2a433b808f0201241dfc4ff55336b69749905aa7f633d152fbcba4107666004&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/meddra_loader/tests/test_meddra_digraph.py&quot;}},{&quot;char_start&quot;:&quot;1618&quot;,&quot;char_end&quot;:&quot;2290&quot;,&quot;blob_name&quot;:&quot;c2a433b808f0201241dfc4ff55336b69749905aa7f633d152fbcba4107666004&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/meddra_loader/tests/test_meddra_digraph.py&quot;}},{&quot;char_start&quot;:&quot;2290&quot;,&quot;char_end&quot;:&quot;3029&quot;,&quot;blob_name&quot;:&quot;c2a433b808f0201241dfc4ff55336b69749905aa7f633d152fbcba4107666004&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/meddra_loader/tests/test_meddra_digraph.py&quot;}},{&quot;char_start&quot;:&quot;3029&quot;,&quot;char_end&quot;:&quot;3671&quot;,&quot;blob_name&quot;:&quot;c2a433b808f0201241dfc4ff55336b69749905aa7f633d152fbcba4107666004&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/meddra_loader/tests/test_meddra_digraph.py&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;693&quot;,&quot;blob_name&quot;:&quot;6cd5302980feab50724a294a4eedaba19c07d350c06156da9555c9b5526e1fc1&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/meddra_loader/tests/test_data/smq_list.asc&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;606&quot;,&quot;blob_name&quot;:&quot;be6551d74325f96a7db442c5d85a5e44a3122a846df6537b31f2b4c88ca387f2&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/sprint/entrypoints/check-full-text-annotations.py&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;306&quot;,&quot;blob_name&quot;:&quot;7991567d8fb622e61557de7526faab1a78ed94865a2762094d4285daab266a01&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/sprint/full_text/annotations.py&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;752&quot;,&quot;blob_name&quot;:&quot;06d66832e8f42ab1b94ed585e3b385d3bd64da2fb117c5d87ec23bbe337ae181&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/sprint/entrypoints/extract-manual-abstract-screening_first-search.py&quot;}},{&quot;char_start&quot;:&quot;752&quot;,&quot;char_end&quot;:&quot;1483&quot;,&quot;blob_name&quot;:&quot;06d66832e8f42ab1b94ed585e3b385d3bd64da2fb117c5d87ec23bbe337ae181&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/sprint/entrypoints/extract-manual-abstract-screening_first-search.py&quot;}},{&quot;char_start&quot;:&quot;2789&quot;,&quot;char_end&quot;:&quot;3649&quot;,&quot;blob_name&quot;:&quot;06d66832e8f42ab1b94ed585e3b385d3bd64da2fb117c5d87ec23bbe337ae181&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/sprint/entrypoints/extract-manual-abstract-screening_first-search.py&quot;}},{&quot;char_start&quot;:&quot;3796&quot;,&quot;char_end&quot;:&quot;4392&quot;,&quot;blob_name&quot;:&quot;161cbdc737bfc71c11185eeb5925557e9058dd86aa93113c503bb82c16398037&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/sprint/entrypoints/download-pubmed-abstracts.py&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;571&quot;,&quot;blob_name&quot;:&quot;c829a9f6a102d4c8179ed2d24571ed597489c5c76a610dd8acf4d07f2d3c7648&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/sprint/full_text/ctcae_detection_gpt.py&quot;}},{&quot;char_start&quot;:&quot;1007&quot;,&quot;char_end&quot;:&quot;1708&quot;,&quot;blob_name&quot;:&quot;c829a9f6a102d4c8179ed2d24571ed597489c5c76a610dd8acf4d07f2d3c7648&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/sprint/full_text/ctcae_detection_gpt.py&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;852&quot;,&quot;blob_name&quot;:&quot;1f55667c4b99270b15aa1769579f223e370e2bbd137fd2c21a8672cddc04f918&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/sprint/learning_rate_schedules.py&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;567&quot;,&quot;blob_name&quot;:&quot;3936602b42de01b007d077927ab81b5488dd7d8e27c285333aad98c07e4f1cba&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/meddra_loader/meddra_digraph.py&quot;}}]}],&quot;feedbackStates&quot;:{&quot;temp-fe-b6f81e18-4416-46aa-a9bf-0768f9c22daf&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;}},&quot;toolUseStates&quot;:{},&quot;draftExchange&quot;:{&quot;request_message&quot;:&quot;&quot;,&quot;rich_text_json_repr&quot;:{&quot;type&quot;:&quot;doc&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;paragraph&quot;}]},&quot;status&quot;:&quot;draft&quot;},&quot;draftActiveContextIds&quot;:[&quot;/Users/tcwullsc/Devel/AAI/SPRINT/modules/meddra-loader/README.md&quot;,&quot;/Users/tcwullsc/Devel/AAI/SPRINT/modules/meddra-loaderfalsefalse&quot;,&quot;userGuidelines&quot;],&quot;requestIds&quot;:[],&quot;isPinned&quot;:false,&quot;isShareable&quot;:true,&quot;extraData&quot;:{&quot;hasDirtyEdits&quot;:false},&quot;personaType&quot;:0},&quot;6eefd832-7b5d-4d83-adc8-a36e82c3fa6b&quot;:{&quot;id&quot;:&quot;6eefd832-7b5d-4d83-adc8-a36e82c3fa6b&quot;,&quot;createdAtIso&quot;:&quot;2025-06-24T15:08:06.785Z&quot;,&quot;lastInteractedAtIso&quot;:&quot;2025-06-24T15:08:06.785Z&quot;,&quot;chatHistory&quot;:[],&quot;feedbackStates&quot;:{},&quot;toolUseStates&quot;:{},&quot;draftExchange&quot;:{&quot;request_message&quot;:&quot;&quot;,&quot;rich_text_json_repr&quot;:{&quot;type&quot;:&quot;doc&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;paragraph&quot;}]},&quot;status&quot;:&quot;draft&quot;},&quot;requestIds&quot;:[],&quot;isPinned&quot;:false,&quot;isShareable&quot;:false,&quot;extraData&quot;:{&quot;hasDirtyEdits&quot;:false},&quot;personaType&quot;:0,&quot;rootTaskUuid&quot;:&quot;a3d6d285-11b6-439b-8d1e-364bac7d3512&quot;},&quot;74af6f30-1148-4e4e-9aa9-b13b1280d4ca&quot;:{&quot;id&quot;:&quot;74af6f30-1148-4e4e-9aa9-b13b1280d4ca&quot;,&quot;createdAtIso&quot;:&quot;2025-06-24T15:08:06.807Z&quot;,&quot;lastInteractedAtIso&quot;:&quot;2025-06-25T11:28:34.032Z&quot;,&quot;chatHistory&quot;:[{&quot;request_id&quot;:&quot;0754726c-177e-4f8c-b608-6f204d8e2c91&quot;,&quot;uuid&quot;:&quot;615dcb46-8630-4794-ad74-5f8ac64a4177&quot;,&quot;chatItemType&quot;:&quot;agentic-checkpoint-delimiter&quot;,&quot;status&quot;:&quot;success&quot;,&quot;fromTimestamp&quot;:0,&quot;toTimestamp&quot;:1750777686807,&quot;seen_state&quot;:&quot;seen&quot;},{&quot;status&quot;:&quot;success&quot;,&quot;request_id&quot;:&quot;68c58f66-79b7-42b3-9dd2-94f5034470c4&quot;,&quot;request_message&quot;:&quot;Please add a short usage section to the readme. Keep it light.&quot;,&quot;rich_text_json_repr&quot;:{&quot;type&quot;:&quot;doc&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;Please add a short usage section to the readme. Keep it light.&quot;}]}]},&quot;mentioned_items&quot;:[],&quot;structured_output_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:5,&quot;content&quot;:&quot;&quot;,&quot;tool_use&quot;:{&quot;tool_use_id&quot;:&quot;toolu_vrtx_01SZRN6HjGMhVujvHAoHbehE&quot;,&quot;tool_name&quot;:&quot;view&quot;,&quot;input_json&quot;:&quot;{\&quot;path\&quot;: \&quot;README.md\&quot;, \&quot;type\&quot;: \&quot;file\&quot;}&quot;,&quot;mcp_server_name&quot;:&quot;&quot;,&quot;mcp_tool_name&quot;:&quot;&quot;}},{&quot;id&quot;:0,&quot;type&quot;:0,&quot;content&quot;:&quot;I'll help you add a short usage section to the README.md file. Let me first examine the current content of the README to understand the structure and context.\n&quot;},{&quot;id&quot;:2,&quot;type&quot;:2,&quot;content&quot;:&quot;&quot;},{&quot;id&quot;:3,&quot;type&quot;:3,&quot;content&quot;:&quot;&quot;}],&quot;seen_state&quot;:&quot;seen&quot;,&quot;structured_request_nodes&quot;:[{&quot;id&quot;:0,&quot;type&quot;:0,&quot;text_node&quot;:{&quot;content&quot;:&quot;Please add a short usage section to the readme. Keep it light.&quot;}},{&quot;id&quot;:1,&quot;type&quot;:4,&quot;ide_state_node&quot;:{&quot;workspaceFolders&quot;:[{&quot;repositoryRoot&quot;:&quot;/Users/tcwullsc/Devel/AAI/SPRINT/modules/meddra-loader&quot;,&quot;folderRoot&quot;:&quot;/Users/tcwullsc/Devel/AAI/SPRINT/modules/meddra-loader&quot;}],&quot;workspaceFoldersUnchanged&quot;:false}}],&quot;timestamp&quot;:&quot;2025-06-24T15:24:50.047Z&quot;,&quot;response_text&quot;:&quot;I'll help you add a short usage section to the README.md file. Let me first examine the current content of the README to understand the structure and context.\n&quot;,&quot;workspace_file_chunks&quot;:[]},{&quot;status&quot;:&quot;success&quot;,&quot;request_id&quot;:&quot;2c8f692c-1a4d-4de1-9764-65f8988a5bdf&quot;,&quot;request_message&quot;:&quot;&quot;,&quot;structured_output_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:5,&quot;content&quot;:&quot;&quot;,&quot;tool_use&quot;:{&quot;tool_use_id&quot;:&quot;toolu_vrtx_019ysJTWxYWskYGiBaYNXCfT&quot;,&quot;tool_name&quot;:&quot;view&quot;,&quot;input_json&quot;:&quot;{\&quot;path\&quot;: \&quot;.\&quot;, \&quot;type\&quot;: \&quot;directory\&quot;}&quot;,&quot;mcp_server_name&quot;:&quot;&quot;,&quot;mcp_tool_name&quot;:&quot;&quot;}},{&quot;id&quot;:0,&quot;type&quot;:0,&quot;content&quot;:&quot;Now let me check if there are any source files to understand what this tool does and how it's used:\n&quot;},{&quot;id&quot;:2,&quot;type&quot;:2,&quot;content&quot;:&quot;&quot;},{&quot;id&quot;:3,&quot;type&quot;:3,&quot;content&quot;:&quot;&quot;}],&quot;seen_state&quot;:&quot;seen&quot;,&quot;structured_request_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:1,&quot;tool_result_node&quot;:{&quot;content&quot;:&quot;Here's the result of running `cat -n` on README.md:\n     1\t\n     2\t\n     3\t# MedDRA Loader\n     4\t\n     5\t[![CI](https://github.com/wullli/meddra-loader/workflows/CI/badge.svg)](https://github.com/wullli/meddra-loader/actions/workflows/ci.yml)\n     6\t[![codecov](https://codecov.io/gh/wullli/meddra-loader/branch/main/graph/badge.svg)](https://codecov.io/gh/wullli/meddra-loader)\n     7\t\n     8\tDISCLAIMER: This software does not give you access to MedDRA and you need a valid subscription to work with MedDRA data: https://www.meddra.org/. It merely provides tooling for loading the MedDRA data and hierarchy with python into a networkx graph. It is only intended for use with legitimately licensed MedDRA data and users are responsible for obtaining a valid license from the MSSO.\n     9\t\nTotal lines in file: 9\n&quot;,&quot;is_error&quot;:false,&quot;request_id&quot;:&quot;&quot;,&quot;tool_use_id&quot;:&quot;toolu_vrtx_01SZRN6HjGMhVujvHAoHbehE&quot;}},{&quot;id&quot;:2,&quot;type&quot;:4,&quot;ide_state_node&quot;:{&quot;workspaceFolders&quot;:[{&quot;repositoryRoot&quot;:&quot;/Users/tcwullsc/Devel/AAI/SPRINT/modules/meddra-loader&quot;,&quot;folderRoot&quot;:&quot;/Users/tcwullsc/Devel/AAI/SPRINT/modules/meddra-loader&quot;}],&quot;workspaceFoldersUnchanged&quot;:false}}],&quot;timestamp&quot;:&quot;2025-06-24T15:24:53.343Z&quot;,&quot;response_text&quot;:&quot;Now let me check if there are any source files to understand what this tool does and how it's used:\n&quot;,&quot;workspace_file_chunks&quot;:[]},{&quot;status&quot;:&quot;success&quot;,&quot;request_id&quot;:&quot;989a41b6-e576-444f-8ec3-3224a4f12b54&quot;,&quot;request_message&quot;:&quot;&quot;,&quot;structured_output_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:5,&quot;content&quot;:&quot;&quot;,&quot;tool_use&quot;:{&quot;tool_use_id&quot;:&quot;toolu_vrtx_01ByTgEk3UXbUDEHer4JoYT4&quot;,&quot;tool_name&quot;:&quot;view&quot;,&quot;input_json&quot;:&quot;{\&quot;path\&quot;: \&quot;src/meddra_graph\&quot;, \&quot;type\&quot;: \&quot;directory\&quot;}&quot;,&quot;mcp_server_name&quot;:&quot;&quot;,&quot;mcp_tool_name&quot;:&quot;&quot;}},{&quot;id&quot;:0,&quot;type&quot;:0,&quot;content&quot;:&quot;Let me examine the main source code to understand the functionality:\n&quot;},{&quot;id&quot;:2,&quot;type&quot;:2,&quot;content&quot;:&quot;&quot;},{&quot;id&quot;:3,&quot;type&quot;:3,&quot;content&quot;:&quot;&quot;}],&quot;seen_state&quot;:&quot;seen&quot;,&quot;structured_request_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:1,&quot;tool_result_node&quot;:{&quot;content&quot;:&quot;Here's the files and directories up to 2 levels deep in ., excluding hidden items:\n./LICENSE\n./README.md\n./coverage.xml\n./modules\n./modules/meddra-loader\n./pyproject.toml\n./scripts\n./scripts/run_ci_checks.sh\n./src\n./src/meddra_graph\n./src/meddra_loader.egg-info\n./src/resources\n&quot;,&quot;is_error&quot;:false,&quot;request_id&quot;:&quot;&quot;,&quot;tool_use_id&quot;:&quot;toolu_vrtx_019ysJTWxYWskYGiBaYNXCfT&quot;}},{&quot;id&quot;:2,&quot;type&quot;:4,&quot;ide_state_node&quot;:{&quot;workspaceFolders&quot;:[{&quot;repositoryRoot&quot;:&quot;/Users/tcwullsc/Devel/AAI/SPRINT/modules/meddra-loader&quot;,&quot;folderRoot&quot;:&quot;/Users/tcwullsc/Devel/AAI/SPRINT/modules/meddra-loader&quot;}],&quot;workspaceFoldersUnchanged&quot;:false}}],&quot;timestamp&quot;:&quot;2025-06-24T15:24:57.003Z&quot;,&quot;response_text&quot;:&quot;Let me examine the main source code to understand the functionality:\n&quot;,&quot;workspace_file_chunks&quot;:[]},{&quot;status&quot;:&quot;success&quot;,&quot;request_id&quot;:&quot;fbe0b876-56d3-43fc-982e-c1c244818671&quot;,&quot;request_message&quot;:&quot;&quot;,&quot;structured_output_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:5,&quot;content&quot;:&quot;&quot;,&quot;tool_use&quot;:{&quot;tool_use_id&quot;:&quot;toolu_vrtx_01KHh1xS62pgozFFzUpZGwMK&quot;,&quot;tool_name&quot;:&quot;view&quot;,&quot;input_json&quot;:&quot;{\&quot;path\&quot;: \&quot;src/meddra_graph/__init__.py\&quot;, \&quot;type\&quot;: \&quot;file\&quot;}&quot;,&quot;mcp_server_name&quot;:&quot;&quot;,&quot;mcp_tool_name&quot;:&quot;&quot;}},{&quot;id&quot;:0,&quot;type&quot;:0,&quot;content&quot;:&quot;Let me check the main module and pyproject.toml to understand the package structure and usage:\n&quot;},{&quot;id&quot;:2,&quot;type&quot;:2,&quot;content&quot;:&quot;&quot;},{&quot;id&quot;:3,&quot;type&quot;:3,&quot;content&quot;:&quot;&quot;}],&quot;seen_state&quot;:&quot;seen&quot;,&quot;structured_request_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:1,&quot;tool_result_node&quot;:{&quot;content&quot;:&quot;Here's the files and directories up to 2 levels deep in src/meddra_graph, excluding hidden items:\nsrc/meddra_graph/__init__.py\nsrc/meddra_graph/__pycache__\nsrc/meddra_graph/__pycache__/__init__.cpython-311.pyc\nsrc/meddra_graph/__pycache__/__init__.cpython-312.pyc\nsrc/meddra_graph/__pycache__/meddra_digraph.cpython-311.pyc\nsrc/meddra_graph/__pycache__/meddra_digraph.cpython-312.pyc\nsrc/meddra_graph/meddra_digraph.py\nsrc/meddra_graph/resources\nsrc/meddra_graph/resources/meddra_schema_v28.json\nsrc/meddra_graph/tests\nsrc/meddra_graph/tests/__init__.py\nsrc/meddra_graph/tests/__pycache__\nsrc/meddra_graph/tests/test_data\nsrc/meddra_graph/tests/test_meddra_digraph.py\n&quot;,&quot;is_error&quot;:false,&quot;request_id&quot;:&quot;&quot;,&quot;tool_use_id&quot;:&quot;toolu_vrtx_01ByTgEk3UXbUDEHer4JoYT4&quot;}},{&quot;id&quot;:2,&quot;type&quot;:4,&quot;ide_state_node&quot;:{&quot;workspaceFolders&quot;:[{&quot;repositoryRoot&quot;:&quot;/Users/tcwullsc/Devel/AAI/SPRINT/modules/meddra-loader&quot;,&quot;folderRoot&quot;:&quot;/Users/tcwullsc/Devel/AAI/SPRINT/modules/meddra-loader&quot;}],&quot;workspaceFoldersUnchanged&quot;:false}}],&quot;timestamp&quot;:&quot;2025-06-24T15:25:00.461Z&quot;,&quot;response_text&quot;:&quot;Let me check the main module and pyproject.toml to understand the package structure and usage:\n&quot;,&quot;workspace_file_chunks&quot;:[]},{&quot;status&quot;:&quot;success&quot;,&quot;request_id&quot;:&quot;e7d85324-35c4-4fa3-aa6d-16b02692483e&quot;,&quot;request_message&quot;:&quot;&quot;,&quot;structured_output_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:5,&quot;content&quot;:&quot;&quot;,&quot;tool_use&quot;:{&quot;tool_use_id&quot;:&quot;toolu_vrtx_016Mz6QVPJSLKcwA5vrCtZra&quot;,&quot;tool_name&quot;:&quot;view&quot;,&quot;input_json&quot;:&quot;{\&quot;path\&quot;: \&quot;src/meddra_graph/meddra_digraph.py\&quot;, \&quot;type\&quot;: \&quot;file\&quot;, \&quot;view_range\&quot;: [1, 50]}&quot;,&quot;mcp_server_name&quot;:&quot;&quot;,&quot;mcp_tool_name&quot;:&quot;&quot;}},{&quot;id&quot;:0,&quot;type&quot;:0,&quot;content&quot;:&quot;&quot;},{&quot;id&quot;:2,&quot;type&quot;:2,&quot;content&quot;:&quot;&quot;},{&quot;id&quot;:3,&quot;type&quot;:3,&quot;content&quot;:&quot;&quot;}],&quot;seen_state&quot;:&quot;seen&quot;,&quot;structured_request_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:1,&quot;tool_result_node&quot;:{&quot;content&quot;:&quot;Here's the result of running `cat -n` on src/meddra_graph/__init__.py:\n     1\tVERSION = \&quot;0.0.1\&quot;\n     2\t\nTotal lines in file: 2\n&quot;,&quot;is_error&quot;:false,&quot;request_id&quot;:&quot;&quot;,&quot;tool_use_id&quot;:&quot;toolu_vrtx_01KHh1xS62pgozFFzUpZGwMK&quot;}},{&quot;id&quot;:2,&quot;type&quot;:4,&quot;ide_state_node&quot;:{&quot;workspaceFolders&quot;:[{&quot;repositoryRoot&quot;:&quot;/Users/tcwullsc/Devel/AAI/SPRINT/modules/meddra-loader&quot;,&quot;folderRoot&quot;:&quot;/Users/tcwullsc/Devel/AAI/SPRINT/modules/meddra-loader&quot;}],&quot;workspaceFoldersUnchanged&quot;:false}}],&quot;timestamp&quot;:&quot;2025-06-24T15:25:03.882Z&quot;,&quot;response_text&quot;:&quot;&quot;,&quot;workspace_file_chunks&quot;:[]},{&quot;status&quot;:&quot;success&quot;,&quot;request_id&quot;:&quot;fecab5f8-60ce-4cf7-a4a0-410bfb937acb&quot;,&quot;request_message&quot;:&quot;&quot;,&quot;structured_output_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:5,&quot;content&quot;:&quot;&quot;,&quot;tool_use&quot;:{&quot;tool_use_id&quot;:&quot;toolu_vrtx_018YL3qXFktcnQqND8TWmEB8&quot;,&quot;tool_name&quot;:&quot;view&quot;,&quot;input_json&quot;:&quot;{\&quot;path\&quot;: \&quot;pyproject.toml\&quot;, \&quot;type\&quot;: \&quot;file\&quot;}&quot;,&quot;mcp_server_name&quot;:&quot;&quot;,&quot;mcp_tool_name&quot;:&quot;&quot;}},{&quot;id&quot;:0,&quot;type&quot;:0,&quot;content&quot;:&quot;&quot;},{&quot;id&quot;:2,&quot;type&quot;:2,&quot;content&quot;:&quot;&quot;},{&quot;id&quot;:3,&quot;type&quot;:3,&quot;content&quot;:&quot;&quot;}],&quot;seen_state&quot;:&quot;seen&quot;,&quot;structured_request_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:1,&quot;tool_result_node&quot;:{&quot;content&quot;:&quot;Note:\nView range expanded to meet minimum size of 500 lines. End line adjusted to last line of file (88).\n\nHere's the result of running `cat -n` on src/meddra_graph/meddra_digraph.py:\n     1\timport json\n     2\tfrom pathlib import Path\n     3\tfrom typing import Any, Union, cast\n     4\t\n     5\timport networkx as nx\n     6\t\n     7\tDEFAULT_SCHEMA_PATH = Path(__file__).parent / \&quot;resources\&quot; / \&quot;meddra_schema_v28.json\&quot;\n     8\t\n     9\t\n    10\tclass MedDRADiGraph(nx.DiGraph):\n    11\t\n    12\t    def __init__(self, *args: Any, **kwargs: Any) -&gt; None:\n    13\t        super().__init__(*args, **kwargs)\n    14\t        self.schema: dict[str, dict[str, str]] = {}\n    15\t        self.term_levels: set[str] = set()\n    16\t        self.edges: set[tuple[str, ...]] = set()\n    17\t        self.terms: dict[str, dict[str, Any]] = {}\n    18\t        self.meddra_version: Union[str, None] = None\n    19\t\n    20\t    def load(\n    21\t        self, meddra_directory_path: Union[str, Path], schema_path: Union[str, Path] = DEFAULT_SCHEMA_PATH\n    22\t    ) -&gt; None:\n    23\t        meddra_directory_path = Path(meddra_directory_path)\n    24\t        self.schema = self._load_schema(schema_path)\n    25\t        self.meddra_version = \&quot; \&quot;.join(self._load_file(meddra_directory_path / \&quot;meddra_release.asc\&quot;)[0]).strip()\n    26\t        assert meddra_directory_path.is_dir()\n    27\t        self.term_levels = self._get_term_levels(meddra_directory_path)\n    28\t        edges = set()\n    29\t        self.terms = {}\n    30\t        for file_path in meddra_directory_path.glob(\&quot;*.asc\&quot;):\n    31\t            if self._is_edge_file(file_path):\n    32\t                edges.update(self._load_file(file_path))\n    33\t\n    34\t        for file_path in meddra_directory_path.glob(\&quot;*.asc\&quot;):\n    35\t            if self._is_term_file(file_path):\n    36\t                data = self._load_file(file_path)\n    37\t                file_name = file_path.name\n    38\t                node_type = file_path.name.split(\&quot;.\&quot;)[0]\n    39\t\n    40\t                # Process each row of data\n    41\t                for row in data:\n    42\t                    if len(row) &gt;= len(self.schema[file_name]):\n    43\t                        # Create a dictionary for this term using the schema\n    44\t                        term_dict = dict(zip(self.schema[file_name].keys(), row))\n    45\t                        term_dict[\&quot;node_type\&quot;] = node_type\n    46\t\n    47\t                        # Use the first field as the key (usually the code)\n    48\t                        first_field = list(self.schema[file_name].keys())[0]\n    49\t                        term_key = term_dict[first_field]\n    50\t                        self.terms[term_key] = term_dict\n    51\t        self.add_edges_from(edges)\n    52\t        self.add_nodes_from(self.terms.keys())\n    53\t        nx.set_node_attributes(self, self.terms)\n    54\t\n    55\t    def _load_schema(self, schema_path: Union[str, Path]) -&gt; dict[str, dict[str, str]]:\n    56\t        with open(schema_path, \&quot;r\&quot;, encoding=\&quot;utf-8\&quot;) as f:\n    57\t            return cast(dict[str, dict[str, str]], json.load(f))\n    58\t\n    59\t    def _get_term_levels(self, meddra_directory_path: Path) -&gt; set[str]:\n    60\t        term_levels = set()\n    61\t        for file_path in meddra_directory_path.glob(\&quot;*.asc\&quot;):\n    62\t            file_name = file_path.name.split(\&quot;.\&quot;)[0]\n    63\t            if not \&quot;_\&quot; in file_name:\n    64\t                term_levels.add(file_name)\n    65\t        return term_levels\n    66\t\n    67\t    def _is_term_file(self, file_path: Path) -&gt; bool:\n    68\t        return file_path.name.split(\&quot;.\&quot;)[0] in self.term_levels\n    69\t\n    70\t    def _is_edge_file(self, file_path: Path) -&gt; bool:\n    71\t        if not \&quot;_\&quot; in file_path.name:\n    72\t            return False\n    73\t        try:\n    74\t            t0, t1 = file_path.name.split(\&quot;.\&quot;)[0].split(\&quot;_\&quot;)\n    75\t            return t0 in self.term_levels and t1 in self.term_levels\n    76\t        except (ValueError, IndexError):\n    77\t            return False\n    78\t\n    79\t    def _load_file(self, file_path: Path) -&gt; list[tuple[str, ...]]:\n    80\t        lines = []\n    81\t        with open(file_path, \&quot;r\&quot;, encoding=\&quot;utf-8\&quot;) as f:\n    82\t            for line in f:\n    83\t                lines.append(self._load_line(line))\n    84\t        return lines\n    85\t\n    86\t    def _load_line(self, line: str) -&gt; tuple[str, ...]:\n    87\t        return tuple(line.strip().split(\&quot;$\&quot;))\n    88\t\nTotal lines in file: 88\n&quot;,&quot;is_error&quot;:false,&quot;request_id&quot;:&quot;&quot;,&quot;tool_use_id&quot;:&quot;toolu_vrtx_016Mz6QVPJSLKcwA5vrCtZra&quot;}},{&quot;id&quot;:2,&quot;type&quot;:4,&quot;ide_state_node&quot;:{&quot;workspaceFolders&quot;:[{&quot;repositoryRoot&quot;:&quot;/Users/tcwullsc/Devel/AAI/SPRINT/modules/meddra-loader&quot;,&quot;folderRoot&quot;:&quot;/Users/tcwullsc/Devel/AAI/SPRINT/modules/meddra-loader&quot;}],&quot;workspaceFoldersUnchanged&quot;:false}}],&quot;timestamp&quot;:&quot;2025-06-24T15:25:07.101Z&quot;,&quot;response_text&quot;:&quot;&quot;,&quot;workspace_file_chunks&quot;:[]},{&quot;status&quot;:&quot;success&quot;,&quot;request_id&quot;:&quot;1e398c8d-d5a4-4e3a-9d0a-1be440f2f96f&quot;,&quot;request_message&quot;:&quot;&quot;,&quot;structured_output_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:5,&quot;content&quot;:&quot;&quot;,&quot;tool_use&quot;:{&quot;tool_use_id&quot;:&quot;toolu_vrtx_01NVXRwoJEFP3S3rM2SZ9Q4c&quot;,&quot;tool_name&quot;:&quot;view&quot;,&quot;input_json&quot;:&quot;{\&quot;path\&quot;: \&quot;src/meddra_graph/tests/test_meddra_digraph.py\&quot;, \&quot;type\&quot;: \&quot;file\&quot;, \&quot;view_range\&quot;: [1, 30]}&quot;,&quot;mcp_server_name&quot;:&quot;&quot;,&quot;mcp_tool_name&quot;:&quot;&quot;}},{&quot;id&quot;:0,&quot;type&quot;:0,&quot;content&quot;:&quot;Let me also check the test file to better understand the usage:\n&quot;},{&quot;id&quot;:2,&quot;type&quot;:2,&quot;content&quot;:&quot;&quot;},{&quot;id&quot;:3,&quot;type&quot;:3,&quot;content&quot;:&quot;&quot;}],&quot;seen_state&quot;:&quot;seen&quot;,&quot;structured_request_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:1,&quot;tool_result_node&quot;:{&quot;content&quot;:&quot;Here's the result of running `cat -n` on pyproject.toml:\n     1\t[build-system]\n     2\trequires = [\n     3\t    \&quot;setuptools&gt;=64\&quot;,\n     4\t    \&quot;wheel\&quot;\n     5\t]\n     6\tbuild-backend = \&quot;setuptools.build_meta\&quot;\n     7\t\n     8\t[project]\n     9\tname = \&quot;meddra-graph\&quot;\n    10\tversion = \&quot;0.1.0\&quot;\n    11\tauthors = [\n    12\t    {name = \&quot;Pascal Wullschleger\&quot;}\n    13\t]\n    14\tdescription = \&quot;Package for loading and processing MedDRA data\&quot;\n    15\treadme = \&quot;README.md\&quot;\n    16\trequires-python = \&quot;&gt;=3.9\&quot;\n    17\tclassifiers = [\n    18\t    \&quot;Programming Language :: Python :: 3\&quot;,\n    19\t    \&quot;License :: OSI Approved :: MIT License\&quot;,\n    20\t    \&quot;Operating System :: OS Independent\&quot;\n    21\t]\n    22\tdependencies = [\n    23\t    \&quot;networkx\&quot;,\n    24\t    \&quot;pandas\&quot;\n    25\t]\n    26\t\n    27\t[project.optional-dependencies]\n    28\tdev = [\n    29\t    \&quot;pytest&gt;=7.0\&quot;,\n    30\t    \&quot;pytest-cov&gt;=4.0\&quot;,\n    31\t    \&quot;black&gt;=23.0\&quot;,\n    32\t    \&quot;isort&gt;=5.0\&quot;,\n    33\t    \&quot;mypy&gt;=1.0\&quot;,\n    34\t    \&quot;pylint&gt;=2.15\&quot;,\n    35\t    \&quot;coverage&gt;=7.0\&quot;\n    36\t]\n    37\t\n    38\t[tool.setuptools]\n    39\tpackage-dir = {\&quot;\&quot; = \&quot;src\&quot;}\n    40\t\n    41\t[tool.setuptools.packages.find]\n    42\twhere = [\&quot;src\&quot;]\n    43\t\n    44\t[tool.black]\n    45\tline-length = 120\n    46\ttarget-version = ['py39']\n    47\t\n    48\t[tool.isort]\n    49\tprofile = \&quot;black\&quot;\n    50\tline_length = 120\n    51\t\n    52\t[tool.mypy]\n    53\tpython_version = \&quot;3.9\&quot;\n    54\twarn_return_any = true\n    55\twarn_unused_configs = true\n    56\tdisallow_untyped_defs = true\n    57\tdisallow_incomplete_defs = true\n    58\tcheck_untyped_defs = true\n    59\tdisallow_untyped_decorators = true\n    60\tno_implicit_optional = true\n    61\twarn_redundant_casts = true\n    62\twarn_unused_ignores = true\n    63\twarn_no_return = true\n    64\twarn_unreachable = true\n    65\tstrict_equality = true\n    66\t\n    67\t[tool.pylint.messages_control]\n    68\tdisable = [\n    69\t    \&quot;missing-docstring\&quot;,\n    70\t    \&quot;too-few-public-methods\&quot;,\n    71\t    \&quot;invalid-name\&quot;,\n    72\t    \&quot;line-too-long\&quot;\n    73\t]\n    74\t\n    75\t[tool.pylint.format]\n    76\tmax-line-length = 120\n    77\t\n    78\t[tool.pytest.ini_options]\n    79\ttestpaths = [\&quot;src/meddra_graph/tests\&quot;]\n    80\tpython_files = [\&quot;test_*.py\&quot;]\n    81\tpython_classes = [\&quot;Test*\&quot;]\n    82\tpython_functions = [\&quot;test_*\&quot;]\n    83\taddopts = \&quot;--strict-markers --strict-config\&quot;\n    84\t\n    85\t[tool.coverage.run]\n    86\tsource = [\&quot;src/meddra_graph\&quot;]\n    87\tomit = [\&quot;*/tests/*\&quot;]\n    88\t\n    89\t[tool.coverage.report]\n    90\texclude_lines = [\n    91\t    \&quot;pragma: no cover\&quot;,\n    92\t    \&quot;def __repr__\&quot;,\n    93\t    \&quot;raise AssertionError\&quot;,\n    94\t    \&quot;raise NotImplementedError\&quot;\n    95\t]\n    96\t\nTotal lines in file: 96\n&quot;,&quot;is_error&quot;:false,&quot;request_id&quot;:&quot;&quot;,&quot;tool_use_id&quot;:&quot;toolu_vrtx_018YL3qXFktcnQqND8TWmEB8&quot;}},{&quot;id&quot;:2,&quot;type&quot;:4,&quot;ide_state_node&quot;:{&quot;workspaceFolders&quot;:[{&quot;repositoryRoot&quot;:&quot;/Users/tcwullsc/Devel/AAI/SPRINT/modules/meddra-loader&quot;,&quot;folderRoot&quot;:&quot;/Users/tcwullsc/Devel/AAI/SPRINT/modules/meddra-loader&quot;}],&quot;workspaceFoldersUnchanged&quot;:false}}],&quot;timestamp&quot;:&quot;2025-06-24T15:25:10.426Z&quot;,&quot;response_text&quot;:&quot;Let me also check the test file to better understand the usage:\n&quot;,&quot;workspace_file_chunks&quot;:[]},{&quot;status&quot;:&quot;success&quot;,&quot;request_id&quot;:&quot;6bf6b3fe-9f4c-485f-9c7b-ffd28c2ce307&quot;,&quot;request_message&quot;:&quot;&quot;,&quot;structured_output_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:5,&quot;content&quot;:&quot;&quot;,&quot;tool_use&quot;:{&quot;tool_use_id&quot;:&quot;toolu_vrtx_01XGa2oNN4UcGQp7WxBUspVA&quot;,&quot;tool_name&quot;:&quot;str-replace-editor&quot;,&quot;input_json&quot;:&quot;{\&quot;command\&quot;: \&quot;str_replace\&quot;, \&quot;path\&quot;: \&quot;README.md\&quot;, \&quot;instruction_reminder\&quot;: \&quot;ALWAYS BREAK DOWN EDITS INTO SMALLER CHUNKS OF AT MOST 150 LINES EACH.\&quot;, \&quot;old_str\&quot;: \&quot;DISCLAIMER: This software does not give you access to MedDRA and you need a valid subscription to work with MedDRA data: https://www.meddra.org/. It merely provides tooling for loading the MedDRA data and hierarchy with python into a networkx graph. It is only intended for use with legitimately licensed MedDRA data and users are responsible for obtaining a valid license from the MSSO.\&quot;, \&quot;new_str\&quot;: \&quot;DISCLAIMER: This software does not give you access to MedDRA and you need a valid subscription to work with MedDRA data: https://www.meddra.org/. It merely provides tooling for loading the MedDRA data and hierarchy with python into a networkx graph. It is only intended for use with legitimately licensed MedDRA data and users are responsible for obtaining a valid license from the MSSO.\\n\\n## Usage\\n\\n```python\\nfrom meddra_graph import MedDRADiGraph\\n\\n# Create a new MedDRA graph instance\\ngraph = MedDRADiGraph()\\n\\n# Load MedDRA data from directory containing .asc files\\ngraph.load(\\\&quot;/path/to/meddra/data/directory\\\&quot;)\\n\\n# Access the loaded NetworkX graph\\nprint(f\\\&quot;Loaded {len(graph.nodes)} terms\\\&quot;)\\nprint(f\\\&quot;MedDRA version: {graph.meddra_version}\\\&quot;)\\n\\n# Query specific terms\\nterm_data = graph.terms[\\\&quot;10001000\\\&quot;]  # Access by term code\\nprint(f\\\&quot;Term: {term_data['soc_name']}\\\&quot;)\\n```\&quot;, \&quot;old_str_start_line_number\&quot;: 8, \&quot;old_str_end_line_number\&quot;: 8}&quot;,&quot;mcp_server_name&quot;:&quot;&quot;,&quot;mcp_tool_name&quot;:&quot;&quot;}},{&quot;id&quot;:0,&quot;type&quot;:0,&quot;content&quot;:&quot;Now I have a good understanding of the MedDRA Loader package. Let me add a concise usage section to the README.md file.\n&quot;},{&quot;id&quot;:2,&quot;type&quot;:2,&quot;content&quot;:&quot;&quot;},{&quot;id&quot;:3,&quot;type&quot;:3,&quot;content&quot;:&quot;&quot;}],&quot;seen_state&quot;:&quot;seen&quot;,&quot;structured_request_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:1,&quot;tool_result_node&quot;:{&quot;content&quot;:&quot;Note:\nView range expanded to meet minimum size of 500 lines. End line adjusted to last line of file (99).\n\nHere's the result of running `cat -n` on src/meddra_graph/tests/test_meddra_digraph.py:\n     1\tfrom pathlib import Path\n     2\t\n     3\timport pytest\n     4\t\n     5\tfrom meddra_graph.meddra_digraph import MedDRADiGraph\n     6\t\n     7\tTEST_TERMS = [\n     8\t    # SOC (System Organ Class) test cases\n     9\t    (\&quot;soc\&quot;, \&quot;10001000\&quot;, \&quot;Lorem ipsum dolor sit amet\&quot;),\n    10\t    (\&quot;soc\&quot;, \&quot;10002000\&quot;, \&quot;Consectetur adipiscing elit\&quot;),\n    11\t    (\&quot;soc\&quot;, \&quot;10003000\&quot;, \&quot;Sed do eiusmod tempor incididunt\&quot;),\n    12\t    # HLGT (High Level Group Term) test cases\n    13\t    (\&quot;hlgt\&quot;, \&quot;10001001\&quot;, \&quot;Nostrud exercitation ullamco\&quot;),\n    14\t    (\&quot;hlgt\&quot;, \&quot;10001002\&quot;, \&quot;Laboris nisi ut aliquip ex ea\&quot;),\n    15\t    (\&quot;hlgt\&quot;, \&quot;10002001\&quot;, \&quot;Commodo consequat duis aute irure\&quot;),\n    16\t    # HLT (High Level Term) test cases\n    17\t    (\&quot;hlt\&quot;, \&quot;10001101\&quot;, \&quot;Nulla pariatur excepteur sint occaecat\&quot;),\n    18\t    (\&quot;hlt\&quot;, \&quot;10001102\&quot;, \&quot;Cupidatat non proident sunt in culpa\&quot;),\n    19\t    (\&quot;hlt\&quot;, \&quot;10002101\&quot;, \&quot;Est laborum lorem ipsum dolor sit\&quot;),\n    20\t    # LLT (Lowest Level Term) test cases - using codes that don't conflict with mdhier.asc\n    21\t    (\&quot;llt\&quot;, \&quot;10001302\&quot;, \&quot;Cillum dolore eu fugiat nulla\&quot;),\n    22\t    (\&quot;llt\&quot;, \&quot;10001303\&quot;, \&quot;Pariatur excepteur sint occaecat\&quot;),\n    23\t    (\&quot;llt\&quot;, \&quot;10002302\&quot;, \&quot;Anim id est laborum sed ut\&quot;),\n    24\t]\n    25\t\n    26\t\n    27\t@pytest.fixture(name=\&quot;meddra_digraph\&quot;)\n    28\tdef meddra_digraph_fixture() -&gt; MedDRADiGraph:\n    29\t    return MedDRADiGraph()\n    30\t\n    31\t\n    32\t@pytest.fixture(name=\&quot;test_data_path\&quot;)\n    33\tdef test_data_path_fixture() -&gt; Path:\n    34\t    return Path(__file__).parent / \&quot;test_data\&quot;\n    35\t\n    36\t\n    37\tdef test_term_levels_loaded(meddra_digraph: MedDRADiGraph, test_data_path: Path) -&gt; None:\n    38\t    meddra_digraph.load(test_data_path)\n    39\t    assert meddra_digraph.meddra_version is not None\n    40\t    assert len(meddra_digraph.term_levels) == 6\n    41\t    assert set(meddra_digraph.term_levels) == {\&quot;soc\&quot;, \&quot;hlgt\&quot;, \&quot;hlt\&quot;, \&quot;pt\&quot;, \&quot;llt\&quot;, \&quot;mdhier\&quot;}\n    42\t\n    43\t\n    44\tdef test_schema_levels_loaded(meddra_digraph: MedDRADiGraph, test_data_path: Path) -&gt; None:\n    45\t    meddra_digraph.load(test_data_path)\n    46\t    assert len(meddra_digraph.schema) == 12\n    47\t    # Check that core term files are in schema\n    48\t    assert \&quot;soc.asc\&quot; in meddra_digraph.schema\n    49\t    assert \&quot;hlgt.asc\&quot; in meddra_digraph.schema\n    50\t    assert \&quot;hlt.asc\&quot; in meddra_digraph.schema\n    51\t    assert \&quot;pt.asc\&quot; in meddra_digraph.schema\n    52\t    assert \&quot;llt.asc\&quot; in meddra_digraph.schema\n    53\t    assert \&quot;mdhier.asc\&quot; in meddra_digraph.schema\n    54\t\n    55\t\n    56\tdef test_edges_loaded(meddra_digraph: MedDRADiGraph, test_data_path: Path) -&gt; None:\n    57\t    meddra_digraph.load(test_data_path)\n    58\t    assert len(meddra_digraph.edges) &gt;= 0\n    59\t\n    60\t\n    61\tdef test_terms_loaded(meddra_digraph: MedDRADiGraph, test_data_path: Path) -&gt; None:\n    62\t    meddra_digraph.load(test_data_path)\n    63\t    assert len(meddra_digraph.terms) &gt; 1\n    64\t\n    65\t\n    66\tdef test_nodes_loaded(meddra_digraph: MedDRADiGraph, test_data_path: Path) -&gt; None:\n    67\t    meddra_digraph.load(test_data_path)\n    68\t    assert len(meddra_digraph.nodes) &gt; 1\n    69\t\n    70\t\n    71\t# Generate IDs automatically from the test parameters\n    72\tdef _generate_test_ids() -&gt; list[str]:\n    73\t    \&quot;\&quot;\&quot;Generate test IDs like soc1, soc2, hlgt1, hlgt2, etc.\&quot;\&quot;\&quot;\n    74\t    term_counts: dict[str, int] = {}\n    75\t    ids: list[str] = []\n    76\t    for term_level, _, _ in TEST_TERMS:\n    77\t        term_counts[term_level] = term_counts.get(term_level, 0) + 1\n    78\t        ids.append(f\&quot;{term_level}{term_counts[term_level]}\&quot;)\n    79\t    return ids\n    80\t\n    81\t\n    82\t@pytest.mark.parametrize(\&quot;term_level, term_code, expected_name\&quot;, TEST_TERMS, ids=_generate_test_ids())\n    83\tdef test_term_definitions_correct(\n    84\t    meddra_digraph: MedDRADiGraph, test_data_path: Path, term_level: str, term_code: str, expected_name: str\n    85\t) -&gt; None:\n    86\t    \&quot;\&quot;\&quot;Test that each term level has the correct definition/name in the test data.\&quot;\&quot;\&quot;\n    87\t    meddra_digraph.load(test_data_path)\n    88\t\n    89\t    assert term_code in meddra_digraph.terms, f\&quot;Term {term_code} not found in loaded terms\&quot;\n    90\t\n    91\t    term_data = meddra_digraph.terms[term_code]\n    92\t    assert term_data[\&quot;node_type\&quot;] == term_level, f\&quot;Expected node_type {term_level}, got {term_data['node_type']}\&quot;\n    93\t\n    94\t    name_field = f\&quot;{term_level}_name\&quot;\n    95\t    assert name_field in term_data, f\&quot;Name field {name_field} not found in term data\&quot;\n    96\t    assert (\n    97\t        term_data[name_field] == expected_name\n    98\t    ), f\&quot;Expected {name_field} to be '{expected_name}', got '{term_data[name_field]}'\&quot;\n    99\t\nTotal lines in file: 99\n&quot;,&quot;is_error&quot;:false,&quot;request_id&quot;:&quot;&quot;,&quot;tool_use_id&quot;:&quot;toolu_vrtx_01NVXRwoJEFP3S3rM2SZ9Q4c&quot;}},{&quot;id&quot;:2,&quot;type&quot;:4,&quot;ide_state_node&quot;:{&quot;workspaceFolders&quot;:[{&quot;repositoryRoot&quot;:&quot;/Users/tcwullsc/Devel/AAI/SPRINT/modules/meddra-loader&quot;,&quot;folderRoot&quot;:&quot;/Users/tcwullsc/Devel/AAI/SPRINT/modules/meddra-loader&quot;}],&quot;workspaceFoldersUnchanged&quot;:false}}],&quot;timestamp&quot;:&quot;2025-06-24T15:25:13.712Z&quot;,&quot;response_text&quot;:&quot;Now I have a good understanding of the MedDRA Loader package. Let me add a concise usage section to the README.md file.\n&quot;,&quot;workspace_file_chunks&quot;:[]},{&quot;request_id&quot;:&quot;2971bd86-612b-4b7b-8aa0-ed4e43272cee&quot;,&quot;status&quot;:&quot;cancelled&quot;,&quot;chatItemType&quot;:&quot;agentic-turn-delimiter&quot;},{&quot;status&quot;:&quot;success&quot;,&quot;request_id&quot;:&quot;077d25f8-516f-4cae-980f-421a87a97d93&quot;,&quot;request_message&quot;:&quot;Please add a short usage section to the readme. Keep it light.&quot;,&quot;rich_text_json_repr&quot;:{&quot;type&quot;:&quot;doc&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;Please add a short usage section to the readme. Keep it light.&quot;}]}]},&quot;mentioned_items&quot;:[],&quot;structured_output_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:5,&quot;content&quot;:&quot;&quot;,&quot;tool_use&quot;:{&quot;tool_use_id&quot;:&quot;toolu_vrtx_011vqv1FHbGdUsNKs6S7dxyn&quot;,&quot;tool_name&quot;:&quot;view&quot;,&quot;input_json&quot;:&quot;{\&quot;path\&quot;: \&quot;README.md\&quot;, \&quot;type\&quot;: \&quot;file\&quot;}&quot;,&quot;mcp_server_name&quot;:&quot;&quot;,&quot;mcp_tool_name&quot;:&quot;&quot;}},{&quot;id&quot;:0,&quot;type&quot;:0,&quot;content&quot;:&quot;I'll add a short usage section to the README.md file. Let me first examine the current README and then add a concise usage section.\n&quot;},{&quot;id&quot;:2,&quot;type&quot;:2,&quot;content&quot;:&quot;&quot;},{&quot;id&quot;:3,&quot;type&quot;:3,&quot;content&quot;:&quot;&quot;}],&quot;seen_state&quot;:&quot;seen&quot;,&quot;structured_request_nodes&quot;:[{&quot;id&quot;:0,&quot;type&quot;:0,&quot;text_node&quot;:{&quot;content&quot;:&quot;Please add a short usage section to the readme. Keep it light.&quot;}},{&quot;id&quot;:1,&quot;type&quot;:4,&quot;ide_state_node&quot;:{&quot;workspaceFolders&quot;:[{&quot;repositoryRoot&quot;:&quot;/Users/tcwullsc/Devel/AAI/SPRINT/modules/meddra-loader&quot;,&quot;folderRoot&quot;:&quot;/Users/tcwullsc/Devel/AAI/SPRINT/modules/meddra-loader&quot;}],&quot;workspaceFoldersUnchanged&quot;:false}}],&quot;timestamp&quot;:&quot;2025-06-25T07:47:43.774Z&quot;,&quot;response_text&quot;:&quot;I'll add a short usage section to the README.md file. Let me first examine the current README and then add a concise usage section.\n&quot;,&quot;workspace_file_chunks&quot;:[]},{&quot;status&quot;:&quot;success&quot;,&quot;request_id&quot;:&quot;eac253cf-f9b4-440c-b78a-edcac5b88089&quot;,&quot;request_message&quot;:&quot;&quot;,&quot;structured_output_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:5,&quot;content&quot;:&quot;&quot;,&quot;tool_use&quot;:{&quot;tool_use_id&quot;:&quot;toolu_vrtx_014QMiy1SHkpw4J7d1x39eJR&quot;,&quot;tool_name&quot;:&quot;str-replace-editor&quot;,&quot;input_json&quot;:&quot;{\&quot;command\&quot;: \&quot;str_replace\&quot;, \&quot;path\&quot;: \&quot;README.md\&quot;, \&quot;instruction_reminder\&quot;: \&quot;ALWAYS BREAK DOWN EDITS INTO SMALLER CHUNKS OF AT MOST 150 LINES EACH.\&quot;, \&quot;old_str\&quot;: \&quot;DISCLAIMER: This software does not give you access to MedDRA and you need a valid subscription to work with MedDRA data: https://www.meddra.org/. It merely provides tooling for loading the MedDRA data and hierarchy with python into a networkx graph. It is only intended for use with legitimately licensed MedDRA data and users are responsible for obtaining a valid license from the MSSO.\&quot;, \&quot;new_str\&quot;: \&quot;DISCLAIMER: This software does not give you access to MedDRA and you need a valid subscription to work with MedDRA data: https://www.meddra.org/. It merely provides tooling for loading the MedDRA data and hierarchy with python into a networkx graph. It is only intended for use with legitimately licensed MedDRA data and users are responsible for obtaining a valid license from the MSSO.\\n\\n## Usage\\n\\n```python\\nfrom meddra_graph import MedDRADiGraph\\n\\n# Load MedDRA data from directory containing .asc files\\ngraph = MedDRADiGraph()\\ngraph.load(\\\&quot;/path/to/meddra/data\\\&quot;)\\n\\n# Access loaded data\\nprint(f\\\&quot;Loaded {len(graph.nodes)} terms\\\&quot;)\\nprint(f\\\&quot;Version: {graph.meddra_version}\\\&quot;)\\n```\&quot;, \&quot;old_str_start_line_number\&quot;: 8, \&quot;old_str_end_line_number\&quot;: 8}&quot;,&quot;mcp_server_name&quot;:&quot;&quot;,&quot;mcp_tool_name&quot;:&quot;&quot;}},{&quot;id&quot;:0,&quot;type&quot;:0,&quot;content&quot;:&quot;Now I'll add a light usage section to the README:\n&quot;},{&quot;id&quot;:2,&quot;type&quot;:2,&quot;content&quot;:&quot;&quot;},{&quot;id&quot;:3,&quot;type&quot;:3,&quot;content&quot;:&quot;&quot;}],&quot;seen_state&quot;:&quot;seen&quot;,&quot;structured_request_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:1,&quot;tool_result_node&quot;:{&quot;content&quot;:&quot;Here's the result of running `cat -n` on README.md:\n     1\t\n     2\t\n     3\t# MedDRA Loader\n     4\t\n     5\t[![CI](https://github.com/wullli/meddra-loader/workflows/CI/badge.svg)](https://github.com/wullli/meddra-loader/actions/workflows/ci.yml)\n     6\t[![codecov](https://codecov.io/gh/wullli/meddra-loader/branch/main/graph/badge.svg)](https://codecov.io/gh/wullli/meddra-loader)\n     7\t\n     8\tDISCLAIMER: This software does not give you access to MedDRA and you need a valid subscription to work with MedDRA data: https://www.meddra.org/. It merely provides tooling for loading the MedDRA data and hierarchy with python into a networkx graph. It is only intended for use with legitimately licensed MedDRA data and users are responsible for obtaining a valid license from the MSSO.\n     9\t\nTotal lines in file: 9\n&quot;,&quot;is_error&quot;:false,&quot;request_id&quot;:&quot;&quot;,&quot;tool_use_id&quot;:&quot;toolu_vrtx_011vqv1FHbGdUsNKs6S7dxyn&quot;}},{&quot;id&quot;:2,&quot;type&quot;:4,&quot;ide_state_node&quot;:{&quot;workspaceFolders&quot;:[{&quot;repositoryRoot&quot;:&quot;/Users/tcwullsc/Devel/AAI/SPRINT/modules/meddra-loader&quot;,&quot;folderRoot&quot;:&quot;/Users/tcwullsc/Devel/AAI/SPRINT/modules/meddra-loader&quot;}],&quot;workspaceFoldersUnchanged&quot;:false}}],&quot;timestamp&quot;:&quot;2025-06-25T07:47:47.792Z&quot;,&quot;response_text&quot;:&quot;Now I'll add a light usage section to the README:\n&quot;,&quot;workspace_file_chunks&quot;:[]},{&quot;request_id&quot;:&quot;47689029-dccc-4906-bacb-be889983b475&quot;,&quot;status&quot;:&quot;cancelled&quot;,&quot;chatItemType&quot;:&quot;agentic-turn-delimiter&quot;},{&quot;request_id&quot;:&quot;8d335a08-19c0-4c3a-a84f-fd8c99089720&quot;,&quot;status&quot;:&quot;cancelled&quot;,&quot;chatItemType&quot;:&quot;agentic-turn-delimiter&quot;},{&quot;request_id&quot;:&quot;f06f3027-f874-48e4-954a-adec3d1ab322&quot;,&quot;status&quot;:&quot;cancelled&quot;,&quot;chatItemType&quot;:&quot;agentic-turn-delimiter&quot;},{&quot;status&quot;:&quot;success&quot;,&quot;request_id&quot;:&quot;cc25f179-5a7a-466c-bc36-62eb1e878472&quot;,&quot;request_message&quot;:&quot;I get an node in the meddra graph of the form &lt;code1&gt;...&lt;code2&gt; after loading, causing this test to fail, and I do not understand how this is possible. &quot;,&quot;rich_text_json_repr&quot;:{&quot;type&quot;:&quot;doc&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;I get an node in the meddra graph of the form &lt;code1&gt;...&lt;code2&gt; after loading, causing this test to fail, and I do not understand how this is possible. &quot;}]}]},&quot;mentioned_items&quot;:[],&quot;structured_output_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:5,&quot;content&quot;:&quot;&quot;,&quot;tool_use&quot;:{&quot;tool_use_id&quot;:&quot;toolu_vrtx_01SDKYgZJiMyBfzUsi4ndp4W&quot;,&quot;tool_name&quot;:&quot;view&quot;,&quot;input_json&quot;:&quot;{\&quot;path\&quot;: \&quot;src/meddra_graph/tests/test_meddra_loader.py\&quot;, \&quot;type\&quot;: \&quot;file\&quot;}&quot;,&quot;mcp_server_name&quot;:&quot;&quot;,&quot;mcp_tool_name&quot;:&quot;&quot;}},{&quot;id&quot;:0,&quot;type&quot;:0,&quot;content&quot;:&quot;I need to understand the issue you're experiencing with the MedDRA graph loading. Let me first examine the test file you have open and then look at the loading logic to understand how nodes with the format `&lt;code1&gt;...&lt;code2&gt;` could be created.\n&quot;},{&quot;id&quot;:2,&quot;type&quot;:2,&quot;content&quot;:&quot;&quot;},{&quot;id&quot;:3,&quot;type&quot;:3,&quot;content&quot;:&quot;&quot;}],&quot;seen_state&quot;:&quot;seen&quot;,&quot;structured_request_nodes&quot;:[{&quot;id&quot;:0,&quot;type&quot;:0,&quot;text_node&quot;:{&quot;content&quot;:&quot;I get an node in the meddra graph of the form &lt;code1&gt;...&lt;code2&gt; after loading, causing this test to fail, and I do not understand how this is possible. &quot;}},{&quot;id&quot;:1,&quot;type&quot;:4,&quot;ide_state_node&quot;:{&quot;workspaceFolders&quot;:[{&quot;repositoryRoot&quot;:&quot;/Users/tcwullsc/Devel/AAI/SPRINT/modules/meddra-loader&quot;,&quot;folderRoot&quot;:&quot;/Users/tcwullsc/Devel/AAI/SPRINT/modules/meddra-loader&quot;}],&quot;workspaceFoldersUnchanged&quot;:false}}],&quot;timestamp&quot;:&quot;2025-06-25T09:19:27.841Z&quot;,&quot;response_text&quot;:&quot;I need to understand the issue you're experiencing with the MedDRA graph loading. Let me first examine the test file you have open and then look at the loading logic to understand how nodes with the format `&lt;code1&gt;...&lt;code2&gt;` could be created.\n&quot;,&quot;workspace_file_chunks&quot;:[]},{&quot;status&quot;:&quot;success&quot;,&quot;request_id&quot;:&quot;24d52d2e-a346-404f-aff2-9639c1101fdd&quot;,&quot;request_message&quot;:&quot;&quot;,&quot;structured_output_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:5,&quot;content&quot;:&quot;&quot;,&quot;tool_use&quot;:{&quot;tool_use_id&quot;:&quot;toolu_vrtx_01J2fTE7m5gqneuY9SeWUNMz&quot;,&quot;tool_name&quot;:&quot;codebase-retrieval&quot;,&quot;input_json&quot;:&quot;{\&quot;information_request\&quot;: \&quot;MedDRALoader class and MedDRAData class implementation, specifically how nodes are created and added to the graph, and how edge files are processed\&quot;}&quot;,&quot;mcp_server_name&quot;:&quot;&quot;,&quot;mcp_tool_name&quot;:&quot;&quot;}},{&quot;id&quot;:0,&quot;type&quot;:0,&quot;content&quot;:&quot;I see there's a different test file than what I looked at earlier. Let me also check the MedDRALoader class to understand the loading mechanism:\n&quot;},{&quot;id&quot;:2,&quot;type&quot;:2,&quot;content&quot;:&quot;&quot;},{&quot;id&quot;:3,&quot;type&quot;:3,&quot;content&quot;:&quot;&quot;}],&quot;seen_state&quot;:&quot;seen&quot;,&quot;structured_request_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:1,&quot;tool_result_node&quot;:{&quot;content&quot;:&quot;Here's the result of running `cat -n` on src/meddra_graph/tests/test_meddra_loader.py:\n     1\tfrom pathlib import Path\n     2\t\n     3\timport pandas as pd\n     4\timport pytest\n     5\t\n     6\tfrom meddra_graph.meddra_loader import MedDRALoader, MedDRAData\n     7\t\n     8\tTEST_TERMS = [\n     9\t    # SOC (System Organ Classes)\n    10\t    (\&quot;soc\&quot;, \&quot;10001000\&quot;, \&quot;Lorem ipsum dolor sit amet\&quot;),\n    11\t    (\&quot;soc\&quot;, \&quot;10002000\&quot;, \&quot;Consectetur adipiscing elit\&quot;),\n    12\t    (\&quot;soc\&quot;, \&quot;10003000\&quot;, \&quot;Sed do eiusmod tempor incididunt\&quot;),\n    13\t    (\&quot;soc\&quot;, \&quot;10004000\&quot;, \&quot;Ut labore et dolore magna aliqua\&quot;),\n    14\t    (\&quot;soc\&quot;, \&quot;10005000\&quot;, \&quot;Enim ad minim veniam quis\&quot;),\n    15\t\n    16\t    # HLGT (High Level Group Terms)\n    17\t    (\&quot;hlgt\&quot;, \&quot;10001001\&quot;, \&quot;Nostrud exercitation ullamco\&quot;),\n    18\t    (\&quot;hlgt\&quot;, \&quot;10001002\&quot;, \&quot;Laboris nisi ut aliquip ex ea\&quot;),\n    19\t    (\&quot;hlgt\&quot;, \&quot;10002001\&quot;, \&quot;Commodo consequat duis aute irure\&quot;),\n    20\t    (\&quot;hlgt\&quot;, \&quot;10002002\&quot;, \&quot;Dolor in reprehenderit in voluptate\&quot;),\n    21\t    (\&quot;hlgt\&quot;, \&quot;10003001\&quot;, \&quot;Velit esse cillum dolore eu fugiat\&quot;),\n    22\t\n    23\t    # HLT (High Level Terms)\n    24\t    (\&quot;hlt\&quot;, \&quot;10001101\&quot;, \&quot;Nulla pariatur excepteur sint occaecat\&quot;),\n    25\t    (\&quot;hlt\&quot;, \&quot;10001102\&quot;, \&quot;Cupidatat non proident sunt in culpa\&quot;),\n    26\t    (\&quot;hlt\&quot;, \&quot;10002101\&quot;, \&quot;Est laborum lorem ipsum dolor sit\&quot;),\n    27\t    (\&quot;hlt\&quot;, \&quot;10002102\&quot;, \&quot;Amet consectetur adipiscing elit sed\&quot;),\n    28\t    (\&quot;hlt\&quot;, \&quot;10003101\&quot;, \&quot;Duis aute irure dolor in reprehenderit\&quot;),\n    29\t\n    30\t    # PT (Preferred Terms)\n    31\t    (\&quot;pt\&quot;, \&quot;10001201\&quot;, \&quot;Do eiusmod tempor incididunt ut\&quot;),\n    32\t    (\&quot;pt\&quot;, \&quot;10001202\&quot;, \&quot;Labore et dolore magna aliqua\&quot;),\n    33\t    (\&quot;pt\&quot;, \&quot;10001301\&quot;, \&quot;Enim ad minim veniam quis nostrud\&quot;),\n    34\t    (\&quot;pt\&quot;, \&quot;10002201\&quot;, \&quot;Exercitation ullamco laboris nisi\&quot;),\n    35\t    (\&quot;pt\&quot;, \&quot;10002202\&quot;, \&quot;Ut aliquip ex ea commodo consequat\&quot;),\n    36\t\n    37\t    # LLT (Lowest Level Terms)\n    38\t    (\&quot;llt\&quot;, \&quot;10001302\&quot;, \&quot;Cillum dolore eu fugiat nulla\&quot;),\n    39\t    (\&quot;llt\&quot;, \&quot;10001303\&quot;, \&quot;Pariatur excepteur sint occaecat\&quot;),\n    40\t    (\&quot;llt\&quot;, \&quot;10002302\&quot;, \&quot;Anim id est laborum sed ut\&quot;),\n    41\t    (\&quot;llt\&quot;, \&quot;10002303\&quot;, \&quot;Lorem ipsum dolor sit amet\&quot;),\n    42\t    (\&quot;llt\&quot;, \&quot;10003301\&quot;, \&quot;Consectetur adipiscing elit\&quot;),\n    43\t]\n    44\t\n    45\tNUMBER_OF_TEST_TERMS = len(TEST_TERMS)\n    46\tNUMBER_OF_TEST_EDGES = 19\n    47\t\n    48\t\n    49\tdef _generate_test_ids() -&gt; list[str]:\n    50\t    \&quot;\&quot;\&quot;Generate test IDs like soc1, soc2, hlgt1, hlgt2, etc.\&quot;\&quot;\&quot;\n    51\t    term_counts: dict[str, int] = {}\n    52\t    ids: list[str] = []\n    53\t    for term_level, _, _ in TEST_TERMS:\n    54\t        term_counts[term_level] = term_counts.get(term_level, 0) + 1\n    55\t        ids.append(f\&quot;{term_level}{term_counts[term_level]}\&quot;)\n    56\t    return ids\n    57\t\n    58\t\n    59\t@pytest.fixture(name=\&quot;meddra_data\&quot;)\n    60\tdef meddra_data_fixture() -&gt; MedDRAData:\n    61\t    return MedDRALoader.load(Path(__file__).parent / \&quot;test_data\&quot;)\n    62\t\n    63\t\n    64\tdef test_loading_passes() -&gt; None:\n    65\t    MedDRALoader.load(Path(__file__).parent / \&quot;test_data\&quot;)\n    66\t\n    67\t\n    68\tdef test_version_loaded(meddra_data: MedDRAData) -&gt; None:\n    69\t    assert meddra_data.version == \&quot;99.0 TestLang Dummy Data Release\&quot;\n    70\t\n    71\t\n    72\tdef test_term_levels_loaded(meddra_data: MedDRAData) -&gt; None:\n    73\t    df = pd.DataFrame.from_records(list(meddra_data.terms.values()))\n    74\t    assert len(df[\&quot;term_type\&quot;].unique()) == 5\n    75\t    assert set(df[\&quot;term_type\&quot;].unique()) == {\&quot;soc\&quot;, \&quot;hlgt\&quot;, \&quot;hlt\&quot;, \&quot;pt\&quot;, \&quot;llt\&quot;}\n    76\t\n    77\t\n    78\tdef test_schema_levels_loaded(meddra_data: MedDRAData) -&gt; None:\n    79\t    assert len(meddra_data.schema) == 12\n    80\t    assert all(fn in meddra_data.schema for fn in [\&quot;soc.asc\&quot;, \&quot;hlgt.asc\&quot;, \&quot;hlt.asc\&quot;, \&quot;pt.asc\&quot;, \&quot;llt.asc\&quot;])\n    81\t\n    82\t\n    83\tdef test_edges_loaded(meddra_data: MedDRAData) -&gt; None:\n    84\t    assert len(meddra_data.edges) == NUMBER_OF_TEST_EDGES\n    85\t\n    86\t\n    87\tdef test_terms_loaded(meddra_data: MedDRAData) -&gt; None:\n    88\t    assert len(meddra_data.terms) == NUMBER_OF_TEST_TERMS\n    89\t\n    90\t\n    91\tdef test_graph_nodes_loaded(meddra_data: MedDRAData) -&gt; None:\n    92\t    assert len(meddra_data.to_graph().nodes()) == NUMBER_OF_TEST_TERMS\n    93\t\n    94\t\n    95\tdef test_graph_edges_loaded(meddra_data: MedDRAData) -&gt; None:\n    96\t    assert len(meddra_data.to_graph().edges()) == NUMBER_OF_TEST_EDGES\n    97\t\n    98\t\n    99\tdef test_term_definitions_correct(meddra_data: MedDRAData) -&gt; None:\n   100\t    \&quot;\&quot;\&quot;Test that each term has the correct definition/name in the loaded data.\&quot;\&quot;\&quot;\n   101\t    g = meddra_data.to_graph()\n   102\t    for term_type, term_code, expected_name in TEST_TERMS:\n   103\t        assert g.nodes[term_code][f\&quot;{term_type}_code\&quot;] == term_code\n   104\t        assert g.nodes[term_code][f\&quot;{term_type}_name\&quot;] == expected_name\n   105\t        assert g.nodes[term_code][\&quot;term_type\&quot;] == term_type\n   106\t\nTotal lines in file: 106\n&quot;,&quot;is_error&quot;:false,&quot;request_id&quot;:&quot;&quot;,&quot;tool_use_id&quot;:&quot;toolu_vrtx_01SDKYgZJiMyBfzUsi4ndp4W&quot;}},{&quot;id&quot;:2,&quot;type&quot;:4,&quot;ide_state_node&quot;:{&quot;workspaceFolders&quot;:[{&quot;repositoryRoot&quot;:&quot;/Users/tcwullsc/Devel/AAI/SPRINT/modules/meddra-loader&quot;,&quot;folderRoot&quot;:&quot;/Users/tcwullsc/Devel/AAI/SPRINT/modules/meddra-loader&quot;}],&quot;workspaceFoldersUnchanged&quot;:false}}],&quot;timestamp&quot;:&quot;2025-06-25T09:19:41.713Z&quot;,&quot;response_text&quot;:&quot;I see there's a different test file than what I looked at earlier. Let me also check the MedDRALoader class to understand the loading mechanism:\n&quot;,&quot;workspace_file_chunks&quot;:[]},{&quot;status&quot;:&quot;success&quot;,&quot;request_id&quot;:&quot;a3169c9a-bc12-4add-846a-44cdcaf89d3b&quot;,&quot;request_message&quot;:&quot;&quot;,&quot;structured_output_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:5,&quot;content&quot;:&quot;&quot;,&quot;tool_use&quot;:{&quot;tool_use_id&quot;:&quot;toolu_vrtx_01P2WFvZyTfF71WTABVMLGPo&quot;,&quot;tool_name&quot;:&quot;view&quot;,&quot;input_json&quot;:&quot;{\&quot;path\&quot;: \&quot;src/meddra_graph/meddra_loader.py\&quot;, \&quot;type\&quot;: \&quot;file\&quot;, \&quot;view_range\&quot;: [18, 25]}&quot;,&quot;mcp_server_name&quot;:&quot;&quot;,&quot;mcp_tool_name&quot;:&quot;&quot;}},{&quot;id&quot;:0,&quot;type&quot;:0,&quot;content&quot;:&quot;Now I can see the issue! Looking at the code, I notice there's a bug in the `MedDRAData.to_graph()` method. Let me examine it more closely:\n&quot;},{&quot;id&quot;:2,&quot;type&quot;:2,&quot;content&quot;:&quot;&quot;},{&quot;id&quot;:3,&quot;type&quot;:3,&quot;content&quot;:&quot;&quot;}],&quot;seen_state&quot;:&quot;seen&quot;,&quot;structured_request_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:1,&quot;tool_result_node&quot;:{&quot;content&quot;:&quot;The following code sections were retrieved:\nPath: src/meddra_graph/meddra_loader.py\n     1\timport json\n     2\tfrom dataclasses import dataclass\n     3\tfrom pathlib import Path\n     4\tfrom typing import Any, Union, cast\n     5\t\n     6\timport networkx as nx\n     7\t\n     8\tDEFAULT_SCHEMA_PATH = Path(__file__).parent / \&quot;resources\&quot; / \&quot;meddra_schema_v28.json\&quot;\n     9\t\n    10\t\n    11\t@dataclass\n    12\tclass MedDRAData:\n    13\t    version: str\n    14\t    schema: dict[str, dict[str, str]]\n    15\t    terms: dict[str, dict[str, Any]]\n    16\t    edges: list[tuple[str, str]]\n    17\t\n    18\t    def to_graph(self) -&gt; nx.DiGraph:\n    19\t        g = nx.DiGraph()\n    20\t        g.add_edges_from(self.edges)\n    21\t        g.add_nodes_from(self.terms.keys())\n    22\t        nx.set_node_attributes(g, self.terms)\n    23\t\n    24\t\n    25\t@dataclass\n    26\tclass _MedDRASchema:\n    27\t    fields: dict[str, dict[str, str]]\n    28\t    term_types: set[str]\n    29\t\n    30\t    def __init__(self, schema_path: Union[str, Path]):\n    31\t        with open(schema_path, \&quot;r\&quot;, encoding=\&quot;utf-8\&quot;) as f:\n    32\t            data = cast(dict[str, dict[str, dict[str, str]]], json.load(f))\n    33\t            self.term_types = set(data[\&quot;term_types\&quot;])\n    34\t            self.fields = data[\&quot;fields\&quot;]\n    35\t\n    36\t\n    37\tclass MedDRALoader:\n    38\t\n    39\t    @classmethod\n    40\t    def load(\n    41\t            cls,\n    42\t            meddra_directory_path: Union[str, Path],\n    43\t            schema_path: Union[str, Path] = DEFAULT_SCHEMA_PATH\n    44\t    ) -&gt; MedDRAData:\n    45\t        meddra_directory_path = Path(meddra_directory_path)\n    46\t        assert meddra_directory_path.is_dir()\n    47\t\n    48\t        schema = _MedDRASchema(schema_path)\n    49\t        version = \&quot; \&quot;.join(cls._load_file(meddra_directory_path / \&quot;meddra_release.asc\&quot;)[0]).strip()\n    50\t        terms = cls._load_terms(meddra_directory_path, schema)\n    51\t        edges = cls._load_edges(meddra_directory_path, schema)\n    52\t\n    53\t        return MedDRAData(version=version, schema=schema.fields, terms=terms, edges=list(edges))\n    54\t\n    55\t    @classmethod\n    56\t    def _load_terms(cls,\n    57\t                    meddra_directory_path: Path,\n    58\t                    schema: _MedDRASchema,\n    59\t                    ) -&gt; dict[str, dict[str, Any]]:\n    60\t        terms = {}\n    61\t        for file_path in meddra_directory_path.glob(\&quot;*.asc\&quot;):\n    62\t            if cls._is_term_file(file_path, schema):\n    63\t                data = cls._load_file(file_path)\n    64\t                file_name = file_path.name\n    65\t                term_type = file_name.split(\&quot;.\&quot;)[0]\n    66\t\n    67\t                for row in data:\n    68\t                    if len(row) &gt;= len(schema.fields[file_name]):\n    69\t                        term_dict = dict(zip(schema.fields[file_name].keys(), row))\n    70\t                        term_dict[\&quot;term_type\&quot;] = term_type\n    71\t\n    72\t                        first_field = list(schema.fields[file_name].keys())[0]\n    73\t                        term_key = term_dict[first_field]\n    74\t                        terms[term_key] = term_dict\n    75\t        return terms\n    76\t\n    77\t    @classmethod\n    78\t    def _load_edges(cls, meddra_directory_path: Path, schema: _MedDRASchema) -&gt; set[tuple[str, str]]:\n    79\t        edges: set[tuple[str, str]] = set()\n    80\t        for file_path in meddra_directory_path.glob(\&quot;*.asc\&quot;):\n    81\t            if cls._is_edge_file(file_path, schema):\n    82\t                edges.update(cast(set[tuple[str, str]], cls._load_file(file_path)))\n    83\t        return edges\n    84\t\n    85\t    @staticmethod\n    86\t    def _is_term_file(file_path: Path, schema: _MedDRASchema) -&gt; bool:\n    87\t        return file_path.name.split(\&quot;.\&quot;)[0] in schema.term_types\n    88\t\n    89\t    @staticmethod\n    90\t    def _is_edge_file(file_path: Path, schema: _MedDRASchema) -&gt; bool:\n    91\t        if not \&quot;_\&quot; in file_path.name:\n    92\t            return False\n    93\t        try:\n    94\t            t0, t1 = file_path.name.split(\&quot;.\&quot;)[0].split(\&quot;_\&quot;)\n    95\t            return t0 in schema.term_types and t1 in schema.term_types\n    96\t        except (ValueError, IndexError):\n    97\t            return False\n    98\t\n    99\t    @classmethod\n   100\t    def _load_file(cls, file_path: Path) -&gt; list[tuple[str, ...]]:\n   101\t        lines = []\n   102\t        with open(file_path, \&quot;r\&quot;, encoding=\&quot;utf-8\&quot;) as f:\n   103\t            for line in f:\n   104\t                lines.append(cls._load_line(line))\n   105\t        return lines\n   106\t\n   107\t    @classmethod\n   108\t    def _load_line(cls, line: str) -&gt; tuple[str, ...]:\n   109\t        return tuple(line.strip().split(\&quot;$\&quot;))\n...\nPath: modules/meddra-loader/demo_loading.py\n     1\t#!/usr/bin/env python3\n     2\t\&quot;\&quot;\&quot;\n     3\tDemo script to show MedDRADiGraph loading dummy data.\n     4\t\&quot;\&quot;\&quot;\n     5\t\n     6\tfrom pathlib import Path\n     7\tfrom src.meddra_graph.meddra_digraph import MedDRADiGraph\n     8\t\n     9\tdef main():\n    10\t    # Create MedDRADiGraph instance\n    11\t    graph = MedDRADiGraph()\n    12\t    \n    13\t    # Load dummy test data\n    14\t    test_data_path = Path(\&quot;test_data\&quot;)\n    15\t    print(f\&quot;Loading dummy MedDRA data from: {test_data_path}\&quot;)\n    16\t    \n    17\t    graph.load(test_data_path)\n    18\t    \n    19\t    # Display loaded information\n    20\t    print(f\&quot;\\nMedDRA Version: {graph.meddra_version}\&quot;)\n    21\t    print(f\&quot;Term Levels: {graph.term_levels}\&quot;)\n    22\t    print(f\&quot;Number of terms loaded: {len(graph.terms)}\&quot;)\n    23\t    print(f\&quot;Schema files: {list(graph.schema.keys())}\&quot;)\n    24\t    \n    25\t    # Show some sample terms\n    26\t    print(\&quot;\\nSample terms loaded:\&quot;)\n    27\t    for i, (term_id, term_data) in enumerate(graph.terms.items()):\n    28\t        if i &gt;= 5:  # Show only first 5 terms\n    29\t            break\n    30\t        print(f\&quot;  {term_id}: {term_data}\&quot;)\n    31\t    \n    32\t    print(\&quot;\\nDummy data loading completed successfully!\&quot;)\n    33\t\n    34\tif __name__ == \&quot;__main__\&quot;:\n    35\t    main()\n...\nPath: src/meddra_graph/tests/test_meddra_loader.py\n     1\tfrom pathlib import Path\n     2\t\n     3\timport pandas as pd\n     4\timport pytest\n     5\t\n     6\tfrom meddra_graph.meddra_loader import MedDRALoader, MedDRAData\n...\n    34\t\n    35\tNUMBER_OF_TEST_TERMS = len(TEST_TERMS)\n    36\tNUMBER_OF_TEST_EDGES = 19\n    37\t\n    38\t\n    39\tdef _generate_test_ids() -&gt; list[str]:\n    40\t    \&quot;\&quot;\&quot;Generate test IDs like soc1, soc2, hlgt1, hlgt2, etc.\&quot;\&quot;\&quot;\n    41\t    term_counts: dict[str, int] = {}\n    42\t    ids: list[str] = []\n    43\t    for term_level, _, _ in TEST_TERMS:\n    44\t        term_counts[term_level] = term_counts.get(term_level, 0) + 1\n    45\t        ids.append(f\&quot;{term_level}{term_counts[term_level]}\&quot;)\n    46\t    return ids\n    47\t\n    48\t\n    49\t@pytest.fixture(name=\&quot;meddra_data\&quot;)\n    50\tdef meddra_data_fixture() -&gt; MedDRAData:\n    51\t    return MedDRALoader.load(Path(__file__).parent / \&quot;test_data\&quot;)\n    52\t\n    53\t\n    54\tdef test_loading_passes() -&gt; None:\n    55\t    MedDRALoader.load(Path(__file__).parent / \&quot;test_data\&quot;)\n    56\t\n    57\t\n    58\tdef test_version_loaded(meddra_data: MedDRAData) -&gt; None:\n    59\t    assert meddra_data.version == \&quot;99.0 TestLang Dummy Data Release\&quot;\n    60\t\n    61\t\n    62\tdef test_term_levels_loaded(meddra_data: MedDRAData) -&gt; None:\n    63\t    df = pd.DataFrame.from_records(list(meddra_data.terms.values()))\n    64\t    assert len(df[\&quot;term_type\&quot;].unique()) == 5\n    65\t    assert set(df[\&quot;term_type\&quot;].unique()) == {\&quot;soc\&quot;, \&quot;hlgt\&quot;, \&quot;hlt\&quot;, \&quot;pt\&quot;, \&quot;llt\&quot;}\n    66\t\n    67\t\n    68\tdef test_schema_levels_loaded(meddra_data: MedDRAData) -&gt; None:\n    69\t    assert len(meddra_data.schema) == 12\n    70\t    assert all(fn in meddra_data.schema for fn in [\&quot;soc.asc\&quot;, \&quot;hlgt.asc\&quot;, \&quot;hlt.asc\&quot;, \&quot;pt.asc\&quot;, \&quot;llt.asc\&quot;])\n    71\t\n    72\t\n    73\tdef test_edges_loaded(meddra_data: MedDRAData) -&gt; None:\n    74\t    assert len(meddra_data.edges) == NUMBER_OF_TEST_EDGES\n    75\t\n    76\t\n    77\tdef test_terms_loaded(meddra_data: MedDRAData) -&gt; None:\n    78\t    assert len(meddra_data.terms) == NUMBER_OF_TEST_TERMS\n    79\t\n    80\t\n    81\tdef test_graph_nodes_loaded(meddra_data: MedDRAData) -&gt; None:\n    82\t    assert len(meddra_data.to_graph().nodes) == NUMBER_OF_TEST_TERMS\n    83\t\n    84\t\n    85\tdef test_graph_edges_loaded(meddra_data: MedDRAData) -&gt; None:\n    86\t    assert len(meddra_data.to_graph().edges) == NUMBER_OF_TEST_EDGES\n    87\t\n    88\t\n    89\tdef test_term_definitions_correct(meddra_data: MedDRAData) -&gt; None:\n    90\t    \&quot;\&quot;\&quot;Test that each term has the correct definition/name in the loaded data.\&quot;\&quot;\&quot;\n    91\t    g = meddra_data.to_graph()\n    92\t    for term_type, term_code, expected_name in TEST_TERMS:\n    93\t        assert g.nodes[term_code][f\&quot;{term_type}_code\&quot;] == term_code\n    94\t        assert g.nodes[term_code][f\&quot;{term_type}_name\&quot;] == expected_name\n    95\t        assert g.nodes[term_code][\&quot;term_type\&quot;] == term_type\n...\nPath: src/meddra_graph/tests/test_data/README.md\n     1\t# MedDRA Test Data\n     2\t\n     3\tThis directory contains dummy test data files for testing the MedDRADiGraph loading functionality.\n     4\t\n     5\t## Important Note\n     6\t\n     7\t**All data in these files is completely anonymized and fake.** This includes:\n     8\t- Lorem Ipsum text for all term names and descriptions\n     9\t- Anonymized codes (e.g., ABC, DEF, PQR instead of real abbreviations)\n    10\t- Fake version numbers (99.0 instead of real MedDRA versions)\n    11\t- Generic ICD codes (X00-X99, Y00-Y99, Z00-Z99 instead of real medical codes)\n    12\t- Anonymized reference codes for all external coding systems\n    13\t\n    14\tThis ensures no real MedDRA data is stored in this repository, which is important for licensing compliance.\n    15\t\n    16\t## Data Format\n    17\t\n    18\tAll files use the MedDRA standard format (version 28.0):\n    19\t- Fields are delimited by `$` characters\n    20\t- Each line represents one record\n    21\t- Field structure follows the schema defined in `src/meddra_loader/resources/meddra_schema_v28.json`\n    22\t\n...\nPath: src/meddra_graph/resources/meddra_schema_v28.json\n     1\t{\n     2\t  \&quot;term_types\&quot;: [\n     3\t    \&quot;llt\&quot;,\n     4\t    \&quot;pt\&quot;,\n     5\t    \&quot;hlt\&quot;,\n     6\t    \&quot;hlgt\&quot;,\n     7\t    \&quot;soc\&quot;\n     8\t  ],\n     9\t  \&quot;fields\&quot;: {\n    10\t    \&quot;llt.asc\&quot;: {\n    11\t      \&quot;llt_code\&quot;: \&quot;int\&quot;,\n    12\t      \&quot;llt_name\&quot;: \&quot;str\&quot;,\n    13\t      \&quot;pt_code\&quot;: \&quot;int\&quot;,\n    14\t      \&quot;llt_whoart_code\&quot;: \&quot;str\&quot;,\n    15\t      \&quot;llt_harts_code\&quot;: \&quot;int\&quot;,\n    16\t      \&quot;llt_costart_sym\&quot;: \&quot;str\&quot;,\n    17\t      \&quot;llt_icd9_code\&quot;: \&quot;str\&quot;,\n    18\t      \&quot;llt_icd9cm_code\&quot;: \&quot;str\&quot;,\n    19\t      \&quot;llt_icd10_code\&quot;: \&quot;str\&quot;,\n    20\t      \&quot;llt_currency\&quot;: \&quot;str\&quot;,\n    21\t      \&quot;llt_jart_code\&quot;: \&quot;str\&quot;\n    22\t    },\n    23\t    \&quot;pt.asc\&quot;: {\n    24\t      \&quot;pt_code\&quot;: \&quot;int\&quot;,\n    25\t      \&quot;pt_name\&quot;: \&quot;str\&quot;,\n    26\t      \&quot;pt_soc_code\&quot;: \&quot;int\&quot;,\n    27\t      \&quot;pt_whoart_code\&quot;: \&quot;str\&quot;,\n    28\t      \&quot;pt_harts_code\&quot;: \&quot;int\&quot;,\n    29\t      \&quot;pt_costart_sym\&quot;: \&quot;str\&quot;,\n    30\t      \&quot;pt_icd9_code\&quot;: \&quot;str\&quot;,\n    31\t      \&quot;pt_icd9cm_code\&quot;: \&quot;str\&quot;,\n    32\t      \&quot;pt_icd10_code\&quot;: \&quot;str\&quot;,\n    33\t      \&quot;pt_jart_code\&quot;: \&quot;str\&quot;\n    34\t    },\n    35\t    \&quot;hlt.asc\&quot;: {\n    36\t      \&quot;hlt_code\&quot;: \&quot;int\&quot;,\n    37\t      \&quot;hlt_name\&quot;: \&quot;str\&quot;,\n    38\t      \&quot;hlt_whoart_code\&quot;: \&quot;str\&quot;,\n    39\t      \&quot;hlt_harts_code\&quot;: \&quot;int\&quot;,\n    40\t      \&quot;hlt_costart_sym\&quot;: \&quot;str\&quot;,\n    41\t      \&quot;hlt_icd9_code\&quot;: \&quot;str\&quot;,\n    42\t      \&quot;hlt_icd9cm_code\&quot;: \&quot;str\&quot;,\n    43\t      \&quot;hlt_icd10_code\&quot;: \&quot;str\&quot;,\n    44\t      \&quot;hlt_jart_code\&quot;: \&quot;str\&quot;\n    45\t    },\n    46\t    \&quot;hlt_pt.asc\&quot;: {\n    47\t      \&quot;hlt_code\&quot;: \&quot;int\&quot;,\n    48\t      \&quot;pt_code\&quot;: \&quot;int\&quot;\n    49\t    },\n    50\t    \&quot;hlgt.asc\&quot;: {\n    51\t      \&quot;hlgt_code\&quot;: \&quot;int\&quot;,\n    52\t      \&quot;hlgt_name\&quot;: \&quot;str\&quot;,\n    53\t      \&quot;hlgt_whoart_code\&quot;: \&quot;str\&quot;,\n    54\t      \&quot;hlgt_harts_code\&quot;: \&quot;int\&quot;,\n    55\t      \&quot;hlgt_costart_sym\&quot;: \&quot;str\&quot;,\n    56\t      \&quot;hlgt_icd9_code\&quot;: \&quot;str\&quot;,\n    57\t      \&quot;hlgt_icd9cm_code\&quot;: \&quot;str\&quot;,\n    58\t      \&quot;hlgt_icd10_code\&quot;: \&quot;str\&quot;,\n    59\t      \&quot;hlgt_jart_code\&quot;: \&quot;str\&quot;\n    60\t    },\n    61\t    \&quot;higt_hlt.asc\&quot;: {\n    62\t      \&quot;hlgt_code\&quot;: \&quot;int\&quot;,\n    63\t      \&quot;hlt_code\&quot;: \&quot;int\&quot;\n    64\t    },\n    65\t    \&quot;soc.asc\&quot;: {\n    66\t      \&quot;soc_code\&quot;: \&quot;int\&quot;,\n    67\t      \&quot;soc_name\&quot;: \&quot;str\&quot;,\n    68\t      \&quot;soc_abbrev\&quot;: \&quot;str\&quot;,\n    69\t      \&quot;soc_whoart_code\&quot;: \&quot;str\&quot;,\n    70\t      \&quot;soc_harts_code\&quot;: \&quot;int\&quot;,\n    71\t      \&quot;soc_costart_sym\&quot;: \&quot;str\&quot;,\n    72\t      \&quot;soc_icd9_code\&quot;: \&quot;str\&quot;,\n    73\t      \&quot;soc_icd9cm_code\&quot;: \&quot;str\&quot;,\n    74\t      \&quot;soc_icd10_code\&quot;: \&quot;str\&quot;,\n    75\t      \&quot;soc_jart_code\&quot;: \&quot;str\&quot;\n    76\t    },\n    77\t    \&quot;soc_higt.asc\&quot;: {\n    78\t      \&quot;soc_code\&quot;: \&quot;int\&quot;,\n    79\t      \&quot;hlgt_code\&quot;: \&quot;int\&quot;\n    80\t    },\n    81\t    \&quot;mdhier.asc\&quot;: {\n    82\t      \&quot;pt_code\&quot;: \&quot;int\&quot;,\n    83\t      \&quot;hlt_code\&quot;: \&quot;int\&quot;,\n    84\t      \&quot;hlgt_code\&quot;: \&quot;int\&quot;,\n    85\t      \&quot;soc_code\&quot;: \&quot;int\&quot;,\n    86\t      \&quot;pt_name\&quot;: \&quot;str\&quot;,\n    87\t      \&quot;hlt_name\&quot;: \&quot;str\&quot;,\n    88\t      \&quot;hlgt_name\&quot;: \&quot;str\&quot;,\n    89\t      \&quot;soc_name\&quot;: \&quot;str\&quot;,\n    90\t      \&quot;soc_abbrev\&quot;: \&quot;str\&quot;,\n    91\t      \&quot;null_field\&quot;: \&quot;str\&quot;,\n    92\t      \&quot;pt_soc_code\&quot;: \&quot;int\&quot;,\n    93\t      \&quot;primary_soc_fg\&quot;: \&quot;str\&quot;\n    94\t    },\n    95\t    \&quot;intl_ord.asc\&quot;: {\n    96\t      \&quot;intl_ord_code\&quot;: \&quot;int\&quot;,\n    97\t      \&quot;soc_code\&quot;: \&quot;int\&quot;\n    98\t    },\n    99\t    \&quot;smq_list.asc\&quot;: {\n   100\t      \&quot;smq_code\&quot;: \&quot;int\&quot;,\n   101\t      \&quot;smq_name\&quot;: \&quot;str\&quot;,\n   102\t      \&quot;smq_level\&quot;: \&quot;int\&quot;,\n   103\t      \&quot;smq_description\&quot;: \&quot;str\&quot;,\n   104\t      \&quot;smq_source\&quot;: \&quot;str\&quot;,\n   105\t      \&quot;smq_note\&quot;: \&quot;str\&quot;,\n   106\t      \&quot;MedDRA_version\&quot;: \&quot;str\&quot;,\n   107\t      \&quot;status\&quot;: \&quot;str\&quot;,\n   108\t      \&quot;smq_algorithm\&quot;: \&quot;str\&quot;\n   109\t    },\n   110\t    \&quot;smq_content.asc\&quot;: {\n   111\t      \&quot;smq_code\&quot;: \&quot;int\&quot;,\n   112\t      \&quot;term_code\&quot;: \&quot;int\&quot;,\n   113\t      \&quot;term_level\&quot;: \&quot;int\&quot;,\n   114\t      \&quot;term_scope\&quot;: \&quot;int\&quot;,\n   115\t      \&quot;term_category\&quot;: \&quot;str\&quot;,\n   116\t      \&quot;term_weight\&quot;: \&quot;int\&quot;,\n   117\t      \&quot;term_status\&quot;: \&quot;str\&quot;,\n   118\t      \&quot;term_addition_version\&quot;: \&quot;str\&quot;,\n   119\t      \&quot;term_last_modified_version\&quot;: \&quot;str\&quot;\n   120\t    }\n   121\t  }\n   122\t}...\nPath: src/sprint/models/weights/run-20241010T111217/wandb-metadata.json\n     1\t{\n     2\t    \&quot;os\&quot;: \&quot;Linux-5.15.0-89-generic-x86_64-with-glibc2.35\&quot;,\n     3\t    \&quot;python\&quot;: \&quot;3.12.2\&quot;,\n     4\t    \&quot;heartbeatAt\&quot;: \&quot;2024-10-10T11:12:19.061092\&quot;,\n     5\t    \&quot;startedAt\&quot;: \&quot;2024-10-10T11:12:18.533126\&quot;,\n     6\t    \&quot;docker\&quot;: null,\n     7\t    \&quot;cuda\&quot;: null,\n     8\t    \&quot;args\&quot;: [],\n     9\t    \&quot;state\&quot;: \&quot;running\&quot;,\n    10\t    \&quot;program\&quot;: \&quot;/home/amotta/projects/sprint/train-token-based-abstract-classifier.py\&quot;,\n    11\t    \&quot;codePathLocal\&quot;: \&quot;train-token-based-abstract-classifier.py\&quot;,\n    12\t    \&quot;codePath\&quot;: \&quot;train-token-based-abstract-classifier.py\&quot;,\n    13\t    \&quot;git\&quot;: {\n    14\t        \&quot;remote\&quot;: \&quot;git@gitlab.switch.ch:hslu/research/abiz/sprint.git\&quot;,\n    15\t        \&quot;commit\&quot;: \&quot;7658016a96ae0dcb503f2256fc643e78f4dfcb3e\&quot;\n    16\t    },\n...\nPath: src/sprint/data_utils.py\n...\n    84\t\n    85\t        dir_embeddings = None\n    86\t        if load_embeddings is not None:\n    87\t            # TODO(amotta): Allow use to specify which embeddings to load\n    88\t            dir_embeddings_file_path = dir_path / 'embeddings.npz'\n    89\t            dir_embeddings = dict(np.load(\n    90\t                dir_embeddings_file_path,\n    91\t                allow_pickle=True,\n    92\t            ))\n    93\t\n    94\t            assert all(\n    95\t                len(v) == len(dir_abstracts)\n    96\t                for v in dir_embeddings.values()\n    97\t            )\n    98\t\n    99\t        abstracts[dir] = dir_abstracts[fields]\n   100\t        embeddings[dir] = dir_embeddings\n   101\t\n   102\t    abstracts = pd.concat(abstracts, names=['dir', 'nr'])\n   103\t\n   104\t    if load_embeddings:\n   105\t        embedding_keys = [e.keys() for e in embeddings.values()]\n   106\t        assert all(e == embedding_keys[0] for e in embedding_keys)\n   107\t        embedding_keys = embedding_keys[0]\n   108\t\n   109\t        embeddings = {\n   110\t            key: np.concatenate(tuple(\n   111\t                embeddings[dir][key]\n   112\t                for dir in DIRS\n   113\t            ))\n   114\t            for key in embedding_keys\n   115\t        }\n   116\t\n   117\t    foreign_language_mask = abstracts.apply(is_in_foreign_language, axis='columns')\n   118\t    mask = (abstracts['split'] == split) &amp; ~foreign_language_mask\n   119\t    abstracts = abstracts.loc[mask]\n   120\t\n   121\t    if load_embeddings:\n   122\t        embeddings = {\n   123\t            key: value[mask]\n   124\t            for key, value in embeddings.items()\n   125\t        }\n   126\t\n   127\t        assert all(\n   128\t            len(v) == len(abstracts)\n   129\t            for v in embeddings.values()\n   130\t        )\n   131\t\n   132\t    ret = (abstracts,)\n   133\t    if load_embeddings:\n   134\t        ret += (embeddings,)\n   135\t\n   136\t    return ret\n   137\t\n   138\t\n   139\tdef _to_confusion_matrix_label(*, true, pred) -&gt; str:\n   140\t    if true == True and pred == True: return 'TP'\n   141\t    if true == True and pred == False: return 'FN'\n   142\t    if true == False and pred == True: return 'FP'\n   143\t    if true == False and pred == False: return 'TN'\n   144\t    assert False, f\&quot;{true=}, {pred=}\&quot;\n   145\t\n   146\t\n   147\tdef aes_to_export(*, study, aes, ctcae) -&gt; dict[str, str]:\n   148\t    # Normalize AE names\n   149\t    aes_norm = list(map(str.lower, aes))\n   150\t    ctcae_norm = list(map(str.lower, ctcae['name'].values))\n   151\t\n   152\t    aes_not_in_ctcae = [\n   153\t        ae\n   154\t        for ae, ae_norm in zip(aes, aes_norm)\n   155\t        if ae_norm not in ctcae_norm\n   156\t    ]\n   157\t\n   158\t    ctcae_in_aes = [ae in aes_norm for ae in ctcae_norm]\n   159\t    ctcae_in_aes.append(len(aes_not_in_ctcae) &gt; 0)\n   160\t    preds = np.asarray(ctcae_in_aes, dtype=bool)\n   161\t\n   162\t    trues = np.zeros(len(ctcae) + 1, dtype=bool)\n   163\t    # NOTE(amotta): The `ctcae_indices` contains -1 if the ground truth\n   164\t    # contains AEs not in CTCAE.\n   165\t    trues[study['ctcae_indices']] = True\n   166\t\n   167\t    assert preds.shape == trues.shape\n   168\t\n   169\t    ctcae_labels = [\n   170\t        _to_confusion_matrix_label(true=true, pred=pred)\n   171\t        for true, pred in zip(trues, preds)\n   172\t    ]\n...\nPath: src/meddra_graph/tests/test_data/soc.asc\n     1\t10001000$Lorem ipsum dolor sit amet$Lorem$ABC$20001000$ABC$ABC$X00-X99$X00-X99$ABC\n     2\t10002000$Consectetur adipiscing elit$Consectetur$DEF$20002000$DEF$DEF$Y00-Y99$Y00-Y99$DEF\n     3\t10003000$Sed do eiusmod tempor incididunt$Sed$GHI$20003000$GHI$GHI$Z00-Z99$Z00-Z99$GHI\n     4\t10004000$Ut labore et dolore magna aliqua$Ut$JKL$20004000$JKL$JKL$W00-W99$W00-W99$JKL\n     5\t10005000$Enim ad minim veniam quis$Enim$MNO$20005000$MNO$MNO$V00-V99$V00-V99$MNO\n...\nPath: src/sprint/entrypoints/ctcae_detection.py\n...\n    16\t\n    17\t\n    18\tdef load_ctcae(file_path):\n    19\t    ctcae = pd.read_excel(file_path)\n    20\t\n    21\t    # Strip spaces (empty definitions are ' -' by default)\n    22\t    ctcae['Definition'] = ctcae['Definition'].map(str.strip)\n    23\t    # Remove entries without definition\n    24\t    ctcae = ctcae.loc[ctcae['Definition'] != '-']\n    25\t\n    26\t    # Build categorical 'class' column from 'MedDRA SOC'\n    27\t    ctcae['Class'] = ctcae['MedDRA SOC'].map(str.lower).astype('category')\n    28\t    classes = ctcae['Class'].cat.categories\n    29\t\n    30\t    # Clean up output table\n    31\t    ctcae = ctcae[['CTCAE Term', 'Definition', 'Class']]\n    32\t    return ctcae\n...\nPath: src/sprint/entrypoints/train-token-based-abstract-classifier.py\n...\n    78\t\n    79\t\n    80\t# NOTE(amotta): Copy-paste from train-abstract-classifier.py\n    81\tdef load_data(*, split):\n    82\t    abstracts, embeddings = load_data_split(str(data_path / \&quot;manual-abstract-screening\&quot;),\n    83\t        split=split, load_embeddings=True,\n    84\t    )\n    85\t\n    86\t    # NOTE(amotta): For backward compatibility\n    87\t    for key in embeddings.keys():\n    88\t        if key == 'embedding': continue\n    89\t        assert key not in abstracts.columns\n    90\t        abstracts[key] = embeddings[key]\n    91\t    del embeddings\n    92\t\n    93\t    # NOTE(amotta): See preprocess_data in train-abstract-classifier.py\n    94\t    mask = ~abstracts['duplicate'].values\n    95\t    _, max_token_count = ABSTRACTS_TOKEN_RANGE\n    96\t    mas...&quot;,&quot;is_error&quot;:false,&quot;request_id&quot;:&quot;&quot;,&quot;tool_use_id&quot;:&quot;toolu_vrtx_01J2fTE7m5gqneuY9SeWUNMz&quot;}},{&quot;id&quot;:2,&quot;type&quot;:4,&quot;ide_state_node&quot;:{&quot;workspaceFolders&quot;:[{&quot;repositoryRoot&quot;:&quot;/Users/tcwullsc/Devel/AAI/SPRINT/modules/meddra-loader&quot;,&quot;folderRoot&quot;:&quot;/Users/tcwullsc/Devel/AAI/SPRINT/modules/meddra-loader&quot;}],&quot;workspaceFoldersUnchanged&quot;:false}}],&quot;timestamp&quot;:&quot;2025-06-25T09:20:10.255Z&quot;,&quot;response_text&quot;:&quot;Now I can see the issue! Looking at the code, I notice there's a bug in the `MedDRAData.to_graph()` method. Let me examine it more closely:\n&quot;,&quot;workspace_file_chunks&quot;:[]},{&quot;status&quot;:&quot;success&quot;,&quot;request_id&quot;:&quot;23b84395-92d6-42bf-a466-ad687b736954&quot;,&quot;request_message&quot;:&quot;&quot;,&quot;structured_output_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:5,&quot;content&quot;:&quot;&quot;,&quot;tool_use&quot;:{&quot;tool_use_id&quot;:&quot;toolu_vrtx_01GbdKxUNTnFqei8JdQDTfEn&quot;,&quot;tool_name&quot;:&quot;view&quot;,&quot;input_json&quot;:&quot;{\&quot;path\&quot;: \&quot;src/meddra_graph/tests/test_data\&quot;, \&quot;type\&quot;: \&quot;directory\&quot;}&quot;,&quot;mcp_server_name&quot;:&quot;&quot;,&quot;mcp_tool_name&quot;:&quot;&quot;}},{&quot;id&quot;:0,&quot;type&quot;:0,&quot;content&quot;:&quot;I found the issue! The problem is in the `to_graph()` method on line 18-23. The method is calling `g.add_edges_from(self.edges)` **after** `g.add_nodes_from(self.terms.keys())`, but NetworkX automatically creates nodes when you add edges that reference nodes that don't exist yet.\n\nWhen you add edges with `g.add_edges_from(self.edges)`, if the edge references nodes that aren't in `self.terms.keys()`, NetworkX will automatically create those nodes with default attributes. This is likely what's creating the nodes with the format `&lt;code1&gt;...&lt;code2&gt;` that you're seeing.\n\nLet me check what edge files exist in the test data to understand this better:\n&quot;},{&quot;id&quot;:2,&quot;type&quot;:2,&quot;content&quot;:&quot;&quot;},{&quot;id&quot;:3,&quot;type&quot;:3,&quot;content&quot;:&quot;&quot;}],&quot;seen_state&quot;:&quot;seen&quot;,&quot;structured_request_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:1,&quot;tool_result_node&quot;:{&quot;content&quot;:&quot;Note:\nView range expanded to meet minimum size of 500 lines. End line adjusted to last line of file (114).\n\nHere's the result of running `cat -n` on src/meddra_graph/meddra_loader.py:\n    18\t    def to_graph(self) -&gt; nx.DiGraph:\n    19\t        g = nx.DiGraph()\n    20\t        g.add_nodes_from(self.terms.keys())\n    21\t        g.add_edges_from(self.edges)\n    22\t        nx.set_node_attributes(g, self.terms)\n    23\t        return g\n    24\t\n    25\t\n    26\t@dataclass\n    27\tclass _MedDRASchema:\n    28\t    fields: dict[str, dict[str, str]]\n    29\t    term_types: set[str]\n    30\t\n    31\t    def __init__(self, schema_path: Union[str, Path]):\n    32\t        with open(schema_path, \&quot;r\&quot;, encoding=\&quot;utf-8\&quot;) as f:\n    33\t            data = cast(dict[str, dict[str, dict[str, str]]], json.load(f))\n    34\t            self.term_types = set(data[\&quot;term_types\&quot;])\n    35\t            self.fields = data[\&quot;fields\&quot;]\n    36\t\n    37\t\n    38\tclass MedDRALoader:\n    39\t\n    40\t    @classmethod\n    41\t    def load(\n    42\t            cls,\n    43\t            meddra_directory_path: Union[str, Path],\n    44\t            schema_path: Union[str, Path] = DEFAULT_SCHEMA_PATH\n    45\t    ) -&gt; MedDRAData:\n    46\t        meddra_directory_path = Path(meddra_directory_path)\n    47\t        assert meddra_directory_path.is_dir()\n    48\t\n    49\t        schema = _MedDRASchema(schema_path)\n    50\t        version = \&quot; \&quot;.join(cls._load_file(meddra_directory_path / \&quot;meddra_release.asc\&quot;)[0]).strip()\n    51\t        terms = cls._load_terms(meddra_directory_path, schema)\n    52\t        edges = cls._load_edges(meddra_directory_path, schema)\n    53\t\n    54\t        return MedDRAData(version=version, schema=schema.fields, terms=terms, edges=list(edges))\n    55\t\n    56\t    @classmethod\n    57\t    def _load_terms(cls,\n    58\t                    meddra_directory_path: Path,\n    59\t                    schema: _MedDRASchema,\n    60\t                    ) -&gt; dict[str, dict[str, Any]]:\n    61\t        terms = {}\n    62\t        for file_path in meddra_directory_path.glob(\&quot;*.asc\&quot;):\n    63\t            if cls._is_term_file(file_path, schema):\n    64\t                data = cls._load_file(file_path)\n    65\t                file_name = file_path.name\n    66\t                term_type = file_name.split(\&quot;.\&quot;)[0]\n    67\t\n    68\t                for row in data:\n    69\t                    if len(row) &lt; len(schema.fields[file_name]):\n    70\t                        raise ValueError(f\&quot;Invalid number of fields in {file_path}\&quot;)\n    71\t\n    72\t                    term_dict = dict(zip(schema.fields[file_name].keys(), row))\n    73\t                    term_dict[\&quot;term_type\&quot;] = term_type\n    74\t\n    75\t                    first_field = list(schema.fields[file_name].keys())[0]\n    76\t                    term_key = term_dict[first_field]\n    77\t                    terms[term_key] = term_dict\n    78\t\n    79\t        return terms\n    80\t\n    81\t    @classmethod\n    82\t    def _load_edges(cls, meddra_directory_path: Path, schema: _MedDRASchema) -&gt; set[tuple[str, str]]:\n    83\t        edges: set[tuple[str, str]] = set()\n    84\t        for file_path in meddra_directory_path.glob(\&quot;*.asc\&quot;):\n    85\t            if cls._is_edge_file(file_path, schema):\n    86\t                edges.update(cast(set[tuple[str, str]], cls._load_file(file_path)))\n    87\t        return edges\n    88\t\n    89\t    @staticmethod\n    90\t    def _is_term_file(file_path: Path, schema: _MedDRASchema) -&gt; bool:\n    91\t        return file_path.name.split(\&quot;.\&quot;)[0] in schema.term_types\n    92\t\n    93\t    @staticmethod\n    94\t    def _is_edge_file(file_path: Path, schema: _MedDRASchema) -&gt; bool:\n    95\t        if not \&quot;_\&quot; in file_path.name:\n    96\t            return False\n    97\t        try:\n    98\t            t0, t1 = file_path.name.split(\&quot;.\&quot;)[0].split(\&quot;_\&quot;)\n    99\t            return t0 in schema.term_types and t1 in schema.term_types\n   100\t        except (ValueError, IndexError):\n   101\t            return False\n   102\t\n   103\t    @classmethod\n   104\t    def _load_file(cls, file_path: Path) -&gt; list[tuple[str, ...]]:\n   105\t        lines = []\n   106\t        with open(file_path, \&quot;r\&quot;, encoding=\&quot;utf-8\&quot;) as f:\n   107\t            for line in f:\n   108\t                lines.append(cls._load_line(line))\n   109\t        return lines\n   110\t\n   111\t    @classmethod\n   112\t    def _load_line(cls, line: str) -&gt; tuple[str, ...]:\n   113\t        return tuple(line.strip().split(\&quot;$\&quot;))\n   114\t\nTotal lines in file: 114\n&quot;,&quot;is_error&quot;:false,&quot;request_id&quot;:&quot;&quot;,&quot;tool_use_id&quot;:&quot;toolu_vrtx_01P2WFvZyTfF71WTABVMLGPo&quot;}},{&quot;id&quot;:2,&quot;type&quot;:4,&quot;ide_state_node&quot;:{&quot;workspaceFolders&quot;:[{&quot;repositoryRoot&quot;:&quot;/Users/tcwullsc/Devel/AAI/SPRINT/modules/meddra-loader&quot;,&quot;folderRoot&quot;:&quot;/Users/tcwullsc/Devel/AAI/SPRINT/modules/meddra-loader&quot;}],&quot;workspaceFoldersUnchanged&quot;:false}}],&quot;timestamp&quot;:&quot;2025-06-25T09:20:34.728Z&quot;,&quot;response_text&quot;:&quot;I found the issue! The problem is in the `to_graph()` method on line 18-23. The method is calling `g.add_edges_from(self.edges)` **after** `g.add_nodes_from(self.terms.keys())`, but NetworkX automatically creates nodes when you add edges that reference nodes that don't exist yet.\n\nWhen you add edges with `g.add_edges_from(self.edges)`, if the edge references nodes that aren't in `self.terms.keys()`, NetworkX will automatically create those nodes with default attributes. This is likely what's creating the nodes with the format `&lt;code1&gt;...&lt;code2&gt;` that you're seeing.\n\nLet me check what edge files exist in the test data to understand this better:\n&quot;,&quot;workspace_file_chunks&quot;:[]},{&quot;status&quot;:&quot;success&quot;,&quot;request_id&quot;:&quot;0630a3a6-bd84-48db-85bb-d506427cc7ae&quot;,&quot;request_message&quot;:&quot;&quot;,&quot;structured_output_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:5,&quot;content&quot;:&quot;&quot;,&quot;tool_use&quot;:{&quot;tool_use_id&quot;:&quot;toolu_vrtx_019R8yuMGvxWT92Jy1MDfkip&quot;,&quot;tool_name&quot;:&quot;view&quot;,&quot;input_json&quot;:&quot;{\&quot;path\&quot;: \&quot;src/meddra_graph/tests/test_data/hlgt_hlt.asc\&quot;, \&quot;type\&quot;: \&quot;file\&quot;}&quot;,&quot;mcp_server_name&quot;:&quot;&quot;,&quot;mcp_tool_name&quot;:&quot;&quot;}},{&quot;id&quot;:0,&quot;type&quot;:0,&quot;content&quot;:&quot;Let me check one of the edge files to see what format the edges are in:\n&quot;},{&quot;id&quot;:2,&quot;type&quot;:2,&quot;content&quot;:&quot;&quot;},{&quot;id&quot;:3,&quot;type&quot;:3,&quot;content&quot;:&quot;&quot;}],&quot;seen_state&quot;:&quot;seen&quot;,&quot;structured_request_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:1,&quot;tool_result_node&quot;:{&quot;content&quot;:&quot;Here's the files and directories up to 2 levels deep in src/meddra_graph/tests/test_data, excluding hidden items:\nsrc/meddra_graph/tests/test_data/README.md\nsrc/meddra_graph/tests/test_data/hlgt.asc\nsrc/meddra_graph/tests/test_data/hlgt_hlt.asc\nsrc/meddra_graph/tests/test_data/hlt.asc\nsrc/meddra_graph/tests/test_data/hlt_pt.asc\nsrc/meddra_graph/tests/test_data/intl_ord.asc\nsrc/meddra_graph/tests/test_data/llt.asc\nsrc/meddra_graph/tests/test_data/mdhier.asc\nsrc/meddra_graph/tests/test_data/meddra_release.asc\nsrc/meddra_graph/tests/test_data/pt.asc\nsrc/meddra_graph/tests/test_data/smq_content.asc\nsrc/meddra_graph/tests/test_data/smq_list.asc\nsrc/meddra_graph/tests/test_data/soc.asc\nsrc/meddra_graph/tests/test_data/soc_hlgt.asc\n&quot;,&quot;is_error&quot;:false,&quot;request_id&quot;:&quot;&quot;,&quot;tool_use_id&quot;:&quot;toolu_vrtx_01GbdKxUNTnFqei8JdQDTfEn&quot;}},{&quot;id&quot;:2,&quot;type&quot;:4,&quot;ide_state_node&quot;:{&quot;workspaceFolders&quot;:[{&quot;repositoryRoot&quot;:&quot;/Users/tcwullsc/Devel/AAI/SPRINT/modules/meddra-loader&quot;,&quot;folderRoot&quot;:&quot;/Users/tcwullsc/Devel/AAI/SPRINT/modules/meddra-loader&quot;}],&quot;workspaceFoldersUnchanged&quot;:false}}],&quot;timestamp&quot;:&quot;2025-06-25T09:20:43.560Z&quot;,&quot;response_text&quot;:&quot;Let me check one of the edge files to see what format the edges are in:\n&quot;,&quot;workspace_file_chunks&quot;:[]},{&quot;status&quot;:&quot;success&quot;,&quot;request_id&quot;:&quot;c89e1a34-fd83-4ccb-8dcb-e6afdd88ecb9&quot;,&quot;request_message&quot;:&quot;&quot;,&quot;structured_output_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:5,&quot;content&quot;:&quot;&quot;,&quot;tool_use&quot;:{&quot;tool_use_id&quot;:&quot;toolu_vrtx_01KznpRzxMEYBYdmZbKrunjH&quot;,&quot;tool_name&quot;:&quot;view&quot;,&quot;input_json&quot;:&quot;{\&quot;path\&quot;: \&quot;src/meddra_graph/tests/test_data/soc_hlgt.asc\&quot;, \&quot;type\&quot;: \&quot;file\&quot;}&quot;,&quot;mcp_server_name&quot;:&quot;&quot;,&quot;mcp_tool_name&quot;:&quot;&quot;}},{&quot;id&quot;:0,&quot;type&quot;:0,&quot;content&quot;:&quot;&quot;},{&quot;id&quot;:2,&quot;type&quot;:2,&quot;content&quot;:&quot;&quot;},{&quot;id&quot;:3,&quot;type&quot;:3,&quot;content&quot;:&quot;&quot;}],&quot;seen_state&quot;:&quot;seen&quot;,&quot;structured_request_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:1,&quot;tool_result_node&quot;:{&quot;content&quot;:&quot;Here's the result of running `cat -n` on src/meddra_graph/tests/test_data/hlgt_hlt.asc:\n     1\t10001001$10001101\n     2\t10001001$10001102\n     3\t10001002$10001201\n     4\t10002001$10002101\n     5\t10002002$10002102\n     6\t10003001$10002101\n     7\t\nTotal lines in file: 7\n&quot;,&quot;is_error&quot;:false,&quot;request_id&quot;:&quot;&quot;,&quot;tool_use_id&quot;:&quot;toolu_vrtx_019R8yuMGvxWT92Jy1MDfkip&quot;}},{&quot;id&quot;:2,&quot;type&quot;:4,&quot;ide_state_node&quot;:{&quot;workspaceFolders&quot;:[{&quot;repositoryRoot&quot;:&quot;/Users/tcwullsc/Devel/AAI/SPRINT/modules/meddra-loader&quot;,&quot;folderRoot&quot;:&quot;/Users/tcwullsc/Devel/AAI/SPRINT/modules/meddra-loader&quot;}],&quot;workspaceFoldersUnchanged&quot;:false}}],&quot;timestamp&quot;:&quot;2025-06-25T09:20:48.479Z&quot;,&quot;response_text&quot;:&quot;&quot;,&quot;workspace_file_chunks&quot;:[]},{&quot;status&quot;:&quot;success&quot;,&quot;request_id&quot;:&quot;4acd7689-025b-43aa-84d9-8143a4855d31&quot;,&quot;request_message&quot;:&quot;&quot;,&quot;structured_output_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:5,&quot;content&quot;:&quot;&quot;,&quot;tool_use&quot;:{&quot;tool_use_id&quot;:&quot;toolu_vrtx_01ATjPrAdN2etBeaTNAEnFM1&quot;,&quot;tool_name&quot;:&quot;launch-process&quot;,&quot;input_json&quot;:&quot;{\&quot;command\&quot;: \&quot;cd /Users/tcwullsc/Devel/AAI/SPRINT/modules/meddra-loader &amp;&amp; python3 -c \\\&quot;\\nfrom src.meddra_graph.meddra_loader import MedDRALoader\\nfrom pathlib import Path\\n\\n# Load the test data\\ndata = MedDRALoader.load(Path('src/meddra_graph/tests/test_data'))\\n\\n# Check the edges\\nprint('Sample edges:')\\nfor i, edge in enumerate(data.edges[:10]):\\n    print(f'  {i}: {edge} (type: {type(edge)}, len: {len(edge)})')\\n\\n# Create the graph and check nodes\\ngraph = data.to_graph()\\nprint(f'\\\\nTotal nodes: {len(graph.nodes)}')\\nprint(f'Total terms: {len(data.terms)}')\\n\\n# Find nodes that aren't in terms\\nextra_nodes = set(graph.nodes) - set(data.terms.keys())\\nif extra_nodes:\\n    print(f'\\\\nExtra nodes not in terms: {len(extra_nodes)}')\\n    for node in list(extra_nodes)[:5]:\\n        print(f'  {repr(node)}')\\n\\\&quot;\&quot;, \&quot;wait\&quot;: true, \&quot;max_wait_seconds\&quot;: 30}&quot;,&quot;mcp_server_name&quot;:&quot;&quot;,&quot;mcp_tool_name&quot;:&quot;&quot;}},{&quot;id&quot;:0,&quot;type&quot;:0,&quot;content&quot;:&quot;Now I understand the issue! The problem is that when the `_load_file` method processes edge files, it's returning tuples with all the fields from each line, but the `_load_edges` method is expecting only tuples of exactly 2 elements (source, target) for the edges.\n\nLooking at the edge files, they contain exactly 2 fields separated by `$`, which should create tuples like `(\&quot;10001001\&quot;, \&quot;10001101\&quot;)`. But if there are any extra fields or malformed lines, you could get tuples with more than 2 elements, and when NetworkX tries to add these as edges, it might create strange node names.\n\nLet me run a test to see what's actually happening:\n&quot;},{&quot;id&quot;:2,&quot;type&quot;:2,&quot;content&quot;:&quot;&quot;},{&quot;id&quot;:3,&quot;type&quot;:3,&quot;content&quot;:&quot;&quot;}],&quot;seen_state&quot;:&quot;seen&quot;,&quot;structured_request_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:1,&quot;tool_result_node&quot;:{&quot;content&quot;:&quot;Here's the result of running `cat -n` on src/meddra_graph/tests/test_data/soc_hlgt.asc:\n     1\t10001000$10001001\n     2\t10001000$10001002\n     3\t10002000$10002001\n     4\t10002000$10002002\n     5\t10003000$10003001\n     6\t\nTotal lines in file: 6\n&quot;,&quot;is_error&quot;:false,&quot;request_id&quot;:&quot;&quot;,&quot;tool_use_id&quot;:&quot;toolu_vrtx_01KznpRzxMEYBYdmZbKrunjH&quot;}},{&quot;id&quot;:2,&quot;type&quot;:4,&quot;ide_state_node&quot;:{&quot;workspaceFolders&quot;:[{&quot;repositoryRoot&quot;:&quot;/Users/tcwullsc/Devel/AAI/SPRINT/modules/meddra-loader&quot;,&quot;folderRoot&quot;:&quot;/Users/tcwullsc/Devel/AAI/SPRINT/modules/meddra-loader&quot;}],&quot;workspaceFoldersUnchanged&quot;:false}}],&quot;timestamp&quot;:&quot;2025-06-25T09:20:53.071Z&quot;,&quot;response_text&quot;:&quot;Now I understand the issue! The problem is that when the `_load_file` method processes edge files, it's returning tuples with all the fields from each line, but the `_load_edges` method is expecting only tuples of exactly 2 elements (source, target) for the edges.\n\nLooking at the edge files, they contain exactly 2 fields separated by `$`, which should create tuples like `(\&quot;10001001\&quot;, \&quot;10001101\&quot;)`. But if there are any extra fields or malformed lines, you could get tuples with more than 2 elements, and when NetworkX tries to add these as edges, it might create strange node names.\n\nLet me run a test to see what's actually happening:\n&quot;,&quot;workspace_file_chunks&quot;:[]},{&quot;status&quot;:&quot;success&quot;,&quot;request_id&quot;:&quot;670651fb-9b27-4bd4-8109-dfa9545ca226&quot;,&quot;request_message&quot;:&quot;&quot;,&quot;structured_output_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:5,&quot;content&quot;:&quot;&quot;,&quot;tool_use&quot;:{&quot;tool_use_id&quot;:&quot;toolu_vrtx_016ZdM4f7BNvfxLs2PDQQ9pq&quot;,&quot;tool_name&quot;:&quot;launch-process&quot;,&quot;input_json&quot;:&quot;{\&quot;command\&quot;: \&quot;grep -r \\\&quot;10002203\\\&quot; src/meddra_graph/tests/test_data/\&quot;, \&quot;wait\&quot;: true, \&quot;max_wait_seconds\&quot;: 10}&quot;,&quot;mcp_server_name&quot;:&quot;&quot;,&quot;mcp_tool_name&quot;:&quot;&quot;}},{&quot;id&quot;:0,&quot;type&quot;:0,&quot;content&quot;:&quot;Perfect! I found the issue. There's an extra node `'10002203'` that exists in the edges but not in the terms. This is exactly what's causing your test to fail.\n\nLet me check which edge file contains this problematic code and see what's happening:\n&quot;},{&quot;id&quot;:2,&quot;type&quot;:2,&quot;content&quot;:&quot;&quot;},{&quot;id&quot;:3,&quot;type&quot;:3,&quot;content&quot;:&quot;&quot;}],&quot;seen_state&quot;:&quot;seen&quot;,&quot;structured_request_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:1,&quot;tool_result_node&quot;:{&quot;content&quot;:&quot;Here are the results from executing the command.\n        &lt;return-code&gt;\n        0\n        &lt;/return-code&gt;\n        &lt;stdout&gt;\n        Sample edges:\n  0: ('10002102', '10002203') (type: &lt;class 'tuple'&gt;, len: 2)\n  1: ('10001102', '10001202') (type: &lt;class 'tuple'&gt;, len: 2)\n  2: ('10003001', '10002101') (type: &lt;class 'tuple'&gt;, len: 2)\n  3: ('10001000', '10001001') (type: &lt;class 'tuple'&gt;, len: 2)\n  4: ('10001000', '10001002') (type: &lt;class 'tuple'&gt;, len: 2)\n  5: ('10002101', '10002202') (type: &lt;class 'tuple'&gt;, len: 2)\n  6: ('10002002', '10002102') (type: &lt;class 'tuple'&gt;, len: 2)\n  7: ('10001201', '10001301') (type: &lt;class 'tuple'&gt;, len: 2)\n  8: ('10001101', '10001202') (type: &lt;class 'tuple'&gt;, len: 2)\n  9: ('10002001', '10002101') (type: &lt;class 'tuple'&gt;, len: 2)\n\nTotal nodes: 26\nTotal terms: 25\n\nExtra nodes not in terms: 1\n  '10002203'\n\n        &lt;/stdout&gt;\n        &lt;stderr&gt;\n        \n        &lt;/stderr&gt;&quot;,&quot;is_error&quot;:false,&quot;request_id&quot;:&quot;&quot;,&quot;tool_use_id&quot;:&quot;toolu_vrtx_01ATjPrAdN2etBeaTNAEnFM1&quot;}},{&quot;id&quot;:2,&quot;type&quot;:4,&quot;ide_state_node&quot;:{&quot;workspaceFolders&quot;:[{&quot;repositoryRoot&quot;:&quot;/Users/tcwullsc/Devel/AAI/SPRINT/modules/meddra-loader&quot;,&quot;folderRoot&quot;:&quot;/Users/tcwullsc/Devel/AAI/SPRINT/modules/meddra-loader&quot;}],&quot;workspaceFoldersUnchanged&quot;:false,&quot;currentTerminal&quot;:{&quot;terminalId&quot;:126,&quot;currentWorkingDirectory&quot;:&quot;/Users/tcwullsc/Devel/AAI/SPRINT/modules/meddra-loader&quot;}}}],&quot;timestamp&quot;:&quot;2025-06-25T09:21:07.496Z&quot;,&quot;response_text&quot;:&quot;Perfect! I found the issue. There's an extra node `'10002203'` that exists in the edges but not in the terms. This is exactly what's causing your test to fail.\n\nLet me check which edge file contains this problematic code and see what's happening:\n&quot;,&quot;workspace_file_chunks&quot;:[]},{&quot;status&quot;:&quot;success&quot;,&quot;request_id&quot;:&quot;b0525bac-d1d8-4cbc-9855-ca530ea3544b&quot;,&quot;request_message&quot;:&quot;&quot;,&quot;structured_output_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:5,&quot;content&quot;:&quot;&quot;,&quot;tool_use&quot;:{&quot;tool_use_id&quot;:&quot;toolu_vrtx_019DvwP22EinWh59bFKrGFXU&quot;,&quot;tool_name&quot;:&quot;view&quot;,&quot;input_json&quot;:&quot;{\&quot;path\&quot;: \&quot;src/meddra_graph/tests/test_data/pt.asc\&quot;, \&quot;type\&quot;: \&quot;file\&quot;}&quot;,&quot;mcp_server_name&quot;:&quot;&quot;,&quot;mcp_tool_name&quot;:&quot;&quot;}},{&quot;id&quot;:0,&quot;type&quot;:0,&quot;content&quot;:&quot;Now I can see the issue! The code `10002203` appears in the edge file `hlt_pt.asc` as `10002102$10002203`, but there's no corresponding term definition for `10002203` in the `pt.asc` file.\n\nLet me check what PT terms are actually defined:\n&quot;},{&quot;id&quot;:2,&quot;type&quot;:2,&quot;content&quot;:&quot;&quot;},{&quot;id&quot;:3,&quot;type&quot;:3,&quot;content&quot;:&quot;&quot;}],&quot;seen_state&quot;:&quot;seen&quot;,&quot;structured_request_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:1,&quot;tool_result_node&quot;:{&quot;content&quot;:&quot;Here are the results from executing the command.\n        &lt;return-code&gt;\n        0\n        &lt;/return-code&gt;\n        &lt;stdout&gt;\n        src/meddra_graph/tests/test_data/mdhier.asc:10002203$10002102$10002002$10002000$Duis aute irure dolor in$Amet consectetur adipiscing elit sed$Dolor in reprehenderit in voluptate$Consectetur adipiscing elit$Consectetur$$10002000$Y\nsrc/meddra_graph/tests/test_data/hlt_pt.asc:10002102$10002203\nsrc/meddra_graph/tests/test_data/smq_content.asc:20000002$10002203$4$2$B$1$A$99.0$99.0\n\n        &lt;/stdout&gt;\n        &lt;stderr&gt;\n        \n        &lt;/stderr&gt;&quot;,&quot;is_error&quot;:false,&quot;request_id&quot;:&quot;&quot;,&quot;tool_use_id&quot;:&quot;toolu_vrtx_016ZdM4f7BNvfxLs2PDQQ9pq&quot;}},{&quot;id&quot;:2,&quot;type&quot;:4,&quot;ide_state_node&quot;:{&quot;workspaceFolders&quot;:[{&quot;repositoryRoot&quot;:&quot;/Users/tcwullsc/Devel/AAI/SPRINT/modules/meddra-loader&quot;,&quot;folderRoot&quot;:&quot;/Users/tcwullsc/Devel/AAI/SPRINT/modules/meddra-loader&quot;}],&quot;workspaceFoldersUnchanged&quot;:false,&quot;currentTerminal&quot;:{&quot;terminalId&quot;:127,&quot;currentWorkingDirectory&quot;:&quot;/Users/tcwullsc/Devel/AAI/SPRINT/modules/meddra-loader&quot;}}}],&quot;timestamp&quot;:&quot;2025-06-25T09:21:13.726Z&quot;,&quot;response_text&quot;:&quot;Now I can see the issue! The code `10002203` appears in the edge file `hlt_pt.asc` as `10002102$10002203`, but there's no corresponding term definition for `10002203` in the `pt.asc` file.\n\nLet me check what PT terms are actually defined:\n&quot;,&quot;workspace_file_chunks&quot;:[]},{&quot;status&quot;:&quot;success&quot;,&quot;request_id&quot;:&quot;3c6dc090-e632-426d-9373-3317b6f55822&quot;,&quot;request_message&quot;:&quot;&quot;,&quot;structured_output_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:5,&quot;content&quot;:&quot;&quot;,&quot;tool_use&quot;:{&quot;tool_use_id&quot;:&quot;toolu_vrtx_016zLMEcJ92XcqHxNqZcKzEz&quot;,&quot;tool_name&quot;:&quot;view&quot;,&quot;input_json&quot;:&quot;{\&quot;path\&quot;: \&quot;src/meddra_graph/tests/test_data/hlt_pt.asc\&quot;, \&quot;type\&quot;: \&quot;file\&quot;}&quot;,&quot;mcp_server_name&quot;:&quot;&quot;,&quot;mcp_tool_name&quot;:&quot;&quot;}},{&quot;id&quot;:0,&quot;type&quot;:0,&quot;content&quot;:&quot;&quot;},{&quot;id&quot;:2,&quot;type&quot;:2,&quot;content&quot;:&quot;&quot;},{&quot;id&quot;:3,&quot;type&quot;:3,&quot;content&quot;:&quot;&quot;}],&quot;seen_state&quot;:&quot;seen&quot;,&quot;structured_request_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:1,&quot;tool_result_node&quot;:{&quot;content&quot;:&quot;Here's the result of running `cat -n` on src/meddra_graph/tests/test_data/pt.asc:\n     1\t10001201$Do eiusmod tempor incididunt ut$$10001000$TUV$50001201$TUV$X40.1$X40.1$TUV\n     2\t10001202$Labore et dolore magna aliqua$$10001000$WXY$50001202$WXY$X40.2$X40.2$WXY\n     3\t10001301$Enim ad minim veniam quis nostrud$$10001000$ZAB$50001301$ZAB$X40.3$X40.3$ZAB\n     4\t10002201$Exercitation ullamco laboris nisi$$10002000$CDE$50002201$CDE$Y40.1$Y40.1$CDE\n     5\t10002202$Ut aliquip ex ea commodo consequat$$10002000$FGH$50002202$FGH$Y40.2$Y40.2$FGH\n     6\t\nTotal lines in file: 6\n&quot;,&quot;is_error&quot;:false,&quot;request_id&quot;:&quot;&quot;,&quot;tool_use_id&quot;:&quot;toolu_vrtx_019DvwP22EinWh59bFKrGFXU&quot;}},{&quot;id&quot;:2,&quot;type&quot;:4,&quot;ide_state_node&quot;:{&quot;workspaceFolders&quot;:[{&quot;repositoryRoot&quot;:&quot;/Users/tcwullsc/Devel/AAI/SPRINT/modules/meddra-loader&quot;,&quot;folderRoot&quot;:&quot;/Users/tcwullsc/Devel/AAI/SPRINT/modules/meddra-loader&quot;}],&quot;workspaceFoldersUnchanged&quot;:false,&quot;currentTerminal&quot;:{&quot;terminalId&quot;:127,&quot;currentWorkingDirectory&quot;:&quot;/Users/tcwullsc/Devel/AAI/SPRINT/modules/meddra-loader&quot;}}}],&quot;timestamp&quot;:&quot;2025-06-25T09:21:19.453Z&quot;,&quot;response_text&quot;:&quot;&quot;,&quot;workspace_file_chunks&quot;:[]},{&quot;status&quot;:&quot;success&quot;,&quot;request_id&quot;:&quot;87fd1dcd-8eae-45b7-99b6-d2e0b724789a&quot;,&quot;request_message&quot;:&quot;&quot;,&quot;structured_output_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:5,&quot;content&quot;:&quot;&quot;,&quot;tool_use&quot;:{&quot;tool_use_id&quot;:&quot;toolu_vrtx_01V6Pn2BSFAgEna2HddBp8sa&quot;,&quot;tool_name&quot;:&quot;str-replace-editor&quot;,&quot;input_json&quot;:&quot;{\&quot;command\&quot;: \&quot;str_replace\&quot;, \&quot;path\&quot;: \&quot;src/meddra_graph/tests/test_data/hlt_pt.asc\&quot;, \&quot;instruction_reminder\&quot;: \&quot;ALWAYS BREAK DOWN EDITS INTO SMALLER CHUNKS OF AT MOST 150 LINES EACH.\&quot;, \&quot;old_str\&quot;: \&quot;10001101$10001201\\n10001101$10001202\\n10001102$10001202\\n10001201$10001301\\n10002101$10002201\\n10002101$10002202\\n10002102$10002202\\n10002102$10002203\&quot;, \&quot;new_str\&quot;: \&quot;10001101$10001201\\n10001101$10001202\\n10001102$10001202\\n10001201$10001301\\n10002101$10002201\\n10002101$10002202\\n10002102$10002202\&quot;, \&quot;old_str_start_line_number\&quot;: 1, \&quot;old_str_end_line_number\&quot;: 8}&quot;,&quot;mcp_server_name&quot;:&quot;&quot;,&quot;mcp_tool_name&quot;:&quot;&quot;}},{&quot;id&quot;:0,&quot;type&quot;:0,&quot;content&quot;:&quot;There's the problem! Line 8 in `hlt_pt.asc` references `10002203`, but this PT code doesn't exist in `pt.asc`. The PT codes defined are:\n- 10001201, 10001202, 10001301, 10002201, 10002202\n\nBut the edge file references `10002203` which doesn't exist.\n\nThis is a data consistency issue in your test data. The solution is to either:\n\n1. **Add the missing PT term** `10002203` to `pt.asc`\n2. **Remove the invalid edge** `10002102$10002203` from `hlt_pt.asc`\n3. **Fix the code to handle this gracefully** by filtering out edges that reference non-existent terms\n\nLet me check what the test expects and fix the test data accordingly. Looking at the test, it expects exactly `NUMBER_OF_TEST_TERMS = 25` terms and `NUMBER_OF_TEST_EDGES = 19` edges.\n\nLet me fix the test data by removing the invalid edge:\n&quot;},{&quot;id&quot;:2,&quot;type&quot;:2,&quot;content&quot;:&quot;&quot;},{&quot;id&quot;:3,&quot;type&quot;:3,&quot;content&quot;:&quot;&quot;}],&quot;seen_state&quot;:&quot;seen&quot;,&quot;structured_request_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:1,&quot;tool_result_node&quot;:{&quot;content&quot;:&quot;Here's the result of running `cat -n` on src/meddra_graph/tests/test_data/hlt_pt.asc:\n     1\t10001101$10001201\n     2\t10001101$10001202\n     3\t10001102$10001202\n     4\t10001201$10001301\n     5\t10002101$10002201\n     6\t10002101$10002202\n     7\t10002102$10002202\n     8\t10002102$10002203\n     9\t\nTotal lines in file: 9\n&quot;,&quot;is_error&quot;:false,&quot;request_id&quot;:&quot;&quot;,&quot;tool_use_id&quot;:&quot;toolu_vrtx_016zLMEcJ92XcqHxNqZcKzEz&quot;}},{&quot;id&quot;:2,&quot;type&quot;:4,&quot;ide_state_node&quot;:{&quot;workspaceFolders&quot;:[{&quot;repositoryRoot&quot;:&quot;/Users/tcwullsc/Devel/AAI/SPRINT/modules/meddra-loader&quot;,&quot;folderRoot&quot;:&quot;/Users/tcwullsc/Devel/AAI/SPRINT/modules/meddra-loader&quot;}],&quot;workspaceFoldersUnchanged&quot;:false,&quot;currentTerminal&quot;:{&quot;terminalId&quot;:127,&quot;currentWorkingDirectory&quot;:&quot;/Users/tcwullsc/Devel/AAI/SPRINT/modules/meddra-loader&quot;}}}],&quot;timestamp&quot;:&quot;2025-06-25T09:21:23.180Z&quot;,&quot;response_text&quot;:&quot;There's the problem! Line 8 in `hlt_pt.asc` references `10002203`, but this PT code doesn't exist in `pt.asc`. The PT codes defined are:\n- 10001201, 10001202, 10001301, 10002201, 10002202\n\nBut the edge file references `10002203` which doesn't exist.\n\nThis is a data consistency issue in your test data. The solution is to either:\n\n1. **Add the missing PT term** `10002203` to `pt.asc`\n2. **Remove the invalid edge** `10002102$10002203` from `hlt_pt.asc`\n3. **Fix the code to handle this gracefully** by filtering out edges that reference non-existent terms\n\nLet me check what the test expects and fix the test data accordingly. Looking at the test, it expects exactly `NUMBER_OF_TEST_TERMS = 25` terms and `NUMBER_OF_TEST_EDGES = 19` edges.\n\nLet me fix the test data by removing the invalid edge:\n&quot;,&quot;workspace_file_chunks&quot;:[]},{&quot;request_id&quot;:&quot;a9ef5821-fc78-4d2e-9584-a45efefbcb7b&quot;,&quot;status&quot;:&quot;cancelled&quot;,&quot;chatItemType&quot;:&quot;agentic-turn-delimiter&quot;},{&quot;request_id&quot;:&quot;2a58439d-983c-4063-93dd-2228d7be181a&quot;,&quot;status&quot;:&quot;cancelled&quot;,&quot;chatItemType&quot;:&quot;agentic-turn-delimiter&quot;},{&quot;status&quot;:&quot;success&quot;,&quot;request_id&quot;:&quot;242c4916-b394-4294-b5a3-3d87400f0f7d&quot;,&quot;request_message&quot;:&quot;Adjust the TEST_TERMS to fit the test_data I edited.&quot;,&quot;rich_text_json_repr&quot;:{&quot;type&quot;:&quot;doc&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;Adjust the TEST_TERMS to fit the test_data I edited.&quot;}]}]},&quot;mentioned_items&quot;:[],&quot;structured_output_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:5,&quot;content&quot;:&quot;&quot;,&quot;tool_use&quot;:{&quot;tool_use_id&quot;:&quot;toolu_vrtx_01LJoqLugayAfECRJVGikk7S&quot;,&quot;tool_name&quot;:&quot;launch-process&quot;,&quot;input_json&quot;:&quot;{\&quot;command\&quot;: \&quot;echo \\\&quot;=== SOC terms ===\\\&quot; &amp;&amp; cat src/meddra_graph/tests/test_data/soc.asc &amp;&amp; echo -e \\\&quot;\\\\n=== HLGT terms ===\\\&quot; &amp;&amp; cat src/meddra_graph/tests/test_data/hlgt.asc &amp;&amp; echo -e \\\&quot;\\\\n=== HLT terms ===\\\&quot; &amp;&amp; cat src/meddra_graph/tests/test_data/hlt.asc &amp;&amp; echo -e \\\&quot;\\\\n=== PT terms ===\\\&quot; &amp;&amp; cat src/meddra_graph/tests/test_data/pt.asc &amp;&amp; echo -e \\\&quot;\\\\n=== LLT terms ===\\\&quot; &amp;&amp; cat src/meddra_graph/tests/test_data/llt.asc\&quot;, \&quot;wait\&quot;: true, \&quot;max_wait_seconds\&quot;: 10}&quot;,&quot;mcp_server_name&quot;:&quot;&quot;,&quot;mcp_tool_name&quot;:&quot;&quot;}},{&quot;id&quot;:0,&quot;type&quot;:0,&quot;content&quot;:&quot;I need to examine the current test data to understand what terms are actually available, and then adjust the TEST_TERMS list in the test file to match.\n\nLet me first check what terms are currently defined in each test data file:\n&quot;},{&quot;id&quot;:2,&quot;type&quot;:2,&quot;content&quot;:&quot;&quot;},{&quot;id&quot;:3,&quot;type&quot;:3,&quot;content&quot;:&quot;&quot;}],&quot;seen_state&quot;:&quot;seen&quot;,&quot;structured_request_nodes&quot;:[{&quot;id&quot;:0,&quot;type&quot;:0,&quot;text_node&quot;:{&quot;content&quot;:&quot;Adjust the TEST_TERMS to fit the test_data I edited.&quot;}},{&quot;id&quot;:1,&quot;type&quot;:4,&quot;ide_state_node&quot;:{&quot;workspaceFolders&quot;:[{&quot;repositoryRoot&quot;:&quot;/Users/tcwullsc/Devel/AAI/SPRINT/modules/meddra-loader&quot;,&quot;folderRoot&quot;:&quot;/Users/tcwullsc/Devel/AAI/SPRINT/modules/meddra-loader&quot;}],&quot;workspaceFoldersUnchanged&quot;:false,&quot;currentTerminal&quot;:{&quot;terminalId&quot;:136,&quot;currentWorkingDirectory&quot;:&quot;/Users/tcwullsc/Devel/AAI/SPRINT/modules/meddra-loader&quot;}}}],&quot;timestamp&quot;:&quot;2025-06-25T11:28:02.211Z&quot;,&quot;response_text&quot;:&quot;I need to examine the current test data to understand what terms are actually available, and then adjust the TEST_TERMS list in the test file to match.\n\nLet me first check what terms are currently defined in each test data file:\n&quot;,&quot;workspace_file_chunks&quot;:[]},{&quot;status&quot;:&quot;success&quot;,&quot;request_id&quot;:&quot;522025f8-8943-49a0-b2be-0b4ef3e2d809&quot;,&quot;request_message&quot;:&quot;&quot;,&quot;structured_output_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:5,&quot;content&quot;:&quot;&quot;,&quot;tool_use&quot;:{&quot;tool_use_id&quot;:&quot;toolu_vrtx_01Jz1rbrgXBHvDARGmBTAeuc&quot;,&quot;tool_name&quot;:&quot;str-replace-editor&quot;,&quot;input_json&quot;:&quot;{\&quot;command\&quot;: \&quot;str_replace\&quot;, \&quot;path\&quot;: \&quot;src/meddra_graph/tests/test_meddra_loader.py\&quot;, \&quot;instruction_reminder\&quot;: \&quot;ALWAYS BREAK DOWN EDITS INTO SMALLER CHUNKS OF AT MOST 150 LINES EACH.\&quot;, \&quot;old_str\&quot;: \&quot;TEST_TERMS = [\\n    # SOC (System Organ Classes)\\n    (\\\&quot;soc\\\&quot;, \\\&quot;10001000\\\&quot;, \\\&quot;Lorem ipsum dolor sit amet\\\&quot;),\\n    (\\\&quot;soc\\\&quot;, \\\&quot;10002000\\\&quot;, \\\&quot;Consectetur adipiscing elit\\\&quot;),\\n    (\\\&quot;soc\\\&quot;, \\\&quot;10003000\\\&quot;, \\\&quot;Sed do eiusmod tempor incididunt\\\&quot;),\\n    (\\\&quot;soc\\\&quot;, \\\&quot;10004000\\\&quot;, \\\&quot;Ut labore et dolore magna aliqua\\\&quot;),\\n    (\\\&quot;soc\\\&quot;, \\\&quot;10005000\\\&quot;, \\\&quot;Enim ad minim veniam quis\\\&quot;),\\n\\n    # HLGT (High Level Group Terms)\\n    (\\\&quot;hlgt\\\&quot;, \\\&quot;10001001\\\&quot;, \\\&quot;Nostrud exercitation ullamco\\\&quot;),\\n    (\\\&quot;hlgt\\\&quot;, \\\&quot;10001002\\\&quot;, \\\&quot;Laboris nisi ut aliquip ex ea\\\&quot;),\\n    (\\\&quot;hlgt\\\&quot;, \\\&quot;10002001\\\&quot;, \\\&quot;Commodo consequat duis aute irure\\\&quot;),\\n    (\\\&quot;hlgt\\\&quot;, \\\&quot;10002002\\\&quot;, \\\&quot;Dolor in reprehenderit in voluptate\\\&quot;),\\n    (\\\&quot;hlgt\\\&quot;, \\\&quot;10003001\\\&quot;, \\\&quot;Velit esse cillum dolore eu fugiat\\\&quot;),\\n\\n    # HLT (High Level Terms)\\n    (\\\&quot;hlt\\\&quot;, \\\&quot;10001101\\\&quot;, \\\&quot;Nulla pariatur excepteur sint occaecat\\\&quot;),\\n    (\\\&quot;hlt\\\&quot;, \\\&quot;10001102\\\&quot;, \\\&quot;Cupidatat non proident sunt in culpa\\\&quot;),\\n    (\\\&quot;hlt\\\&quot;, \\\&quot;10002101\\\&quot;, \\\&quot;Est laborum lorem ipsum dolor sit\\\&quot;),\\n    (\\\&quot;hlt\\\&quot;, \\\&quot;10002102\\\&quot;, \\\&quot;Amet consectetur adipiscing elit sed\\\&quot;),\\n    (\\\&quot;hlt\\\&quot;, \\\&quot;10003101\\\&quot;, \\\&quot;Duis aute irure dolor in reprehenderit\\\&quot;),\\n\\n    # PT (Preferred Terms)\\n    (\\\&quot;pt\\\&quot;, \\\&quot;10001201\\\&quot;, \\\&quot;Do eiusmod tempor incididunt ut\\\&quot;),\\n    (\\\&quot;pt\\\&quot;, \\\&quot;10001202\\\&quot;, \\\&quot;Labore et dolore magna aliqua\\\&quot;),\\n    (\\\&quot;pt\\\&quot;, \\\&quot;10001301\\\&quot;, \\\&quot;Enim ad minim veniam quis nostrud\\\&quot;),\\n    (\\\&quot;pt\\\&quot;, \\\&quot;10002201\\\&quot;, \\\&quot;Exercitation ullamco laboris nisi\\\&quot;),\\n    (\\\&quot;pt\\\&quot;, \\\&quot;10002202\\\&quot;, \\\&quot;Ut aliquip ex ea commodo consequat\\\&quot;),\\n\\n    # LLT (Lowest Level Terms)\\n    (\\\&quot;llt\\\&quot;, \\\&quot;10001302\\\&quot;, \\\&quot;Cillum dolore eu fugiat nulla\\\&quot;),\\n    (\\\&quot;llt\\\&quot;, \\\&quot;10001303\\\&quot;, \\\&quot;Pariatur excepteur sint occaecat\\\&quot;),\\n    (\\\&quot;llt\\\&quot;, \\\&quot;10002302\\\&quot;, \\\&quot;Anim id est laborum sed ut\\\&quot;),\\n    (\\\&quot;llt\\\&quot;, \\\&quot;10002303\\\&quot;, \\\&quot;Lorem ipsum dolor sit amet\\\&quot;),\\n    (\\\&quot;llt\\\&quot;, \\\&quot;10003301\\\&quot;, \\\&quot;Consectetur adipiscing elit\\\&quot;),\\n]\&quot;, \&quot;new_str\&quot;: \&quot;TEST_TERMS = [\\n    # SOC (System Organ Classes)\\n    (\\\&quot;soc\\\&quot;, \\\&quot;50000001\\\&quot;, \\\&quot;Lorem ipsum dolor sit amet\\\&quot;),\\n    (\\\&quot;soc\\\&quot;, \\\&quot;50000002\\\&quot;, \\\&quot;Consectetur adipiscing elit\\\&quot;),\\n    (\\\&quot;soc\\\&quot;, \\\&quot;50000003\\\&quot;, \\\&quot;Sed do eiusmod tempor incididunt\\\&quot;),\\n    (\\\&quot;soc\\\&quot;, \\\&quot;50000004\\\&quot;, \\\&quot;Ut labore et dolore magna aliqua\\\&quot;),\\n    (\\\&quot;soc\\\&quot;, \\\&quot;50000005\\\&quot;, \\\&quot;Enim ad minim veniam quis\\\&quot;),\\n\\n    # HLGT (High Level Group Terms)\\n    (\\\&quot;hlgt\\\&quot;, \\\&quot;30000001\\\&quot;, \\\&quot;Nostrud exercitation ullamco\\\&quot;),\\n    (\\\&quot;hlgt\\\&quot;, \\\&quot;30000002\\\&quot;, \\\&quot;Laboris nisi ut aliquip ex ea\\\&quot;),\\n    (\\\&quot;hlgt\\\&quot;, \\\&quot;30000003\\\&quot;, \\\&quot;Commodo consequat duis aute irure\\\&quot;),\\n    (\\\&quot;hlgt\\\&quot;, \\\&quot;30000004\\\&quot;, \\\&quot;Dolor in reprehenderit in voluptate\\\&quot;),\\n    (\\\&quot;hlgt\\\&quot;, \\\&quot;30000005\\\&quot;, \\\&quot;Velit esse cillum dolore eu fugiat\\\&quot;),\\n\\n    # HLT (High Level Terms)\\n    (\\\&quot;hlt\\\&quot;, \\\&quot;10000001\\\&quot;, \\\&quot;Nulla pariatur excepteur sint occaecat\\\&quot;),\\n    (\\\&quot;hlt\\\&quot;, \\\&quot;10000002\\\&quot;, \\\&quot;Cupidatat non proident sunt in culpa\\\&quot;),\\n    (\\\&quot;hlt\\\&quot;, \\\&quot;10000003\\\&quot;, \\\&quot;Qui officia deserunt mollit anim id\\\&quot;),\\n    (\\\&quot;hlt\\\&quot;, \\\&quot;10000004\\\&quot;, \\\&quot;Est laborum lorem ipsum dolor sit\\\&quot;),\\n    (\\\&quot;hlt\\\&quot;, \\\&quot;10000005\\\&quot;, \\\&quot;Amet consectetur adipiscing elit sed\\\&quot;),\\n\\n    # PT (Preferred Terms)\\n    (\\\&quot;pt\\\&quot;, \\\&quot;40000001\\\&quot;, \\\&quot;Do eiusmod tempor incididunt ut\\\&quot;),\\n    (\\\&quot;pt\\\&quot;, \\\&quot;40000002\\\&quot;, \\\&quot;Labore et dolore magna aliqua\\\&quot;),\\n    (\\\&quot;pt\\\&quot;, \\\&quot;40000003\\\&quot;, \\\&quot;Enim ad minim veniam quis nostrud\\\&quot;),\\n    (\\\&quot;pt\\\&quot;, \\\&quot;40000004\\\&quot;, \\\&quot;Exercitation ullamco laboris nisi\\\&quot;),\\n    (\\\&quot;pt\\\&quot;, \\\&quot;40000005\\\&quot;, \\\&quot;Ut aliquip ex ea commodo consequat\\\&quot;),\\n\\n    # LLT (Lowest Level Terms)\\n    (\\\&quot;llt\\\&quot;, \\\&quot;20000001\\\&quot;, \\\&quot;Reprehenderit in voluptate velit esse\\\&quot;),\\n    (\\\&quot;llt\\\&quot;, \\\&quot;20000002\\\&quot;, \\\&quot;Cillum dolore eu fugiat nulla\\\&quot;),\\n    (\\\&quot;llt\\\&quot;, \\\&quot;20000003\\\&quot;, \\\&quot;Pariatur excepteur sint occaecat\\\&quot;),\\n    (\\\&quot;llt\\\&quot;, \\\&quot;20000004\\\&quot;, \\\&quot;Cupidatat non proident sunt in\\\&quot;),\\n    (\\\&quot;llt\\\&quot;, \\\&quot;20000005\\\&quot;, \\\&quot;Culpa qui officia deserunt mollit\\\&quot;),\\n]\&quot;, \&quot;old_str_start_line_number\&quot;: 8, \&quot;old_str_end_line_number\&quot;: 43}&quot;,&quot;mcp_server_name&quot;:&quot;&quot;,&quot;mcp_tool_name&quot;:&quot;&quot;}},{&quot;id&quot;:0,&quot;type&quot;:0,&quot;content&quot;:&quot;Now I can see the actual term codes and names in the test data. Let me update the TEST_TERMS list in the test file to match what's actually available:\n&quot;},{&quot;id&quot;:2,&quot;type&quot;:2,&quot;content&quot;:&quot;&quot;},{&quot;id&quot;:3,&quot;type&quot;:3,&quot;content&quot;:&quot;&quot;}],&quot;seen_state&quot;:&quot;seen&quot;,&quot;structured_request_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:1,&quot;tool_result_node&quot;:{&quot;content&quot;:&quot;Here are the results from executing the command.\n        &lt;return-code&gt;\n        0\n        &lt;/return-code&gt;\n        &lt;stdout&gt;\n        === SOC terms ===\n50000001$Lorem ipsum dolor sit amet$Lorem$ABC$20001000$ABC$ABC$X00-X99$X00-X99$ABC\n50000002$Consectetur adipiscing elit$Consectetur$DEF$20002000$DEF$DEF$Y00-Y99$Y00-Y99$DEF\n50000003$Sed do eiusmod tempor incididunt$Sed$GHI$20003000$GHI$GHI$Z00-Z99$Z00-Z99$GHI\n50000004$Ut labore et dolore magna aliqua$Ut$JKL$20004000$JKL$JKL$W00-W99$W00-W99$JKL\n50000005$Enim ad minim veniam quis$Enim$MNO$20005000$MNO$MNO$V00-V99$V00-V99$MNO\n\n=== HLGT terms ===\n30000001$Nostrud exercitation ullamco$PQR$30001001$PQR$PQR$X10-X19$X10-X19$PQR\n30000002$Laboris nisi ut aliquip ex ea$STU$30001002$STU$STU$X20-X29$X20-X29$STU\n30000003$Commodo consequat duis aute irure$VWX$30002001$VWX$VWX$Y10-Y19$Y10-Y19$VWX\n30000004$Dolor in reprehenderit in voluptate$YZA$30002002$YZA$YZA$Y20-Y29$Y20-Y29$YZA\n30000005$Velit esse cillum dolore eu fugiat$BCD$30003001$BCD$BCD$Z10-Z19$Z10-Z19$BCD\n\n=== HLT terms ===\n10000001$Nulla pariatur excepteur sint occaecat$EFG$40001101$EFG$EFG$X30$X30$EFG\n10000002$Cupidatat non proident sunt in culpa$HIJ$40001102$HIJ$HIJ$X31$X31$HIJ\n10000003$Qui officia deserunt mollit anim id$KLM$40001201$KLM$KLM$X32$X32$KLM\n10000004$Est laborum lorem ipsum dolor sit$NOP$40002101$NOP$NOP$Y30$Y30$NOP\n10000005$Amet consectetur adipiscing elit sed$QRS$40002102$QRS$QRS$Y31$Y31$QRS\n\n=== PT terms ===\n40000001$Do eiusmod tempor incididunt ut$$10001000$TUV$50001201$TUV$X40.1$X40.1$TUV\n40000002$Labore et dolore magna aliqua$$10001000$WXY$50001202$WXY$X40.2$X40.2$WXY\n40000003$Enim ad minim veniam quis nostrud$$10001000$ZAB$50001301$ZAB$X40.3$X40.3$ZAB\n40000004$Exercitation ullamco laboris nisi$$10002000$CDE$50002201$CDE$Y40.1$Y40.1$CDE\n40000005$Ut aliquip ex ea commodo consequat$$10002000$FGH$50002202$FGH$Y40.2$Y40.2$FGH\n\n=== LLT terms ===\n20000001$Reprehenderit in voluptate velit esse$10001201$LMN$60001301$LMN$X50.1$X50.1$X50.1$Y$LMN\n20000002$Cillum dolore eu fugiat nulla$10001201$OPQ$60001302$OPQ$X50.2$X50.2$X50.2$Y$OPQ\n20000003$Pariatur excepteur sint occaecat$10001202$RST$60001303$RST$X50.3$X50.3$X50.3$Y$RST\n20000004$Cupidatat non proident sunt in$10001301$UVW$60001401$UVW$X50.4$X50.4$X50.4$Y$UVW\n20000005$Culpa qui officia deserunt mollit$10002201$XYZ$60002301$XYZ$Y50.1$Y50.1$Y50.1$Y$XYZ\n\n        &lt;/stdout&gt;\n        &lt;stderr&gt;\n        \n        &lt;/stderr&gt;&quot;,&quot;is_error&quot;:false,&quot;request_id&quot;:&quot;&quot;,&quot;tool_use_id&quot;:&quot;toolu_vrtx_01LJoqLugayAfECRJVGikk7S&quot;}},{&quot;id&quot;:2,&quot;type&quot;:4,&quot;ide_state_node&quot;:{&quot;workspaceFolders&quot;:[{&quot;repositoryRoot&quot;:&quot;/Users/tcwullsc/Devel/AAI/SPRINT/modules/meddra-loader&quot;,&quot;folderRoot&quot;:&quot;/Users/tcwullsc/Devel/AAI/SPRINT/modules/meddra-loader&quot;}],&quot;workspaceFoldersUnchanged&quot;:false,&quot;currentTerminal&quot;:{&quot;terminalId&quot;:137,&quot;currentWorkingDirectory&quot;:&quot;/Users/tcwullsc/Devel/AAI/SPRINT/modules/meddra-loader&quot;}}}],&quot;timestamp&quot;:&quot;2025-06-25T11:28:09.948Z&quot;,&quot;response_text&quot;:&quot;Now I can see the actual term codes and names in the test data. Let me update the TEST_TERMS list in the test file to match what's actually available:\n&quot;,&quot;workspace_file_chunks&quot;:[]},{&quot;status&quot;:&quot;success&quot;,&quot;request_id&quot;:&quot;e7a073a8-013d-4c96-9018-4b0eecc8c3ab&quot;,&quot;request_message&quot;:&quot;&quot;,&quot;structured_output_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:5,&quot;content&quot;:&quot;&quot;,&quot;tool_use&quot;:{&quot;tool_use_id&quot;:&quot;toolu_vrtx_01J6i3xyonjvLjZLwZsvhkBS&quot;,&quot;tool_name&quot;:&quot;view&quot;,&quot;input_json&quot;:&quot;{\&quot;path\&quot;: \&quot;src/meddra_graph/tests/test_meddra_loader.py\&quot;, \&quot;type\&quot;: \&quot;file\&quot;, \&quot;view_range\&quot;: [8, 50]}&quot;,&quot;mcp_server_name&quot;:&quot;&quot;,&quot;mcp_tool_name&quot;:&quot;&quot;}},{&quot;id&quot;:0,&quot;type&quot;:0,&quot;content&quot;:&quot;I see the test file has already been partially updated. Let me check the current content and update it to match the actual test data:\n&quot;},{&quot;id&quot;:2,&quot;type&quot;:2,&quot;content&quot;:&quot;&quot;},{&quot;id&quot;:3,&quot;type&quot;:3,&quot;content&quot;:&quot;&quot;}],&quot;seen_state&quot;:&quot;seen&quot;,&quot;structured_request_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:1,&quot;tool_result_node&quot;:{&quot;content&quot;:&quot;Failed to edit the file src/meddra_graph/tests/test_meddra_loader.py. See below for details.\nResult for str_replace for entry with index [0]:\nNo replacement was performed, oldStr did not appear verbatim in src/meddra_graph/tests/test_meddra_loader.py.\nThe content in the specified region is:\n     4\timport pytest\n     5\t\n     6\tfrom meddra_graph.meddra_loader import MedDRALoader, MedDRAData\n     7\t\n     8\tTEST_TERMS = [\n     9\t    # SOC (System Organ Classes)\n    10\t    (\&quot;soc\&quot;, \&quot;10001000\&quot;, \&quot;Lorem ipsum dolor sit amet\&quot;),\n    11\t    (\&quot;soc\&quot;, \&quot;10002000\&quot;, \&quot;Consectetur adipiscing elit\&quot;),\n    12\t    (\&quot;soc\&quot;, \&quot;10003000\&quot;, \&quot;Sed do eiusmod tempor incididunt\&quot;),\n    13\t    (\&quot;soc\&quot;, \&quot;10004000\&quot;, \&quot;Ut labore et dolore magna aliqua\&quot;),\n    14\t    (\&quot;soc\&quot;, \&quot;10005000\&quot;, \&quot;Enim ad minim veniam quis\&quot;),\n    15\t\n    16\t    # HLGT (High Level Group Terms)\n    17\t    (\&quot;hlgt\&quot;, \&quot;10001001\&quot;, \&quot;Nostrud exercitation ullamco\&quot;),\n    18\t    (\&quot;hlgt\&quot;, \&quot;10001002\&quot;, \&quot;Laboris nisi ut aliquip ex ea\&quot;),\n    19\t    (\&quot;hlgt\&quot;, \&quot;10002001\&quot;, \&quot;Commodo consequat duis aute irure\&quot;),\n    20\t    (\&quot;hlgt\&quot;, \&quot;10002002\&quot;, \&quot;Dolor in reprehenderit in voluptate\&quot;),\n    21\t    (\&quot;hlgt\&quot;, \&quot;10003001\&quot;, \&quot;Velit esse cillum dolore eu fugiat\&quot;),\n    22\t\n    23\t    # HLT (High Level Terms)\n    24\t    (\&quot;hlt\&quot;, \&quot;10001101\&quot;, \&quot;Nulla pariatur excepteur sint occaecat\&quot;),\n    25\t    (\&quot;hlt\&quot;, \&quot;10001102\&quot;, \&quot;Cupidatat non proident sunt in culpa\&quot;),\n    26\t    (\&quot;hlt\&quot;, \&quot;10001203\&quot;, \&quot;Qui officia deserunt mollit anim id\&quot;),\n    27\t    (\&quot;hlt\&quot;, \&quot;10002101\&quot;, \&quot;Est laborum lorem ipsum dolor sit\&quot;),\n    28\t    (\&quot;hlt\&quot;, \&quot;10002102\&quot;, \&quot;Amet consectetur adipiscing elit sed\&quot;),\n    29\t\n    30\t    # PT (Preferred Terms)\n    31\t    (\&quot;pt\&quot;, \&quot;10001201\&quot;, \&quot;Do eiusmod tempor incididunt ut\&quot;),\n    32\t    (\&quot;pt\&quot;, \&quot;10001202\&quot;, \&quot;Labore et dolore magna aliqua\&quot;),\n    33\t    (\&quot;pt\&quot;, \&quot;10001302\&quot;, \&quot;Enim ad minim veniam quis nostrud\&quot;),\n    34\t    (\&quot;pt\&quot;, \&quot;10002201\&quot;, \&quot;Exercitation ullamco laboris nisi\&quot;),\n    35\t    (\&quot;pt\&quot;, \&quot;10002202\&quot;, \&quot;Ut aliquip ex ea commodo consequat\&quot;),\n    36\t\n    37\t    # LLT (Lowest Level Terms) from file\n    38\t    (\&quot;llt\&quot;, \&quot;10001301\&quot;, \&quot;Reprehenderit in voluptate velit esse\&quot;),\n    39\t    (\&quot;llt\&quot;, \&quot;10001302\&quot;, \&quot;Cillum dolore eu fugiat nulla pariatur\&quot;),\n    40\t    (\&quot;llt\&quot;, \&quot;10001303\&quot;, \&quot;Pariatur excepteur sint occaecat cupidatat\&quot;),\n    41\t    (\&quot;llt\&quot;, \&quot;10001401\&quot;, \&quot;Cupidatat non proident sunt in culpa qui\&quot;),\n    42\t    (\&quot;llt\&quot;, \&quot;10002301\&quot;, \&quot;Officia deserunt mollit anim id est\&quot;),\n    43\t]\n    44\t\n    45\tNUMBER_OF_TEST_TERMS = len(TEST_TERMS)\n    46\tNUMBER_OF_TEST_EDGES = 24\n    47\t\n\nDiff between oldStr and the specified region is:\n===================================================================\n--- oldStr\n+++ regionContent\n@@ -16,21 +16,21 @@\n     # HLT (High Level Terms)\n     (\&quot;hlt\&quot;, \&quot;10001101\&quot;, \&quot;Nulla pariatur excepteur sint occaecat\&quot;),\n     (\&quot;hlt\&quot;, \&quot;10001102\&quot;, \&quot;Cupidatat non proident sunt in culpa\&quot;),\n+    (\&quot;hlt\&quot;, \&quot;10001203\&quot;, \&quot;Qui officia deserunt mollit anim id\&quot;),\n     (\&quot;hlt\&quot;, \&quot;10002101\&quot;, \&quot;Est laborum lorem ipsum dolor sit\&quot;),\n     (\&quot;hlt\&quot;, \&quot;10002102\&quot;, \&quot;Amet consectetur adipiscing elit sed\&quot;),\n-    (\&quot;hlt\&quot;, \&quot;10003101\&quot;, \&quot;Duis aute irure dolor in reprehenderit\&quot;),\n \n     # PT (Preferred Terms)\n     (\&quot;pt\&quot;, \&quot;10001201\&quot;, \&quot;Do eiusmod tempor incididunt ut\&quot;),\n     (\&quot;pt\&quot;, \&quot;10001202\&quot;, \&quot;Labore et dolore magna aliqua\&quot;),\n-    (\&quot;pt\&quot;, \&quot;10001301\&quot;, \&quot;Enim ad minim veniam quis nostrud\&quot;),\n+    (\&quot;pt\&quot;, \&quot;10001302\&quot;, \&quot;Enim ad minim veniam quis nostrud\&quot;),\n     (\&quot;pt\&quot;, \&quot;10002201\&quot;, \&quot;Exercitation ullamco laboris nisi\&quot;),\n     (\&quot;pt\&quot;, \&quot;10002202\&quot;, \&quot;Ut aliquip ex ea commodo consequat\&quot;),\n \n-    # LLT (Lowest Level Terms)\n-    (\&quot;llt\&quot;, \&quot;10001302\&quot;, \&quot;Cillum dolore eu fugiat nulla\&quot;),\n-    (\&quot;llt\&quot;, \&quot;10001303\&quot;, \&quot;Pariatur excepteur sint occaecat\&quot;),\n-    (\&quot;llt\&quot;, \&quot;10002302\&quot;, \&quot;Anim id est laborum sed ut\&quot;),\n-    (\&quot;llt\&quot;, \&quot;10002303\&quot;, \&quot;Lorem ipsum dolor sit amet\&quot;),\n-    (\&quot;llt\&quot;, \&quot;10003301\&quot;, \&quot;Consectetur adipiscing elit\&quot;),\n+    # LLT (Lowest Level Terms) from file\n+    (\&quot;llt\&quot;, \&quot;10001301\&quot;, \&quot;Reprehenderit in voluptate velit esse\&quot;),\n+    (\&quot;llt\&quot;, \&quot;10001302\&quot;, \&quot;Cillum dolore eu fugiat nulla pariatur\&quot;),\n+    (\&quot;llt\&quot;, \&quot;10001303\&quot;, \&quot;Pariatur excepteur sint occaecat cupidatat\&quot;),\n+    (\&quot;llt\&quot;, \&quot;10001401\&quot;, \&quot;Cupidatat non proident sunt in culpa qui\&quot;),\n+    (\&quot;llt\&quot;, \&quot;10002301\&quot;, \&quot;Officia deserunt mollit anim id est\&quot;),\n ]\n\n\nFix failed str_replace entries accordingly and try again.\n&quot;,&quot;is_error&quot;:true,&quot;request_id&quot;:&quot;&quot;,&quot;tool_use_id&quot;:&quot;toolu_vrtx_01Jz1rbrgXBHvDARGmBTAeuc&quot;}},{&quot;id&quot;:2,&quot;type&quot;:4,&quot;ide_state_node&quot;:{&quot;workspaceFolders&quot;:[{&quot;repositoryRoot&quot;:&quot;/Users/tcwullsc/Devel/AAI/SPRINT/modules/meddra-loader&quot;,&quot;folderRoot&quot;:&quot;/Users/tcwullsc/Devel/AAI/SPRINT/modules/meddra-loader&quot;}],&quot;workspaceFoldersUnchanged&quot;:false,&quot;currentTerminal&quot;:{&quot;terminalId&quot;:137,&quot;currentWorkingDirectory&quot;:&quot;/Users/tcwullsc/Devel/AAI/SPRINT/modules/meddra-loader&quot;}}}],&quot;timestamp&quot;:&quot;2025-06-25T11:28:28.965Z&quot;,&quot;response_text&quot;:&quot;I see the test file has already been partially updated. Let me check the current content and update it to match the actual test data:\n&quot;,&quot;workspace_file_chunks&quot;:[]},{&quot;status&quot;:&quot;success&quot;,&quot;request_id&quot;:&quot;bf585ec0-10db-429b-a741-42cd6c600484&quot;,&quot;request_message&quot;:&quot;&quot;,&quot;structured_output_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:5,&quot;content&quot;:&quot;&quot;,&quot;tool_use&quot;:{&quot;tool_use_id&quot;:&quot;toolu_vrtx_01Ma5PLvHM267FcS8BXEiHZc&quot;,&quot;tool_name&quot;:&quot;str-replace-editor&quot;,&quot;input_json&quot;:&quot;{\&quot;command\&quot;: \&quot;str_replace\&quot;, \&quot;path\&quot;: \&quot;src/meddra_graph/tests/test_meddra_loader.py\&quot;, \&quot;instruction_reminder\&quot;: \&quot;ALWAYS BREAK DOWN EDITS INTO SMALLER CHUNKS OF AT MOST 150 LINES EACH.\&quot;, \&quot;old_str\&quot;: \&quot;TEST_TERMS = [\\n    # SOC (System Organ Classes)\\n    (\\\&quot;soc\\\&quot;, \\\&quot;10001000\\\&quot;, \\\&quot;Lorem ipsum dolor sit amet\\\&quot;),\\n    (\\\&quot;soc\\\&quot;, \\\&quot;10002000\\\&quot;, \\\&quot;Consectetur adipiscing elit\\\&quot;),\\n    (\\\&quot;soc\\\&quot;, \\\&quot;10003000\\\&quot;, \\\&quot;Sed do eiusmod tempor incididunt\\\&quot;),\\n    (\\\&quot;soc\\\&quot;, \\\&quot;10004000\\\&quot;, \\\&quot;Ut labore et dolore magna aliqua\\\&quot;),\\n    (\\\&quot;soc\\\&quot;, \\\&quot;10005000\\\&quot;, \\\&quot;Enim ad minim veniam quis\\\&quot;),\\n\\n    # HLGT (High Level Group Terms)\\n    (\\\&quot;hlgt\\\&quot;, \\\&quot;10001001\\\&quot;, \\\&quot;Nostrud exercitation ullamco\\\&quot;),\\n    (\\\&quot;hlgt\\\&quot;, \\\&quot;10001002\\\&quot;, \\\&quot;Laboris nisi ut aliquip ex ea\\\&quot;),\\n    (\\\&quot;hlgt\\\&quot;, \\\&quot;10002001\\\&quot;, \\\&quot;Commodo consequat duis aute irure\\\&quot;),\\n    (\\\&quot;hlgt\\\&quot;, \\\&quot;10002002\\\&quot;, \\\&quot;Dolor in reprehenderit in voluptate\\\&quot;),\\n    (\\\&quot;hlgt\\\&quot;, \\\&quot;10003001\\\&quot;, \\\&quot;Velit esse cillum dolore eu fugiat\\\&quot;),\\n\\n    # HLT (High Level Terms)\\n    (\\\&quot;hlt\\\&quot;, \\\&quot;10001101\\\&quot;, \\\&quot;Nulla pariatur excepteur sint occaecat\\\&quot;),\\n    (\\\&quot;hlt\\\&quot;, \\\&quot;10001102\\\&quot;, \\\&quot;Cupidatat non proident sunt in culpa\\\&quot;),\\n    (\\\&quot;hlt\\\&quot;, \\\&quot;10001203\\\&quot;, \\\&quot;Qui officia deserunt mollit anim id\\\&quot;),\\n    (\\\&quot;hlt\\\&quot;, \\\&quot;10002101\\\&quot;, \\\&quot;Est laborum lorem ipsum dolor sit\\\&quot;),\\n    (\\\&quot;hlt\\\&quot;, \\\&quot;10002102\\\&quot;, \\\&quot;Amet consectetur adipiscing elit sed\\\&quot;),\\n\\n    # PT (Preferred Terms)\\n    (\\\&quot;pt\\\&quot;, \\\&quot;10001201\\\&quot;, \\\&quot;Do eiusmod tempor incididunt ut\\\&quot;),\\n    (\\\&quot;pt\\\&quot;, \\\&quot;10001202\\\&quot;, \\\&quot;Labore et dolore magna aliqua\\\&quot;),\\n    (\\\&quot;pt\\\&quot;, \\\&quot;10001302\\\&quot;, \\\&quot;Enim ad minim veniam quis nostrud\\\&quot;),\\n    (\\\&quot;pt\\\&quot;, \\\&quot;10002201\\\&quot;, \\\&quot;Exercitation ullamco laboris nisi\\\&quot;),\\n    (\\\&quot;pt\\\&quot;, \\\&quot;10002202\\\&quot;, \\\&quot;Ut aliquip ex ea commodo consequat\\\&quot;),\\n\\n    # LLT (Lowest Level Terms) from file\\n    (\\\&quot;llt\\\&quot;, \\\&quot;10001301\\\&quot;, \\\&quot;Reprehenderit in voluptate velit esse\\\&quot;),\\n    (\\\&quot;llt\\\&quot;, \\\&quot;10001302\\\&quot;, \\\&quot;Cillum dolore eu fugiat nulla pariatur\\\&quot;),\\n    (\\\&quot;llt\\\&quot;, \\\&quot;10001303\\\&quot;, \\\&quot;Pariatur excepteur sint occaecat cupidatat\\\&quot;),\\n    (\\\&quot;llt\\\&quot;, \\\&quot;10001401\\\&quot;, \\\&quot;Cupidatat non proident sunt in culpa qui\\\&quot;),\\n    (\\\&quot;llt\\\&quot;, \\\&quot;10002301\\\&quot;, \\\&quot;Officia deserunt mollit anim id est\\\&quot;),\\n]\&quot;, \&quot;new_str\&quot;: \&quot;TEST_TERMS = [\\n    # SOC (System Organ Classes)\\n    (\\\&quot;soc\\\&quot;, \\\&quot;50000001\\\&quot;, \\\&quot;Lorem ipsum dolor sit amet\\\&quot;),\\n    (\\\&quot;soc\\\&quot;, \\\&quot;50000002\\\&quot;, \\\&quot;Consectetur adipiscing elit\\\&quot;),\\n    (\\\&quot;soc\\\&quot;, \\\&quot;50000003\\\&quot;, \\\&quot;Sed do eiusmod tempor incididunt\\\&quot;),\\n    (\\\&quot;soc\\\&quot;, \\\&quot;50000004\\\&quot;, \\\&quot;Ut labore et dolore magna aliqua\\\&quot;),\\n    (\\\&quot;soc\\\&quot;, \\\&quot;50000005\\\&quot;, \\\&quot;Enim ad minim veniam quis\\\&quot;),\\n\\n    # HLGT (High Level Group Terms)\\n    (\\\&quot;hlgt\\\&quot;, \\\&quot;30000001\\\&quot;, \\\&quot;Nostrud exercitation ullamco\\\&quot;),\\n    (\\\&quot;hlgt\\\&quot;, \\\&quot;30000002\\\&quot;, \\\&quot;Laboris nisi ut aliquip ex ea\\\&quot;),\\n    (\\\&quot;hlgt\\\&quot;, \\\&quot;30000003\\\&quot;, \\\&quot;Commodo consequat duis aute irure\\\&quot;),\\n    (\\\&quot;hlgt\\\&quot;, \\\&quot;30000004\\\&quot;, \\\&quot;Dolor in reprehenderit in voluptate\\\&quot;),\\n    (\\\&quot;hlgt\\\&quot;, \\\&quot;30000005\\\&quot;, \\\&quot;Velit esse cillum dolore eu fugiat\\\&quot;),\\n\\n    # HLT (High Level Terms)\\n    (\\\&quot;hlt\\\&quot;, \\\&quot;10000001\\\&quot;, \\\&quot;Nulla pariatur excepteur sint occaecat\\\&quot;),\\n    (\\\&quot;hlt\\\&quot;, \\\&quot;10000002\\\&quot;, \\\&quot;Cupidatat non proident sunt in culpa\\\&quot;),\\n    (\\\&quot;hlt\\\&quot;, \\\&quot;10000003\\\&quot;, \\\&quot;Qui officia deserunt mollit anim id\\\&quot;),\\n    (\\\&quot;hlt\\\&quot;, \\\&quot;10000004\\\&quot;, \\\&quot;Est laborum lorem ipsum dolor sit\\\&quot;),\\n    (\\\&quot;hlt\\\&quot;, \\\&quot;10000005\\\&quot;, \\\&quot;Amet consectetur adipiscing elit sed\\\&quot;),\\n\\n    # PT (Preferred Terms)\\n    (\\\&quot;pt\\\&quot;, \\\&quot;40000001\\\&quot;, \\\&quot;Do eiusmod tempor incididunt ut\\\&quot;),\\n    (\\\&quot;pt\\\&quot;, \\\&quot;40000002\\\&quot;, \\\&quot;Labore et dolore magna aliqua\\\&quot;),\\n    (\\\&quot;pt\\\&quot;, \\\&quot;40000003\\\&quot;, \\\&quot;Enim ad minim veniam quis nostrud\\\&quot;),\\n    (\\\&quot;pt\\\&quot;, \\\&quot;40000004\\\&quot;, \\\&quot;Exercitation ullamco laboris nisi\\\&quot;),\\n    (\\\&quot;pt\\\&quot;, \\\&quot;40000005\\\&quot;, \\\&quot;Ut aliquip ex ea commodo consequat\\\&quot;),\\n\\n    # LLT (Lowest Level Terms)\\n    (\\\&quot;llt\\\&quot;, \\\&quot;20000001\\\&quot;, \\\&quot;Reprehenderit in voluptate velit esse\\\&quot;),\\n    (\\\&quot;llt\\\&quot;, \\\&quot;20000002\\\&quot;, \\\&quot;Cillum dolore eu fugiat nulla\\\&quot;),\\n    (\\\&quot;llt\\\&quot;, \\\&quot;20000003\\\&quot;, \\\&quot;Pariatur excepteur sint occaecat\\\&quot;),\\n    (\\\&quot;llt\\\&quot;, \\\&quot;20000004\\\&quot;, \\\&quot;Cupidatat non proident sunt in\\\&quot;),\\n    (\\\&quot;llt\\\&quot;, \\\&quot;20000005\\\&quot;, \\\&quot;Culpa qui officia deserunt mollit\\\&quot;),\\n]\&quot;, \&quot;old_str_start_line_number\&quot;: 8, \&quot;old_str_end_line_number\&quot;: 43}&quot;,&quot;mcp_server_name&quot;:&quot;&quot;,&quot;mcp_tool_name&quot;:&quot;&quot;}},{&quot;id&quot;:0,&quot;type&quot;:0,&quot;content&quot;:&quot;Now I need to update the TEST_TERMS to match the actual codes and names from the test data files. Let me replace the entire TEST_TERMS list:\n&quot;},{&quot;id&quot;:2,&quot;type&quot;:2,&quot;content&quot;:&quot;&quot;},{&quot;id&quot;:3,&quot;type&quot;:3,&quot;content&quot;:&quot;&quot;}],&quot;seen_state&quot;:&quot;seen&quot;,&quot;structured_request_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:1,&quot;tool_result_node&quot;:{&quot;content&quot;:&quot;Note:\nView range expanded to meet minimum size of 500 lines. End line adjusted to last line of file (106).\n\nHere's the result of running `cat -n` on src/meddra_graph/tests/test_meddra_loader.py:\n     8\tTEST_TERMS = [\n     9\t    # SOC (System Organ Classes)\n    10\t    (\&quot;soc\&quot;, \&quot;10001000\&quot;, \&quot;Lorem ipsum dolor sit amet\&quot;),\n    11\t    (\&quot;soc\&quot;, \&quot;10002000\&quot;, \&quot;Consectetur adipiscing elit\&quot;),\n    12\t    (\&quot;soc\&quot;, \&quot;10003000\&quot;, \&quot;Sed do eiusmod tempor incididunt\&quot;),\n    13\t    (\&quot;soc\&quot;, \&quot;10004000\&quot;, \&quot;Ut labore et dolore magna aliqua\&quot;),\n    14\t    (\&quot;soc\&quot;, \&quot;10005000\&quot;, \&quot;Enim ad minim veniam quis\&quot;),\n    15\t\n    16\t    # HLGT (High Level Group Terms)\n    17\t    (\&quot;hlgt\&quot;, \&quot;10001001\&quot;, \&quot;Nostrud exercitation ullamco\&quot;),\n    18\t    (\&quot;hlgt\&quot;, \&quot;10001002\&quot;, \&quot;Laboris nisi ut aliquip ex ea\&quot;),\n    19\t    (\&quot;hlgt\&quot;, \&quot;10002001\&quot;, \&quot;Commodo consequat duis aute irure\&quot;),\n    20\t    (\&quot;hlgt\&quot;, \&quot;10002002\&quot;, \&quot;Dolor in reprehenderit in voluptate\&quot;),\n    21\t    (\&quot;hlgt\&quot;, \&quot;10003001\&quot;, \&quot;Velit esse cillum dolore eu fugiat\&quot;),\n    22\t\n    23\t    # HLT (High Level Terms)\n    24\t    (\&quot;hlt\&quot;, \&quot;10001101\&quot;, \&quot;Nulla pariatur excepteur sint occaecat\&quot;),\n    25\t    (\&quot;hlt\&quot;, \&quot;10001102\&quot;, \&quot;Cupidatat non proident sunt in culpa\&quot;),\n    26\t    (\&quot;hlt\&quot;, \&quot;10001203\&quot;, \&quot;Qui officia deserunt mollit anim id\&quot;),\n    27\t    (\&quot;hlt\&quot;, \&quot;10002101\&quot;, \&quot;Est laborum lorem ipsum dolor sit\&quot;),\n    28\t    (\&quot;hlt\&quot;, \&quot;10002102\&quot;, \&quot;Amet consectetur adipiscing elit sed\&quot;),\n    29\t\n    30\t    # PT (Preferred Terms)\n    31\t    (\&quot;pt\&quot;, \&quot;10001201\&quot;, \&quot;Do eiusmod tempor incididunt ut\&quot;),\n    32\t    (\&quot;pt\&quot;, \&quot;10001202\&quot;, \&quot;Labore et dolore magna aliqua\&quot;),\n    33\t    (\&quot;pt\&quot;, \&quot;10001302\&quot;, \&quot;Enim ad minim veniam quis nostrud\&quot;),\n    34\t    (\&quot;pt\&quot;, \&quot;10002201\&quot;, \&quot;Exercitation ullamco laboris nisi\&quot;),\n    35\t    (\&quot;pt\&quot;, \&quot;10002202\&quot;, \&quot;Ut aliquip ex ea commodo consequat\&quot;),\n    36\t\n    37\t    # LLT (Lowest Level Terms) from file\n    38\t    (\&quot;llt\&quot;, \&quot;10001301\&quot;, \&quot;Reprehenderit in voluptate velit esse\&quot;),\n    39\t    (\&quot;llt\&quot;, \&quot;10001302\&quot;, \&quot;Cillum dolore eu fugiat nulla pariatur\&quot;),\n    40\t    (\&quot;llt\&quot;, \&quot;10001303\&quot;, \&quot;Pariatur excepteur sint occaecat cupidatat\&quot;),\n    41\t    (\&quot;llt\&quot;, \&quot;10001401\&quot;, \&quot;Cupidatat non proident sunt in culpa qui\&quot;),\n    42\t    (\&quot;llt\&quot;, \&quot;10002301\&quot;, \&quot;Officia deserunt mollit anim id est\&quot;),\n    43\t]\n    44\t\n    45\tNUMBER_OF_TEST_TERMS = len(TEST_TERMS)\n    46\tNUMBER_OF_TEST_EDGES = 24\n    47\t\n    48\t\n    49\tdef _generate_test_ids() -&gt; list[str]:\n    50\t    \&quot;\&quot;\&quot;Generate test IDs like soc1, soc2, hlgt1, hlgt2, etc.\&quot;\&quot;\&quot;\n    51\t    term_counts: dict[str, int] = {}\n    52\t    ids: list[str] = []\n    53\t    for term_level, _, _ in TEST_TERMS:\n    54\t        term_counts[term_level] = term_counts.get(term_level, 0) + 1\n    55\t        ids.append(f\&quot;{term_level}{term_counts[term_level]}\&quot;)\n    56\t    return ids\n    57\t\n    58\t\n    59\t@pytest.fixture(name=\&quot;meddra_data\&quot;)\n    60\tdef meddra_data_fixture() -&gt; MedDRAData:\n    61\t    return MedDRALoader.load(Path(__file__).parent / \&quot;test_data\&quot;)\n    62\t\n    63\t\n    64\tdef test_loading_passes() -&gt; None:\n    65\t    MedDRALoader.load(Path(__file__).parent / \&quot;test_data\&quot;)\n    66\t\n    67\t\n    68\tdef test_version_loaded(meddra_data: MedDRAData) -&gt; None:\n    69\t    assert meddra_data.version == \&quot;99.0 TestLang Dummy Data Release\&quot;\n    70\t\n    71\t\n    72\tdef test_term_levels_loaded(meddra_data: MedDRAData) -&gt; None:\n    73\t    df = pd.DataFrame.from_records(list(meddra_data.terms.values()))\n    74\t    assert len(df[\&quot;term_type\&quot;].unique()) == 5\n    75\t    assert set(df[\&quot;term_type\&quot;].unique()) == {\&quot;soc\&quot;, \&quot;hlgt\&quot;, \&quot;hlt\&quot;, \&quot;pt\&quot;, \&quot;llt\&quot;}\n    76\t\n    77\t\n    78\tdef test_schema_levels_loaded(meddra_data: MedDRAData) -&gt; None:\n    79\t    assert len(meddra_data.schema) == 12\n    80\t    assert all(fn in meddra_data.schema for fn in [\&quot;soc.asc\&quot;, \&quot;hlgt.asc\&quot;, \&quot;hlt.asc\&quot;, \&quot;pt.asc\&quot;, \&quot;llt.asc\&quot;])\n    81\t\n    82\t\n    83\tdef test_edges_loaded(meddra_data: MedDRAData) -&gt; None:\n    84\t    assert len(meddra_data.edges) == NUMBER_OF_TEST_EDGES\n    85\t\n    86\t\n    87\tdef test_terms_loaded(meddra_data: MedDRAData) -&gt; None:\n    88\t    assert len(meddra_data.terms) == NUMBER_OF_TEST_TERMS\n    89\t\n    90\t\n    91\tdef test_graph_nodes_loaded(meddra_data: MedDRAData) -&gt; None:\n    92\t    assert len(meddra_data.to_graph().nodes()) == NUMBER_OF_TEST_TERMS\n    93\t\n    94\t\n    95\tdef test_graph_edges_loaded(meddra_data: MedDRAData) -&gt; None:\n    96\t    assert len(meddra_data.to_graph().edges()) == NUMBER_OF_TEST_EDGES\n    97\t\n    98\t\n    99\tdef test_term_definitions_correct(meddra_data: MedDRAData) -&gt; None:\n   100\t    \&quot;\&quot;\&quot;Test that each term has the correct definition/name in the loaded data.\&quot;\&quot;\&quot;\n   101\t    g = meddra_data.to_graph()\n   102\t    for term_type, term_code, expected_name in TEST_TERMS:\n   103\t        assert g.nodes[term_code][f\&quot;{term_type}_code\&quot;] == term_code\n   104\t        assert g.nodes[term_code][f\&quot;{term_type}_name\&quot;] == expected_name\n   105\t        assert g.nodes[term_code][\&quot;term_type\&quot;] == term_type\n   106\t\nTotal lines in file: 106\n&quot;,&quot;is_error&quot;:false,&quot;request_id&quot;:&quot;&quot;,&quot;tool_use_id&quot;:&quot;toolu_vrtx_01J6i3xyonjvLjZLwZsvhkBS&quot;}},{&quot;id&quot;:2,&quot;type&quot;:4,&quot;ide_state_node&quot;:{&quot;workspaceFolders&quot;:[{&quot;repositoryRoot&quot;:&quot;/Users/tcwullsc/Devel/AAI/SPRINT/modules/meddra-loader&quot;,&quot;folderRoot&quot;:&quot;/Users/tcwullsc/Devel/AAI/SPRINT/modules/meddra-loader&quot;}],&quot;workspaceFoldersUnchanged&quot;:false,&quot;currentTerminal&quot;:{&quot;terminalId&quot;:137,&quot;currentWorkingDirectory&quot;:&quot;/Users/tcwullsc/Devel/AAI/SPRINT/modules/meddra-loader&quot;}}}],&quot;timestamp&quot;:&quot;2025-06-25T11:28:34.032Z&quot;,&quot;response_text&quot;:&quot;Now I need to update the TEST_TERMS to match the actual codes and names from the test data files. Let me replace the entire TEST_TERMS list:\n&quot;,&quot;workspace_file_chunks&quot;:[]},{&quot;request_id&quot;:&quot;d96b17c1-f6ec-40a4-93e4-e373b17287f9&quot;,&quot;status&quot;:&quot;cancelled&quot;,&quot;chatItemType&quot;:&quot;agentic-turn-delimiter&quot;},{&quot;request_id&quot;:&quot;83cddc54-664e-4e5c-a14d-f2455f68203a&quot;,&quot;status&quot;:&quot;cancelled&quot;,&quot;chatItemType&quot;:&quot;agentic-turn-delimiter&quot;}],&quot;feedbackStates&quot;:{&quot;temp-fe-fc36dc9d-1b8e-40f2-bd98-46274bf45459&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-4c400a33-75f5-47b5-ac6a-296db43467a8&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-a9bee4d0-785e-4fb0-9d7a-1da54a5004c4&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-e6df565e-6ca7-40bd-ae5d-e1daac6f453a&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-ec92b64b-cd3f-4f0f-9aa3-7cdd76319628&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-dda44068-8df8-465d-8f31-f8cf57ac3cf9&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-e1e2db5b-ad45-4cc7-9dde-d301d6171d9f&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-4331b11d-5767-4cb1-ab40-0c46891e5fef&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-9a9de766-d8a7-4634-b485-d9d24d3c6a1d&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-115c2548-d381-4d69-ad2a-38d8f4272bae&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-da2a998b-a12f-4ec6-bd0c-a2f1bb85a6dc&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-ef031d57-19aa-426a-9d8c-ba9ffdeebe8b&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-01a422c6-799c-4fc1-9cd7-ddc77bbeaa8c&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-c5297be1-918f-40da-bd51-793894a15fec&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-53a0025c-d306-45ac-82da-f9dfddc8dc6c&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-d1c7c909-14b0-48f8-9e96-72c65f0b24ee&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-1ecde75a-599c-4a92-a72e-edc37e51f10f&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-37c6593c-77d6-466e-a272-d6837c05d41f&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-696447ba-f56c-4662-88a4-d7a9ad9893ed&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-ae69d32d-fc9c-4aba-a9f4-7a5eef5ff62f&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-b0fc9a21-1783-4724-875b-ce99820fc4e9&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-53e725b7-e7a6-482b-b96d-a76e987dadec&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-f90e0d0d-ac62-46ac-ae90-a97d8745c05c&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-9e87a42b-a3a9-46e3-bcd5-d024d0f98d1f&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-d44856c6-cfaa-4b03-bf11-107674ec404d&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-a3bcfda0-6300-48e9-a0fb-8354bcb33d8e&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-0ff471ab-9e51-4347-bcf3-aa5127b5fe38&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-c283b306-f84f-44a1-8819-034cccc8cc48&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-2759328d-ae4f-49f9-994f-cea956f1a6bd&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-832bbccd-371e-4d9c-803e-cc5356809525&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-565f7da7-888e-4a96-8a03-aa9180efdcc0&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-fc59f7dd-fe4d-47ae-96c1-69a76a1e1e39&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-38a1ad65-d7c4-4c2a-a71f-df333eaf8222&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-d9ab973d-9ec4-41a2-8700-567e498d82bd&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-f4cd1dcc-c943-42e4-aac5-9375e0425732&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-42974900-6f99-4c0e-a49b-90a57c75a7ae&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-c15e022f-be53-4767-aabf-16b065b6adcd&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-9d41e94b-0796-42b5-a454-5940b5d6d2d2&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-d9d95e85-2beb-4ce5-a148-c0fb0cf9106a&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-1521bff7-8719-4f71-a119-6c6e51c72f0f&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-9def96e5-7eb7-40b9-9cbf-c946b87b6b9c&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-23e7f25f-fabd-4709-a492-771fd6c6f435&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-5c6b5406-96ed-45bc-ac1f-da59315dbc28&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-45eb58e5-f1c8-452f-a295-86aac1787e52&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-d9e6ac79-c6ec-4b17-bc08-8df1996a307a&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-4076b2c9-9755-4e8e-a5d2-b8f66fb9bd10&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-bd2714eb-93d6-4b33-9517-4301a30dafcc&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-47f43bd0-1bcf-40bc-8fd2-368cb626c7f9&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-620f1a6d-c209-4c22-9a50-3beae90185e5&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-4b5a2d8e-1539-4935-93c4-0c6114330c16&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;}},&quot;toolUseStates&quot;:{&quot;53eac6a5-ed18-4ec3-9921-f462c6d2938e;toolu_vrtx_01Lt232W8MyGYAb6mW62fvKh&quot;:{&quot;requestId&quot;:&quot;53eac6a5-ed18-4ec3-9921-f462c6d2938e&quot;,&quot;toolUseId&quot;:&quot;toolu_vrtx_01Lt232W8MyGYAb6mW62fvKh&quot;,&quot;phase&quot;:5,&quot;result&quot;:{&quot;text&quot;:&quot;Here's the result of running `cat -n` on README.md:\n     1\t\n     2\t\n     3\t# MedDRA Loader\n     4\t\n     5\t[![CI](https://github.com/wullli/meddra-loader/workflows/CI/badge.svg)](https://github.com/wullli/meddra-loader/actions/workflows/ci.yml)\n     6\t[![codecov](https://codecov.io/gh/wullli/meddra-loader/branch/main/graph/badge.svg)](https://codecov.io/gh/wullli/meddra-loader)\n     7\t\n     8\tDISCLAIMER: This software does not give you access to MedDRA and you need a valid subscription to work with MedDRA data: https://www.meddra.org/. It merely provides tooling for loading the MedDRA data and hierarchy with python into a networkx graph. It is only intended for use with legitimately licensed MedDRA data and users are responsible for obtaining a valid license from the MSSO.\n     9\t\nTotal lines in file: 9\n&quot;,&quot;isError&quot;:false,&quot;requestId&quot;:&quot;&quot;}},&quot;241e3d9f-af68-47a2-a308-104d3d56474c;toolu_vrtx_01KXnAsoFakoAiiVsCTtoM1h&quot;:{&quot;requestId&quot;:&quot;241e3d9f-af68-47a2-a308-104d3d56474c&quot;,&quot;toolUseId&quot;:&quot;toolu_vrtx_01KXnAsoFakoAiiVsCTtoM1h&quot;,&quot;phase&quot;:5,&quot;result&quot;:{&quot;text&quot;:&quot;Here's the files and directories up to 2 levels deep in ., excluding hidden items:\n./LICENSE\n./README.md\n./coverage.xml\n./modules\n./modules/meddra-loader\n./pyproject.toml\n./scripts\n./scripts/run_ci_checks.sh\n./src\n./src/meddra_loader\n./src/meddra_loader.egg-info\n./src/resources\n&quot;,&quot;isError&quot;:false,&quot;requestId&quot;:&quot;&quot;}},&quot;7807b05b-022f-4f32-b98e-929c88a2ad8a;toolu_vrtx_01E36dwdztV7uQVkxoEyf8Q1&quot;:{&quot;requestId&quot;:&quot;7807b05b-022f-4f32-b98e-929c88a2ad8a&quot;,&quot;toolUseId&quot;:&quot;toolu_vrtx_01E36dwdztV7uQVkxoEyf8Q1&quot;,&quot;phase&quot;:5,&quot;result&quot;:{&quot;text&quot;:&quot;Here's the files and directories up to 2 levels deep in src/meddra_loader, excluding hidden items:\nsrc/meddra_loader/__init__.py\nsrc/meddra_loader/__pycache__\nsrc/meddra_loader/__pycache__/__init__.cpython-311.pyc\nsrc/meddra_loader/__pycache__/__init__.cpython-312.pyc\nsrc/meddra_loader/__pycache__/meddra_digraph.cpython-311.pyc\nsrc/meddra_loader/__pycache__/meddra_digraph.cpython-312.pyc\nsrc/meddra_loader/meddra_digraph.py\nsrc/meddra_loader/resources\nsrc/meddra_loader/resources/meddra_schema_v28.json\nsrc/meddra_loader/tests\nsrc/meddra_loader/tests/__init__.py\nsrc/meddra_loader/tests/__pycache__\nsrc/meddra_loader/tests/test_data\nsrc/meddra_loader/tests/test_meddra_digraph.py\n&quot;,&quot;isError&quot;:false,&quot;requestId&quot;:&quot;&quot;}},&quot;bd158901-ddaf-4ceb-990c-b5503831e6d9;toolu_vrtx_01FtNkD49C3rXDzXYixagFPc&quot;:{&quot;requestId&quot;:&quot;bd158901-ddaf-4ceb-990c-b5503831e6d9&quot;,&quot;toolUseId&quot;:&quot;toolu_vrtx_01FtNkD49C3rXDzXYixagFPc&quot;,&quot;phase&quot;:5,&quot;result&quot;:{&quot;text&quot;:&quot;Here's the result of running `cat -n` on src/meddra_loader/__init__.py:\n     1\tVERSION = \&quot;0.0.1\&quot;\n     2\t\nTotal lines in file: 2\n&quot;,&quot;isError&quot;:false,&quot;requestId&quot;:&quot;&quot;}},&quot;51f47244-12f5-488c-a398-fcde94214be1;toolu_vrtx_01G8GDD34nDGgALrQTbHjNTd&quot;:{&quot;requestId&quot;:&quot;51f47244-12f5-488c-a398-fcde94214be1&quot;,&quot;toolUseId&quot;:&quot;toolu_vrtx_01G8GDD34nDGgALrQTbHjNTd&quot;,&quot;phase&quot;:5,&quot;result&quot;:{&quot;text&quot;:&quot;Here's the result of running `cat -n` on src/meddra_loader/meddra_digraph.py:\n     1\timport json\n     2\tfrom pathlib import Path\n     3\tfrom typing import Any, Union, cast\n     4\t\n     5\timport networkx as nx\n     6\t\n     7\tDEFAULT_SCHEMA_PATH = Path(__file__).parent / \&quot;resources\&quot; / \&quot;meddra_schema_v28.json\&quot;\n     8\t\n     9\t\n    10\tclass MedDRADiGraph(nx.DiGraph):\n    11\t\n    12\t    def __init__(self, *args: Any, **kwargs: Any) -&gt; None:\n    13\t        super().__init__(*args, **kwargs)\n    14\t        self.schema: dict[str, dict[str, str]] = {}\n    15\t        self.term_levels: set[str] = set()\n    16\t        self.edges: set[tuple[str, ...]] = set()\n    17\t        self.terms: dict[str, dict[str, Any]] = {}\n    18\t        self.meddra_version: Union[str, None] = None\n    19\t\n    20\t    def load(\n    21\t        self, meddra_directory_path: Union[str, Path], schema_path: Union[str, Path] = DEFAULT_SCHEMA_PATH\n    22\t    ) -&gt; None:\n    23\t        meddra_directory_path = Path(meddra_directory_path)\n    24\t        self.schema = self._load_schema(schema_path)\n    25\t        self.meddra_version = \&quot; \&quot;.join(self._load_file(meddra_directory_path / \&quot;meddra_release.asc\&quot;)[0]).strip()\n    26\t        assert meddra_directory_path.is_dir()\n    27\t        self.term_levels = self._get_term_levels(meddra_directory_path)\n    28\t        edges = set()\n    29\t        self.terms = {}\n    30\t        for file_path in meddra_directory_path.glob(\&quot;*.asc\&quot;):\n    31\t            if self._is_edge_file(file_path):\n    32\t                edges.update(self._load_file(file_path))\n    33\t\n    34\t        for file_path in meddra_directory_path.glob(\&quot;*.asc\&quot;):\n    35\t            if self._is_term_file(file_path):\n    36\t                data = self._load_file(file_path)\n    37\t                file_name = file_path.name\n    38\t                node_type = file_path.name.split(\&quot;.\&quot;)[0]\n    39\t\n    40\t                # Process each row of data\n    41\t                for row in data:\n    42\t                    if len(row) &gt;= len(self.schema[file_name]):\n    43\t                        # Create a dictionary for this term using the schema\n    44\t                        term_dict = dict(zip(self.schema[file_name].keys(), row))\n    45\t                        term_dict[\&quot;node_type\&quot;] = node_type\n    46\t\n    47\t                        # Use the first field as the key (usually the code)\n    48\t                        first_field = list(self.schema[file_name].keys())[0]\n    49\t                        term_key = term_dict[first_field]\n    50\t                        self.terms[term_key] = term_dict\n    51\t        self.add_edges_from(edges)\n    52\t        self.add_nodes_from(self.terms.keys())\n    53\t        nx.set_node_attributes(self, self.terms)\n    54\t\n    55\t    def _load_schema(self, schema_path: Union[str, Path]) -&gt; dict[str, dict[str, str]]:\n    56\t        with open(schema_path, \&quot;r\&quot;, encoding=\&quot;utf-8\&quot;) as f:\n    57\t            return cast(dict[str, dict[str, str]], json.load(f))\n    58\t\n    59\t    def _get_term_levels(self, meddra_directory_path: Path) -&gt; set[str]:\n    60\t        term_levels = set()\n    61\t        for file_path in meddra_directory_path.glob(\&quot;*.asc\&quot;):\n    62\t            file_name = file_path.name.split(\&quot;.\&quot;)[0]\n    63\t            if not \&quot;_\&quot; in file_name:\n    64\t                term_levels.add(file_name)\n    65\t        return term_levels\n    66\t\n    67\t    def _is_term_file(self, file_path: Path) -&gt; bool:\n    68\t        return file_path.name.split(\&quot;.\&quot;)[0] in self.term_levels\n    69\t\n    70\t    def _is_edge_file(self, file_path: Path) -&gt; bool:\n    71\t        if not \&quot;_\&quot; in file_path.name:\n    72\t            return False\n    73\t        try:\n    74\t            t0, t1 = file_path.name.split(\&quot;.\&quot;)[0].split(\&quot;_\&quot;)\n    75\t            return t0 in self.term_levels and t1 in self.term_levels\n    76\t        except (ValueError, IndexError):\n    77\t            return False\n    78\t\n    79\t    def _load_file(self, file_path: Path) -&gt; list[tuple[str, ...]]:\n    80\t        lines = []\n    81\t        with open(file_path, \&quot;r\&quot;, encoding=\&quot;utf-8\&quot;) as f:\n    82\t            for line in f:\n    83\t                lines.append(self._load_line(line))\n    84\t        return lines\n    85\t\n    86\t    def _load_line(self, line: str) -&gt; tuple[str, ...]:\n    87\t        return tuple(line.strip().split(\&quot;$\&quot;))\n    88\t\nTotal lines in file: 88\n&quot;,&quot;isError&quot;:false,&quot;requestId&quot;:&quot;&quot;}},&quot;f76c217a-e547-4da5-8640-7e80408b378e;toolu_vrtx_01EKyPRS6VSako19dVXepoM7&quot;:{&quot;requestId&quot;:&quot;f76c217a-e547-4da5-8640-7e80408b378e&quot;,&quot;toolUseId&quot;:&quot;toolu_vrtx_01EKyPRS6VSako19dVXepoM7&quot;,&quot;phase&quot;:5,&quot;result&quot;:{&quot;text&quot;:&quot;Here's the result of running `cat -n` on pyproject.toml:\n     1\t[build-system]\n     2\trequires = [\n     3\t    \&quot;setuptools&gt;=64\&quot;,\n     4\t    \&quot;wheel\&quot;\n     5\t]\n     6\tbuild-backend = \&quot;setuptools.build_meta\&quot;\n     7\t\n     8\t[project]\n     9\tname = \&quot;meddra-loader\&quot;\n    10\tversion = \&quot;0.1.0\&quot;\n    11\tauthors = [\n    12\t    {name = \&quot;Pascal Wullschleger\&quot;}\n    13\t]\n    14\tdescription = \&quot;Package for loading and processing MedDRA data\&quot;\n    15\treadme = \&quot;README.md\&quot;\n    16\trequires-python = \&quot;&gt;=3.9\&quot;\n    17\tclassifiers = [\n    18\t    \&quot;Programming Language :: Python :: 3\&quot;,\n    19\t    \&quot;License :: OSI Approved :: MIT License\&quot;,\n    20\t    \&quot;Operating System :: OS Independent\&quot;\n    21\t]\n    22\tdependencies = [\n    23\t    \&quot;networkx\&quot;,\n    24\t    \&quot;pandas\&quot;\n    25\t]\n    26\t\n    27\t[project.optional-dependencies]\n    28\tdev = [\n    29\t    \&quot;pytest&gt;=7.0\&quot;,\n    30\t    \&quot;pytest-cov&gt;=4.0\&quot;,\n    31\t    \&quot;black&gt;=23.0\&quot;,\n    32\t    \&quot;isort&gt;=5.0\&quot;,\n    33\t    \&quot;mypy&gt;=1.0\&quot;,\n    34\t    \&quot;pylint&gt;=2.15\&quot;,\n    35\t    \&quot;coverage&gt;=7.0\&quot;\n    36\t]\n    37\t\n    38\t[tool.setuptools]\n    39\tpackage-dir = {\&quot;\&quot; = \&quot;src\&quot;}\n    40\t\n    41\t[tool.setuptools.packages.find]\n    42\twhere = [\&quot;src\&quot;]\n    43\t\n    44\t[tool.black]\n    45\tline-length = 120\n    46\ttarget-version = ['py39']\n    47\t\n    48\t[tool.isort]\n    49\tprofile = \&quot;black\&quot;\n    50\tline_length = 120\n    51\t\n    52\t[tool.mypy]\n    53\tpython_version = \&quot;3.9\&quot;\n    54\twarn_return_any = true\n    55\twarn_unused_configs = true\n    56\tdisallow_untyped_defs = true\n    57\tdisallow_incomplete_defs = true\n    58\tcheck_untyped_defs = true\n    59\tdisallow_untyped_decorators = true\n    60\tno_implicit_optional = true\n    61\twarn_redundant_casts = true\n    62\twarn_unused_ignores = true\n    63\twarn_no_return = true\n    64\twarn_unreachable = true\n    65\tstrict_equality = true\n    66\t\n    67\t[tool.pylint.messages_control]\n    68\tdisable = [\n    69\t    \&quot;missing-docstring\&quot;,\n    70\t    \&quot;too-few-public-methods\&quot;,\n    71\t    \&quot;invalid-name\&quot;,\n    72\t    \&quot;line-too-long\&quot;\n    73\t]\n    74\t\n    75\t[tool.pylint.format]\n    76\tmax-line-length = 120\n    77\t\n    78\t[tool.pytest.ini_options]\n    79\ttestpaths = [\&quot;src/meddra_loader/tests\&quot;]\n    80\tpython_files = [\&quot;test_*.py\&quot;]\n    81\tpython_classes = [\&quot;Test*\&quot;]\n    82\tpython_functions = [\&quot;test_*\&quot;]\n    83\taddopts = \&quot;--strict-markers --strict-config\&quot;\n    84\t\n    85\t[tool.coverage.run]\n    86\tsource = [\&quot;src/meddra_loader\&quot;]\n    87\tomit = [\&quot;*/tests/*\&quot;]\n    88\t\n    89\t[tool.coverage.report]\n    90\texclude_lines = [\n    91\t    \&quot;pragma: no cover\&quot;,\n    92\t    \&quot;def __repr__\&quot;,\n    93\t    \&quot;raise AssertionError\&quot;,\n    94\t    \&quot;raise NotImplementedError\&quot;\n    95\t]\n    96\t\nTotal lines in file: 96\n&quot;,&quot;isError&quot;:false,&quot;requestId&quot;:&quot;&quot;}},&quot;8aa91ad8-6b29-4983-a4df-8ac98ec9db02;toolu_vrtx_01N2F8DJCqpM2UzyewuqG6wv&quot;:{&quot;requestId&quot;:&quot;8aa91ad8-6b29-4983-a4df-8ac98ec9db02&quot;,&quot;toolUseId&quot;:&quot;toolu_vrtx_01N2F8DJCqpM2UzyewuqG6wv&quot;,&quot;phase&quot;:5,&quot;result&quot;:{&quot;text&quot;:&quot;Here's the result of running `cat -n` on src/meddra_loader/tests/test_meddra_digraph.py:\n     1\tfrom pathlib import Path\n     2\t\n     3\timport pytest\n     4\t\n     5\tfrom meddra_loader.meddra_digraph import MedDRADiGraph\n     6\t\n     7\tTEST_TERMS = [\n     8\t    # SOC (System Organ Class) test cases\n     9\t    (\&quot;soc\&quot;, \&quot;10001000\&quot;, \&quot;Lorem ipsum dolor sit amet\&quot;),\n    10\t    (\&quot;soc\&quot;, \&quot;10002000\&quot;, \&quot;Consectetur adipiscing elit\&quot;),\n    11\t    (\&quot;soc\&quot;, \&quot;10003000\&quot;, \&quot;Sed do eiusmod tempor incididunt\&quot;),\n    12\t    # HLGT (High Level Group Term) test cases\n    13\t    (\&quot;hlgt\&quot;, \&quot;10001001\&quot;, \&quot;Nostrud exercitation ullamco\&quot;),\n    14\t    (\&quot;hlgt\&quot;, \&quot;10001002\&quot;, \&quot;Laboris nisi ut aliquip ex ea\&quot;),\n    15\t    (\&quot;hlgt\&quot;, \&quot;10002001\&quot;, \&quot;Commodo consequat duis aute irure\&quot;),\n    16\t    # HLT (High Level Term) test cases\n    17\t    (\&quot;hlt\&quot;, \&quot;10001101\&quot;, \&quot;Nulla pariatur excepteur sint occaecat\&quot;),\n    18\t    (\&quot;hlt\&quot;, \&quot;10001102\&quot;, \&quot;Cupidatat non proident sunt in culpa\&quot;),\n    19\t    (\&quot;hlt\&quot;, \&quot;10002101\&quot;, \&quot;Est laborum lorem ipsum dolor sit\&quot;),\n    20\t    # LLT (Lowest Level Term) test cases - using codes that don't conflict with mdhier.asc\n    21\t    (\&quot;llt\&quot;, \&quot;10001302\&quot;, \&quot;Cillum dolore eu fugiat nulla\&quot;),\n    22\t    (\&quot;llt\&quot;, \&quot;10001303\&quot;, \&quot;Pariatur excepteur sint occaecat\&quot;),\n    23\t    (\&quot;llt\&quot;, \&quot;10002302\&quot;, \&quot;Anim id est laborum sed ut\&quot;),\n    24\t]\n    25\t\n    26\t\n    27\t@pytest.fixture(name=\&quot;meddra_digraph\&quot;)\n    28\tdef meddra_digraph_fixture() -&gt; MedDRADiGraph:\n    29\t    return MedDRADiGraph()\n    30\t\n    31\t\n    32\t@pytest.fixture(name=\&quot;test_data_path\&quot;)\n    33\tdef test_data_path_fixture() -&gt; Path:\n    34\t    return Path(__file__).parent / \&quot;test_data\&quot;\n    35\t\n    36\t\n    37\tdef test_term_levels_loaded(meddra_digraph: MedDRADiGraph, test_data_path: Path) -&gt; None:\n    38\t    meddra_digraph.load(test_data_path)\n    39\t    assert meddra_digraph.meddra_version is not None\n    40\t    assert len(meddra_digraph.term_levels) == 6\n    41\t    assert set(meddra_digraph.term_levels) == {\&quot;soc\&quot;, \&quot;hlgt\&quot;, \&quot;hlt\&quot;, \&quot;pt\&quot;, \&quot;llt\&quot;, \&quot;mdhier\&quot;}\n    42\t\n    43\t\n    44\tdef test_schema_levels_loaded(meddra_digraph: MedDRADiGraph, test_data_path: Path) -&gt; None:\n    45\t    meddra_digraph.load(test_data_path)\n    46\t    assert len(meddra_digraph.schema) == 12\n    47\t    # Check that core term files are in schema\n    48\t    assert \&quot;soc.asc\&quot; in meddra_digraph.schema\n    49\t    assert \&quot;hlgt.asc\&quot; in meddra_digraph.schema\n    50\t    assert \&quot;hlt.asc\&quot; in meddra_digraph.schema\n    51\t    assert \&quot;pt.asc\&quot; in meddra_digraph.schema\n    52\t    assert \&quot;llt.asc\&quot; in meddra_digraph.schema\n    53\t    assert \&quot;mdhier.asc\&quot; in meddra_digraph.schema\n    54\t\n    55\t\n    56\tdef test_edges_loaded(meddra_digraph: MedDRADiGraph, test_data_path: Path) -&gt; None:\n    57\t    meddra_digraph.load(test_data_path)\n    58\t    assert len(meddra_digraph.edges) &gt;= 0\n    59\t\n    60\t\n    61\tdef test_terms_loaded(meddra_digraph: MedDRADiGraph, test_data_path: Path) -&gt; None:\n    62\t    meddra_digraph.load(test_data_path)\n    63\t    assert len(meddra_digraph.terms) &gt; 1\n    64\t\n    65\t\n    66\tdef test_nodes_loaded(meddra_digraph: MedDRADiGraph, test_data_path: Path) -&gt; None:\n    67\t    meddra_digraph.load(test_data_path)\n    68\t    assert len(meddra_digraph.nodes) &gt; 1\n    69\t\n    70\t\n    71\t# Generate IDs automatically from the test parameters\n    72\tdef _generate_test_ids() -&gt; list[str]:\n    73\t    \&quot;\&quot;\&quot;Generate test IDs like soc1, soc2, hlgt1, hlgt2, etc.\&quot;\&quot;\&quot;\n    74\t    term_counts: dict[str, int] = {}\n    75\t    ids: list[str] = []\n    76\t    for term_level, _, _ in TEST_TERMS:\n    77\t        term_counts[term_level] = term_counts.get(term_level, 0) + 1\n    78\t        ids.append(f\&quot;{term_level}{term_counts[term_level]}\&quot;)\n    79\t    return ids\n    80\t\n    81\t\n    82\t@pytest.mark.parametrize(\&quot;term_level, term_code, expected_name\&quot;, TEST_TERMS, ids=_generate_test_ids())\n    83\tdef test_term_definitions_correct(\n    84\t    meddra_digraph: MedDRADiGraph, test_data_path: Path, term_level: str, term_code: str, expected_name: str\n    85\t) -&gt; None:\n    86\t    \&quot;\&quot;\&quot;Test that each term level has the correct definition/name in the test data.\&quot;\&quot;\&quot;\n    87\t    meddra_digraph.load(test_data_path)\n    88\t\n    89\t    assert term_code in meddra_digraph.terms, f\&quot;Term {term_code} not found in loaded terms\&quot;\n    90\t\n    91\t    term_data = meddra_digraph.terms[term_code]\n    92\t    assert term_data[\&quot;node_type\&quot;] == term_level, f\&quot;Expected node_type {term_level}, got {term_data['node_type']}\&quot;\n    93\t\n    94\t    name_field = f\&quot;{term_level}_name\&quot;\n    95\t    assert name_field in term_data, f\&quot;Name field {name_field} not found in term data\&quot;\n    96\t    assert (\n    97\t        term_data[name_field] == expected_name\n    98\t    ), f\&quot;Expected {name_field} to be '{expected_name}', got '{term_data[name_field]}'\&quot;\n    99\t\nTotal lines in file: 99\n&quot;,&quot;isError&quot;:false,&quot;requestId&quot;:&quot;&quot;}},&quot;51b60fc5-535e-4fab-b13b-02d456362ccc;toolu_vrtx_014ivm2nomQJSAacXLYVjTgw&quot;:{&quot;requestId&quot;:&quot;51b60fc5-535e-4fab-b13b-02d456362ccc&quot;,&quot;toolUseId&quot;:&quot;toolu_vrtx_014ivm2nomQJSAacXLYVjTgw&quot;,&quot;phase&quot;:7},&quot;f2b184ac-29de-4500-abda-2deb3fb08c48;toolu_vrtx_01BKbDAUAJCrsuD6M434SDCN&quot;:{&quot;requestId&quot;:&quot;f2b184ac-29de-4500-abda-2deb3fb08c48&quot;,&quot;toolUseId&quot;:&quot;toolu_vrtx_01BKbDAUAJCrsuD6M434SDCN&quot;,&quot;phase&quot;:8,&quot;result&quot;:{&quot;text&quot;:&quot;Here's the result of running `cat -n` on README.md:\n     1\t\n     2\t\n     3\t# MedDRA Loader\n     4\t\n     5\t[![CI](https://github.com/wullli/meddra-loader/workflows/CI/badge.svg)](https://github.com/wullli/meddra-loader/actions/workflows/ci.yml)\n     6\t[![codecov](https://codecov.io/gh/wullli/meddra-loader/branch/main/graph/badge.svg)](https://codecov.io/gh/wullli/meddra-loader)\n     7\t\n     8\tDISCLAIMER: This software does not give you access to MedDRA and you need a valid subscription to work with MedDRA data: https://www.meddra.org/. It merely provides tooling for loading the MedDRA data and hierarchy with python into a networkx graph. It is only intended for use with legitimately licensed MedDRA data and users are responsible for obtaining a valid license from the MSSO.\n     9\t\nTotal lines in file: 9\n&quot;,&quot;isError&quot;:false,&quot;requestId&quot;:&quot;&quot;}},&quot;c19da224-1f2a-4c76-b908-5ea03faf61b5;toolu_vrtx_01CfRYTN5BMZjgKMcwfPK1ng&quot;:{&quot;requestId&quot;:&quot;c19da224-1f2a-4c76-b908-5ea03faf61b5&quot;,&quot;toolUseId&quot;:&quot;toolu_vrtx_01CfRYTN5BMZjgKMcwfPK1ng&quot;,&quot;phase&quot;:5,&quot;result&quot;:{&quot;text&quot;:&quot;Here's the result of running `cat -n` on README.md:\n     1\t\n     2\t\n     3\t# MedDRA Loader\n     4\t\n     5\t[![CI](https://github.com/wullli/meddra-loader/workflows/CI/badge.svg)](https://github.com/wullli/meddra-loader/actions/workflows/ci.yml)\n     6\t[![codecov](https://codecov.io/gh/wullli/meddra-loader/branch/main/graph/badge.svg)](https://codecov.io/gh/wullli/meddra-loader)\n     7\t\n     8\tDISCLAIMER: This software does not give you access to MedDRA and you need a valid subscription to work with MedDRA data: https://www.meddra.org/. It merely provides tooling for loading the MedDRA data and hierarchy with python into a networkx graph. It is only intended for use with legitimately licensed MedDRA data and users are responsible for obtaining a valid license from the MSSO.\n     9\t\nTotal lines in file: 9\n&quot;,&quot;isError&quot;:false,&quot;requestId&quot;:&quot;&quot;}},&quot;386cc6fa-97fc-45cf-b79d-266e46238212;toolu_vrtx_01BjUSauHj5JbA9dQtw3CByY&quot;:{&quot;requestId&quot;:&quot;386cc6fa-97fc-45cf-b79d-266e46238212&quot;,&quot;toolUseId&quot;:&quot;toolu_vrtx_01BjUSauHj5JbA9dQtw3CByY&quot;,&quot;phase&quot;:5,&quot;result&quot;:{&quot;text&quot;:&quot;Here's the files and directories up to 2 levels deep in ., excluding hidden items:\n./LICENSE\n./README.md\n./coverage.xml\n./modules\n./modules/meddra-loader\n./pyproject.toml\n./scripts\n./scripts/run_ci_checks.sh\n./src\n./src/meddra_loader\n./src/meddra_loader.egg-info\n./src/resources\n&quot;,&quot;isError&quot;:false,&quot;requestId&quot;:&quot;&quot;}},&quot;59667e9d-1f89-4993-8419-9b78f0b1b2da;toolu_vrtx_01SJeeJHehSEd5kBhNRDfwGi&quot;:{&quot;requestId&quot;:&quot;59667e9d-1f89-4993-8419-9b78f0b1b2da&quot;,&quot;toolUseId&quot;:&quot;toolu_vrtx_01SJeeJHehSEd5kBhNRDfwGi&quot;,&quot;phase&quot;:5,&quot;result&quot;:{&quot;text&quot;:&quot;Here's the files and directories up to 2 levels deep in src/meddra_loader, excluding hidden items:\nsrc/meddra_loader/__init__.py\nsrc/meddra_loader/__pycache__\nsrc/meddra_loader/__pycache__/__init__.cpython-311.pyc\nsrc/meddra_loader/__pycache__/__init__.cpython-312.pyc\nsrc/meddra_loader/__pycache__/meddra_digraph.cpython-311.pyc\nsrc/meddra_loader/__pycache__/meddra_digraph.cpython-312.pyc\nsrc/meddra_loader/meddra_digraph.py\nsrc/meddra_loader/resources\nsrc/meddra_loader/resources/meddra_schema_v28.json\nsrc/meddra_loader/tests\nsrc/meddra_loader/tests/__init__.py\nsrc/meddra_loader/tests/__pycache__\nsrc/meddra_loader/tests/test_data\nsrc/meddra_loader/tests/test_meddra_digraph.py\n&quot;,&quot;isError&quot;:false,&quot;requestId&quot;:&quot;&quot;}},&quot;f5afc2d7-556c-4153-bc7a-3cae7aa65fc7;toolu_vrtx_019jDmmEzVGoSdN3Pm1KP7Hd&quot;:{&quot;requestId&quot;:&quot;f5afc2d7-556c-4153-bc7a-3cae7aa65fc7&quot;,&quot;toolUseId&quot;:&quot;toolu_vrtx_019jDmmEzVGoSdN3Pm1KP7Hd&quot;,&quot;phase&quot;:5,&quot;result&quot;:{&quot;text&quot;:&quot;Here's the result of running `cat -n` on src/meddra_loader/__init__.py:\n     1\tVERSION = \&quot;0.0.1\&quot;\n     2\t\nTotal lines in file: 2\n&quot;,&quot;isError&quot;:false,&quot;requestId&quot;:&quot;&quot;}},&quot;5aa6d61b-a26c-4d4b-a9b5-d69f7b0a3098;toolu_vrtx_01DfkZ6e8stcHoXswmagj8uD&quot;:{&quot;requestId&quot;:&quot;5aa6d61b-a26c-4d4b-a9b5-d69f7b0a3098&quot;,&quot;toolUseId&quot;:&quot;toolu_vrtx_01DfkZ6e8stcHoXswmagj8uD&quot;,&quot;phase&quot;:5,&quot;result&quot;:{&quot;text&quot;:&quot;Note:\nView range expanded to meet minimum size of 500 lines. End line adjusted to last line of file (88).\n\nHere's the result of running `cat -n` on src/meddra_loader/meddra_digraph.py:\n     1\timport json\n     2\tfrom pathlib import Path\n     3\tfrom typing import Any, Union, cast\n     4\t\n     5\timport networkx as nx\n     6\t\n     7\tDEFAULT_SCHEMA_PATH = Path(__file__).parent / \&quot;resources\&quot; / \&quot;meddra_schema_v28.json\&quot;\n     8\t\n     9\t\n    10\tclass MedDRADiGraph(nx.DiGraph):\n    11\t\n    12\t    def __init__(self, *args: Any, **kwargs: Any) -&gt; None:\n    13\t        super().__init__(*args, **kwargs)\n    14\t        self.schema: dict[str, dict[str, str]] = {}\n    15\t        self.term_levels: set[str] = set()\n    16\t        self.edges: set[tuple[str, ...]] = set()\n    17\t        self.terms: dict[str, dict[str, Any]] = {}\n    18\t        self.meddra_version: Union[str, None] = None\n    19\t\n    20\t    def load(\n    21\t        self, meddra_directory_path: Union[str, Path], schema_path: Union[str, Path] = DEFAULT_SCHEMA_PATH\n    22\t    ) -&gt; None:\n    23\t        meddra_directory_path = Path(meddra_directory_path)\n    24\t        self.schema = self._load_schema(schema_path)\n    25\t        self.meddra_version = \&quot; \&quot;.join(self._load_file(meddra_directory_path / \&quot;meddra_release.asc\&quot;)[0]).strip()\n    26\t        assert meddra_directory_path.is_dir()\n    27\t        self.term_levels = self._get_term_levels(meddra_directory_path)\n    28\t        edges = set()\n    29\t        self.terms = {}\n    30\t        for file_path in meddra_directory_path.glob(\&quot;*.asc\&quot;):\n    31\t            if self._is_edge_file(file_path):\n    32\t                edges.update(self._load_file(file_path))\n    33\t\n    34\t        for file_path in meddra_directory_path.glob(\&quot;*.asc\&quot;):\n    35\t            if self._is_term_file(file_path):\n    36\t                data = self._load_file(file_path)\n    37\t                file_name = file_path.name\n    38\t                node_type = file_path.name.split(\&quot;.\&quot;)[0]\n    39\t\n    40\t                # Process each row of data\n    41\t                for row in data:\n    42\t                    if len(row) &gt;= len(self.schema[file_name]):\n    43\t                        # Create a dictionary for this term using the schema\n    44\t                        term_dict = dict(zip(self.schema[file_name].keys(), row))\n    45\t                        term_dict[\&quot;node_type\&quot;] = node_type\n    46\t\n    47\t                        # Use the first field as the key (usually the code)\n    48\t                        first_field = list(self.schema[file_name].keys())[0]\n    49\t                        term_key = term_dict[first_field]\n    50\t                        self.terms[term_key] = term_dict\n    51\t        self.add_edges_from(edges)\n    52\t        self.add_nodes_from(self.terms.keys())\n    53\t        nx.set_node_attributes(self, self.terms)\n    54\t\n    55\t    def _load_schema(self, schema_path: Union[str, Path]) -&gt; dict[str, dict[str, str]]:\n    56\t        with open(schema_path, \&quot;r\&quot;, encoding=\&quot;utf-8\&quot;) as f:\n    57\t            return cast(dict[str, dict[str, str]], json.load(f))\n    58\t\n    59\t    def _get_term_levels(self, meddra_directory_path: Path) -&gt; set[str]:\n    60\t        term_levels = set()\n    61\t        for file_path in meddra_directory_path.glob(\&quot;*.asc\&quot;):\n    62\t            file_name = file_path.name.split(\&quot;.\&quot;)[0]\n    63\t            if not \&quot;_\&quot; in file_name:\n    64\t                term_levels.add(file_name)\n    65\t        return term_levels\n    66\t\n    67\t    def _is_term_file(self, file_path: Path) -&gt; bool:\n    68\t        return file_path.name.split(\&quot;.\&quot;)[0] in self.term_levels\n    69\t\n    70\t    def _is_edge_file(self, file_path: Path) -&gt; bool:\n    71\t        if not \&quot;_\&quot; in file_path.name:\n    72\t            return False\n    73\t        try:\n    74\t            t0, t1 = file_path.name.split(\&quot;.\&quot;)[0].split(\&quot;_\&quot;)\n    75\t            return t0 in self.term_levels and t1 in self.term_levels\n    76\t        except (ValueError, IndexError):\n    77\t            return False\n    78\t\n    79\t    def _load_file(self, file_path: Path) -&gt; list[tuple[str, ...]]:\n    80\t        lines = []\n    81\t        with open(file_path, \&quot;r\&quot;, encoding=\&quot;utf-8\&quot;) as f:\n    82\t            for line in f:\n    83\t                lines.append(self._load_line(line))\n    84\t        return lines\n    85\t\n    86\t    def _load_line(self, line: str) -&gt; tuple[str, ...]:\n    87\t        return tuple(line.strip().split(\&quot;$\&quot;))\n    88\t\nTotal lines in file: 88\n&quot;,&quot;isError&quot;:false,&quot;requestId&quot;:&quot;&quot;}},&quot;0d68e4d4-cfee-4982-bc78-944e50ae8125;toolu_vrtx_01UtsjbD6x7FrtBENdKsYG9t&quot;:{&quot;requestId&quot;:&quot;0d68e4d4-cfee-4982-bc78-944e50ae8125&quot;,&quot;toolUseId&quot;:&quot;toolu_vrtx_01UtsjbD6x7FrtBENdKsYG9t&quot;,&quot;phase&quot;:5,&quot;result&quot;:{&quot;text&quot;:&quot;Here's the result of running `cat -n` on pyproject.toml:\n     1\t[build-system]\n     2\trequires = [\n     3\t    \&quot;setuptools&gt;=64\&quot;,\n     4\t    \&quot;wheel\&quot;\n     5\t]\n     6\tbuild-backend = \&quot;setuptools.build_meta\&quot;\n     7\t\n     8\t[project]\n     9\tname = \&quot;meddra-loader\&quot;\n    10\tversion = \&quot;0.1.0\&quot;\n    11\tauthors = [\n    12\t    {name = \&quot;Pascal Wullschleger\&quot;}\n    13\t]\n    14\tdescription = \&quot;Package for loading and processing MedDRA data\&quot;\n    15\treadme = \&quot;README.md\&quot;\n    16\trequires-python = \&quot;&gt;=3.9\&quot;\n    17\tclassifiers = [\n    18\t    \&quot;Programming Language :: Python :: 3\&quot;,\n    19\t    \&quot;License :: OSI Approved :: MIT License\&quot;,\n    20\t    \&quot;Operating System :: OS Independent\&quot;\n    21\t]\n    22\tdependencies = [\n    23\t    \&quot;networkx\&quot;,\n    24\t    \&quot;pandas\&quot;\n    25\t]\n    26\t\n    27\t[project.optional-dependencies]\n    28\tdev = [\n    29\t    \&quot;pytest&gt;=7.0\&quot;,\n    30\t    \&quot;pytest-cov&gt;=4.0\&quot;,\n    31\t    \&quot;black&gt;=23.0\&quot;,\n    32\t    \&quot;isort&gt;=5.0\&quot;,\n    33\t    \&quot;mypy&gt;=1.0\&quot;,\n    34\t    \&quot;pylint&gt;=2.15\&quot;,\n    35\t    \&quot;coverage&gt;=7.0\&quot;\n    36\t]\n    37\t\n    38\t[tool.setuptools]\n    39\tpackage-dir = {\&quot;\&quot; = \&quot;src\&quot;}\n    40\t\n    41\t[tool.setuptools.packages.find]\n    42\twhere = [\&quot;src\&quot;]\n    43\t\n    44\t[tool.black]\n    45\tline-length = 120\n    46\ttarget-version = ['py39']\n    47\t\n    48\t[tool.isort]\n    49\tprofile = \&quot;black\&quot;\n    50\tline_length = 120\n    51\t\n    52\t[tool.mypy]\n    53\tpython_version = \&quot;3.9\&quot;\n    54\twarn_return_any = true\n    55\twarn_unused_configs = true\n    56\tdisallow_untyped_defs = true\n    57\tdisallow_incomplete_defs = true\n    58\tcheck_untyped_defs = true\n    59\tdisallow_untyped_decorators = true\n    60\tno_implicit_optional = true\n    61\twarn_redundant_casts = true\n    62\twarn_unused_ignores = true\n    63\twarn_no_return = true\n    64\twarn_unreachable = true\n    65\tstrict_equality = true\n    66\t\n    67\t[tool.pylint.messages_control]\n    68\tdisable = [\n    69\t    \&quot;missing-docstring\&quot;,\n    70\t    \&quot;too-few-public-methods\&quot;,\n    71\t    \&quot;invalid-name\&quot;,\n    72\t    \&quot;line-too-long\&quot;\n    73\t]\n    74\t\n    75\t[tool.pylint.format]\n    76\tmax-line-length = 120\n    77\t\n    78\t[tool.pytest.ini_options]\n    79\ttestpaths = [\&quot;src/meddra_loader/tests\&quot;]\n    80\tpython_files = [\&quot;test_*.py\&quot;]\n    81\tpython_classes = [\&quot;Test*\&quot;]\n    82\tpython_functions = [\&quot;test_*\&quot;]\n    83\taddopts = \&quot;--strict-markers --strict-config\&quot;\n    84\t\n    85\t[tool.coverage.run]\n    86\tsource = [\&quot;src/meddra_loader\&quot;]\n    87\tomit = [\&quot;*/tests/*\&quot;]\n    88\t\n    89\t[tool.coverage.report]\n    90\texclude_lines = [\n    91\t    \&quot;pragma: no cover\&quot;,\n    92\t    \&quot;def __repr__\&quot;,\n    93\t    \&quot;raise AssertionError\&quot;,\n    94\t    \&quot;raise NotImplementedError\&quot;\n    95\t]\n    96\t\nTotal lines in file: 96\n&quot;,&quot;isError&quot;:false,&quot;requestId&quot;:&quot;&quot;}},&quot;7d4a074a-4acb-48fa-8dff-011aeff75ed4;toolu_vrtx_01YPrGqZ7cU8zDkn5b2DqLvb&quot;:{&quot;requestId&quot;:&quot;7d4a074a-4acb-48fa-8dff-011aeff75ed4&quot;,&quot;toolUseId&quot;:&quot;toolu_vrtx_01YPrGqZ7cU8zDkn5b2DqLvb&quot;,&quot;phase&quot;:5,&quot;result&quot;:{&quot;text&quot;:&quot;Note:\nView range expanded to meet minimum size of 500 lines. End line adjusted to last line of file (99).\n\nHere's the result of running `cat -n` on src/meddra_loader/tests/test_meddra_digraph.py:\n     1\tfrom pathlib import Path\n     2\t\n     3\timport pytest\n     4\t\n     5\tfrom meddra_loader.meddra_digraph import MedDRADiGraph\n     6\t\n     7\tTEST_TERMS = [\n     8\t    # SOC (System Organ Class) test cases\n     9\t    (\&quot;soc\&quot;, \&quot;10001000\&quot;, \&quot;Lorem ipsum dolor sit amet\&quot;),\n    10\t    (\&quot;soc\&quot;, \&quot;10002000\&quot;, \&quot;Consectetur adipiscing elit\&quot;),\n    11\t    (\&quot;soc\&quot;, \&quot;10003000\&quot;, \&quot;Sed do eiusmod tempor incididunt\&quot;),\n    12\t    # HLGT (High Level Group Term) test cases\n    13\t    (\&quot;hlgt\&quot;, \&quot;10001001\&quot;, \&quot;Nostrud exercitation ullamco\&quot;),\n    14\t    (\&quot;hlgt\&quot;, \&quot;10001002\&quot;, \&quot;Laboris nisi ut aliquip ex ea\&quot;),\n    15\t    (\&quot;hlgt\&quot;, \&quot;10002001\&quot;, \&quot;Commodo consequat duis aute irure\&quot;),\n    16\t    # HLT (High Level Term) test cases\n    17\t    (\&quot;hlt\&quot;, \&quot;10001101\&quot;, \&quot;Nulla pariatur excepteur sint occaecat\&quot;),\n    18\t    (\&quot;hlt\&quot;, \&quot;10001102\&quot;, \&quot;Cupidatat non proident sunt in culpa\&quot;),\n    19\t    (\&quot;hlt\&quot;, \&quot;10002101\&quot;, \&quot;Est laborum lorem ipsum dolor sit\&quot;),\n    20\t    # LLT (Lowest Level Term) test cases - using codes that don't conflict with mdhier.asc\n    21\t    (\&quot;llt\&quot;, \&quot;10001302\&quot;, \&quot;Cillum dolore eu fugiat nulla\&quot;),\n    22\t    (\&quot;llt\&quot;, \&quot;10001303\&quot;, \&quot;Pariatur excepteur sint occaecat\&quot;),\n    23\t    (\&quot;llt\&quot;, \&quot;10002302\&quot;, \&quot;Anim id est laborum sed ut\&quot;),\n    24\t]\n    25\t\n    26\t\n    27\t@pytest.fixture(name=\&quot;meddra_digraph\&quot;)\n    28\tdef meddra_digraph_fixture() -&gt; MedDRADiGraph:\n    29\t    return MedDRADiGraph()\n    30\t\n    31\t\n    32\t@pytest.fixture(name=\&quot;test_data_path\&quot;)\n    33\tdef test_data_path_fixture() -&gt; Path:\n    34\t    return Path(__file__).parent / \&quot;test_data\&quot;\n    35\t\n    36\t\n    37\tdef test_term_levels_loaded(meddra_digraph: MedDRADiGraph, test_data_path: Path) -&gt; None:\n    38\t    meddra_digraph.load(test_data_path)\n    39\t    assert meddra_digraph.meddra_version is not None\n    40\t    assert len(meddra_digraph.term_levels) == 6\n    41\t    assert set(meddra_digraph.term_levels) == {\&quot;soc\&quot;, \&quot;hlgt\&quot;, \&quot;hlt\&quot;, \&quot;pt\&quot;, \&quot;llt\&quot;, \&quot;mdhier\&quot;}\n    42\t\n    43\t\n    44\tdef test_schema_levels_loaded(meddra_digraph: MedDRADiGraph, test_data_path: Path) -&gt; None:\n    45\t    meddra_digraph.load(test_data_path)\n    46\t    assert len(meddra_digraph.schema) == 12\n    47\t    # Check that core term files are in schema\n    48\t    assert \&quot;soc.asc\&quot; in meddra_digraph.schema\n    49\t    assert \&quot;hlgt.asc\&quot; in meddra_digraph.schema\n    50\t    assert \&quot;hlt.asc\&quot; in meddra_digraph.schema\n    51\t    assert \&quot;pt.asc\&quot; in meddra_digraph.schema\n    52\t    assert \&quot;llt.asc\&quot; in meddra_digraph.schema\n    53\t    assert \&quot;mdhier.asc\&quot; in meddra_digraph.schema\n    54\t\n    55\t\n    56\tdef test_edges_loaded(meddra_digraph: MedDRADiGraph, test_data_path: Path) -&gt; None:\n    57\t    meddra_digraph.load(test_data_path)\n    58\t    assert len(meddra_digraph.edges) &gt;= 0\n    59\t\n    60\t\n    61\tdef test_terms_loaded(meddra_digraph: MedDRADiGraph, test_data_path: Path) -&gt; None:\n    62\t    meddra_digraph.load(test_data_path)\n    63\t    assert len(meddra_digraph.terms) &gt; 1\n    64\t\n    65\t\n    66\tdef test_nodes_loaded(meddra_digraph: MedDRADiGraph, test_data_path: Path) -&gt; None:\n    67\t    meddra_digraph.load(test_data_path)\n    68\t    assert len(meddra_digraph.nodes) &gt; 1\n    69\t\n    70\t\n    71\t# Generate IDs automatically from the test parameters\n    72\tdef _generate_test_ids() -&gt; list[str]:\n    73\t    \&quot;\&quot;\&quot;Generate test IDs like soc1, soc2, hlgt1, hlgt2, etc.\&quot;\&quot;\&quot;\n    74\t    term_counts: dict[str, int] = {}\n    75\t    ids: list[str] = []\n    76\t    for term_level, _, _ in TEST_TERMS:\n    77\t        term_counts[term_level] = term_counts.get(term_level, 0) + 1\n    78\t        ids.append(f\&quot;{term_level}{term_counts[term_level]}\&quot;)\n    79\t    return ids\n    80\t\n    81\t\n    82\t@pytest.mark.parametrize(\&quot;term_level, term_code, expected_name\&quot;, TEST_TERMS, ids=_generate_test_ids())\n    83\tdef test_term_definitions_correct(\n    84\t    meddra_digraph: MedDRADiGraph, test_data_path: Path, term_level: str, term_code: str, expected_name: str\n    85\t) -&gt; None:\n    86\t    \&quot;\&quot;\&quot;Test that each term level has the correct definition/name in the test data.\&quot;\&quot;\&quot;\n    87\t    meddra_digraph.load(test_data_path)\n    88\t\n    89\t    assert term_code in meddra_digraph.terms, f\&quot;Term {term_code} not found in loaded terms\&quot;\n    90\t\n    91\t    term_data = meddra_digraph.terms[term_code]\n    92\t    assert term_data[\&quot;node_type\&quot;] == term_level, f\&quot;Expected node_type {term_level}, got {term_data['node_type']}\&quot;\n    93\t\n    94\t    name_field = f\&quot;{term_level}_name\&quot;\n    95\t    assert name_field in term_data, f\&quot;Name field {name_field} not found in term data\&quot;\n    96\t    assert (\n    97\t        term_data[name_field] == expected_name\n    98\t    ), f\&quot;Expected {name_field} to be '{expected_name}', got '{term_data[name_field]}'\&quot;\n    99\t\nTotal lines in file: 99\n&quot;,&quot;isError&quot;:false,&quot;requestId&quot;:&quot;&quot;}},&quot;ec7e13e5-a0a5-4666-90cd-5caa577f25dd;toolu_vrtx_01U4SWUTYZttoYpnzT7fqpbC&quot;:{&quot;requestId&quot;:&quot;ec7e13e5-a0a5-4666-90cd-5caa577f25dd&quot;,&quot;toolUseId&quot;:&quot;toolu_vrtx_01U4SWUTYZttoYpnzT7fqpbC&quot;,&quot;phase&quot;:7},&quot;77a91342-6bc8-4769-9f18-cb4be46840ae;toolu_vrtx_01NWgrZDGyg5XjB2kpeZSM3y&quot;:{&quot;requestId&quot;:&quot;77a91342-6bc8-4769-9f18-cb4be46840ae&quot;,&quot;toolUseId&quot;:&quot;toolu_vrtx_01NWgrZDGyg5XjB2kpeZSM3y&quot;,&quot;phase&quot;:8,&quot;result&quot;:{&quot;text&quot;:&quot;Here's the result of running `cat -n` on README.md:\n     1\t\n     2\t\n     3\t# MedDRA Loader\n     4\t\n     5\t[![CI](https://github.com/wullli/meddra-loader/workflows/CI/badge.svg)](https://github.com/wullli/meddra-loader/actions/workflows/ci.yml)\n     6\t[![codecov](https://codecov.io/gh/wullli/meddra-loader/branch/main/graph/badge.svg)](https://codecov.io/gh/wullli/meddra-loader)\n     7\t\n     8\tDISCLAIMER: This software does not give you access to MedDRA and you need a valid subscription to work with MedDRA data: https://www.meddra.org/. It merely provides tooling for loading the MedDRA data and hierarchy with python into a networkx graph. It is only intended for use with legitimately licensed MedDRA data and users are responsible for obtaining a valid license from the MSSO.\n     9\t\nTotal lines in file: 9\n&quot;,&quot;isError&quot;:false,&quot;requestId&quot;:&quot;&quot;}},&quot;68c58f66-79b7-42b3-9dd2-94f5034470c4;toolu_vrtx_01SZRN6HjGMhVujvHAoHbehE&quot;:{&quot;requestId&quot;:&quot;68c58f66-79b7-42b3-9dd2-94f5034470c4&quot;,&quot;toolUseId&quot;:&quot;toolu_vrtx_01SZRN6HjGMhVujvHAoHbehE&quot;,&quot;phase&quot;:5,&quot;result&quot;:{&quot;text&quot;:&quot;Here's the result of running `cat -n` on README.md:\n     1\t\n     2\t\n     3\t# MedDRA Loader\n     4\t\n     5\t[![CI](https://github.com/wullli/meddra-loader/workflows/CI/badge.svg)](https://github.com/wullli/meddra-loader/actions/workflows/ci.yml)\n     6\t[![codecov](https://codecov.io/gh/wullli/meddra-loader/branch/main/graph/badge.svg)](https://codecov.io/gh/wullli/meddra-loader)\n     7\t\n     8\tDISCLAIMER: This software does not give you access to MedDRA and you need a valid subscription to work with MedDRA data: https://www.meddra.org/. It merely provides tooling for loading the MedDRA data and hierarchy with python into a networkx graph. It is only intended for use with legitimately licensed MedDRA data and users are responsible for obtaining a valid license from the MSSO.\n     9\t\nTotal lines in file: 9\n&quot;,&quot;isError&quot;:false,&quot;requestId&quot;:&quot;&quot;}},&quot;2c8f692c-1a4d-4de1-9764-65f8988a5bdf;toolu_vrtx_019ysJTWxYWskYGiBaYNXCfT&quot;:{&quot;requestId&quot;:&quot;2c8f692c-1a4d-4de1-9764-65f8988a5bdf&quot;,&quot;toolUseId&quot;:&quot;toolu_vrtx_019ysJTWxYWskYGiBaYNXCfT&quot;,&quot;phase&quot;:5,&quot;result&quot;:{&quot;text&quot;:&quot;Here's the files and directories up to 2 levels deep in ., excluding hidden items:\n./LICENSE\n./README.md\n./coverage.xml\n./modules\n./modules/meddra-loader\n./pyproject.toml\n./scripts\n./scripts/run_ci_checks.sh\n./src\n./src/meddra_graph\n./src/meddra_loader.egg-info\n./src/resources\n&quot;,&quot;isError&quot;:false,&quot;requestId&quot;:&quot;&quot;}},&quot;989a41b6-e576-444f-8ec3-3224a4f12b54;toolu_vrtx_01ByTgEk3UXbUDEHer4JoYT4&quot;:{&quot;requestId&quot;:&quot;989a41b6-e576-444f-8ec3-3224a4f12b54&quot;,&quot;toolUseId&quot;:&quot;toolu_vrtx_01ByTgEk3UXbUDEHer4JoYT4&quot;,&quot;phase&quot;:5,&quot;result&quot;:{&quot;text&quot;:&quot;Here's the files and directories up to 2 levels deep in src/meddra_graph, excluding hidden items:\nsrc/meddra_graph/__init__.py\nsrc/meddra_graph/__pycache__\nsrc/meddra_graph/__pycache__/__init__.cpython-311.pyc\nsrc/meddra_graph/__pycache__/__init__.cpython-312.pyc\nsrc/meddra_graph/__pycache__/meddra_digraph.cpython-311.pyc\nsrc/meddra_graph/__pycache__/meddra_digraph.cpython-312.pyc\nsrc/meddra_graph/meddra_digraph.py\nsrc/meddra_graph/resources\nsrc/meddra_graph/resources/meddra_schema_v28.json\nsrc/meddra_graph/tests\nsrc/meddra_graph/tests/__init__.py\nsrc/meddra_graph/tests/__pycache__\nsrc/meddra_graph/tests/test_data\nsrc/meddra_graph/tests/test_meddra_digraph.py\n&quot;,&quot;isError&quot;:false,&quot;requestId&quot;:&quot;&quot;}},&quot;fbe0b876-56d3-43fc-982e-c1c244818671;toolu_vrtx_01KHh1xS62pgozFFzUpZGwMK&quot;:{&quot;requestId&quot;:&quot;fbe0b876-56d3-43fc-982e-c1c244818671&quot;,&quot;toolUseId&quot;:&quot;toolu_vrtx_01KHh1xS62pgozFFzUpZGwMK&quot;,&quot;phase&quot;:5,&quot;result&quot;:{&quot;text&quot;:&quot;Here's the result of running `cat -n` on src/meddra_graph/__init__.py:\n     1\tVERSION = \&quot;0.0.1\&quot;\n     2\t\nTotal lines in file: 2\n&quot;,&quot;isError&quot;:false,&quot;requestId&quot;:&quot;&quot;}},&quot;e7d85324-35c4-4fa3-aa6d-16b02692483e;toolu_vrtx_016Mz6QVPJSLKcwA5vrCtZra&quot;:{&quot;requestId&quot;:&quot;e7d85324-35c4-4fa3-aa6d-16b02692483e&quot;,&quot;toolUseId&quot;:&quot;toolu_vrtx_016Mz6QVPJSLKcwA5vrCtZra&quot;,&quot;phase&quot;:5,&quot;result&quot;:{&quot;text&quot;:&quot;Note:\nView range expanded to meet minimum size of 500 lines. End line adjusted to last line of file (88).\n\nHere's the result of running `cat -n` on src/meddra_graph/meddra_digraph.py:\n     1\timport json\n     2\tfrom pathlib import Path\n     3\tfrom typing import Any, Union, cast\n     4\t\n     5\timport networkx as nx\n     6\t\n     7\tDEFAULT_SCHEMA_PATH = Path(__file__).parent / \&quot;resources\&quot; / \&quot;meddra_schema_v28.json\&quot;\n     8\t\n     9\t\n    10\tclass MedDRADiGraph(nx.DiGraph):\n    11\t\n    12\t    def __init__(self, *args: Any, **kwargs: Any) -&gt; None:\n    13\t        super().__init__(*args, **kwargs)\n    14\t        self.schema: dict[str, dict[str, str]] = {}\n    15\t        self.term_levels: set[str] = set()\n    16\t        self.edges: set[tuple[str, ...]] = set()\n    17\t        self.terms: dict[str, dict[str, Any]] = {}\n    18\t        self.meddra_version: Union[str, None] = None\n    19\t\n    20\t    def load(\n    21\t        self, meddra_directory_path: Union[str, Path], schema_path: Union[str, Path] = DEFAULT_SCHEMA_PATH\n    22\t    ) -&gt; None:\n    23\t        meddra_directory_path = Path(meddra_directory_path)\n    24\t        self.schema = self._load_schema(schema_path)\n    25\t        self.meddra_version = \&quot; \&quot;.join(self._load_file(meddra_directory_path / \&quot;meddra_release.asc\&quot;)[0]).strip()\n    26\t        assert meddra_directory_path.is_dir()\n    27\t        self.term_levels = self._get_term_levels(meddra_directory_path)\n    28\t        edges = set()\n    29\t        self.terms = {}\n    30\t        for file_path in meddra_directory_path.glob(\&quot;*.asc\&quot;):\n    31\t            if self._is_edge_file(file_path):\n    32\t                edges.update(self._load_file(file_path))\n    33\t\n    34\t        for file_path in meddra_directory_path.glob(\&quot;*.asc\&quot;):\n    35\t            if self._is_term_file(file_path):\n    36\t                data = self._load_file(file_path)\n    37\t                file_name = file_path.name\n    38\t                node_type = file_path.name.split(\&quot;.\&quot;)[0]\n    39\t\n    40\t                # Process each row of data\n    41\t                for row in data:\n    42\t                    if len(row) &gt;= len(self.schema[file_name]):\n    43\t                        # Create a dictionary for this term using the schema\n    44\t                        term_dict = dict(zip(self.schema[file_name].keys(), row))\n    45\t                        term_dict[\&quot;node_type\&quot;] = node_type\n    46\t\n    47\t                        # Use the first field as the key (usually the code)\n    48\t                        first_field = list(self.schema[file_name].keys())[0]\n    49\t                        term_key = term_dict[first_field]\n    50\t                        self.terms[term_key] = term_dict\n    51\t        self.add_edges_from(edges)\n    52\t        self.add_nodes_from(self.terms.keys())\n    53\t        nx.set_node_attributes(self, self.terms)\n    54\t\n    55\t    def _load_schema(self, schema_path: Union[str, Path]) -&gt; dict[str, dict[str, str]]:\n    56\t        with open(schema_path, \&quot;r\&quot;, encoding=\&quot;utf-8\&quot;) as f:\n    57\t            return cast(dict[str, dict[str, str]], json.load(f))\n    58\t\n    59\t    def _get_term_levels(self, meddra_directory_path: Path) -&gt; set[str]:\n    60\t        term_levels = set()\n    61\t        for file_path in meddra_directory_path.glob(\&quot;*.asc\&quot;):\n    62\t            file_name = file_path.name.split(\&quot;.\&quot;)[0]\n    63\t            if not \&quot;_\&quot; in file_name:\n    64\t                term_levels.add(file_name)\n    65\t        return term_levels\n    66\t\n    67\t    def _is_term_file(self, file_path: Path) -&gt; bool:\n    68\t        return file_path.name.split(\&quot;.\&quot;)[0] in self.term_levels\n    69\t\n    70\t    def _is_edge_file(self, file_path: Path) -&gt; bool:\n    71\t        if not \&quot;_\&quot; in file_path.name:\n    72\t            return False\n    73\t        try:\n    74\t            t0, t1 = file_path.name.split(\&quot;.\&quot;)[0].split(\&quot;_\&quot;)\n    75\t            return t0 in self.term_levels and t1 in self.term_levels\n    76\t        except (ValueError, IndexError):\n    77\t            return False\n    78\t\n    79\t    def _load_file(self, file_path: Path) -&gt; list[tuple[str, ...]]:\n    80\t        lines = []\n    81\t        with open(file_path, \&quot;r\&quot;, encoding=\&quot;utf-8\&quot;) as f:\n    82\t            for line in f:\n    83\t                lines.append(self._load_line(line))\n    84\t        return lines\n    85\t\n    86\t    def _load_line(self, line: str) -&gt; tuple[str, ...]:\n    87\t        return tuple(line.strip().split(\&quot;$\&quot;))\n    88\t\nTotal lines in file: 88\n&quot;,&quot;isError&quot;:false,&quot;requestId&quot;:&quot;&quot;}},&quot;fecab5f8-60ce-4cf7-a4a0-410bfb937acb;toolu_vrtx_018YL3qXFktcnQqND8TWmEB8&quot;:{&quot;requestId&quot;:&quot;fecab5f8-60ce-4cf7-a4a0-410bfb937acb&quot;,&quot;toolUseId&quot;:&quot;toolu_vrtx_018YL3qXFktcnQqND8TWmEB8&quot;,&quot;phase&quot;:5,&quot;result&quot;:{&quot;text&quot;:&quot;Here's the result of running `cat -n` on pyproject.toml:\n     1\t[build-system]\n     2\trequires = [\n     3\t    \&quot;setuptools&gt;=64\&quot;,\n     4\t    \&quot;wheel\&quot;\n     5\t]\n     6\tbuild-backend = \&quot;setuptools.build_meta\&quot;\n     7\t\n     8\t[project]\n     9\tname = \&quot;meddra-graph\&quot;\n    10\tversion = \&quot;0.1.0\&quot;\n    11\tauthors = [\n    12\t    {name = \&quot;Pascal Wullschleger\&quot;}\n    13\t]\n    14\tdescription = \&quot;Package for loading and processing MedDRA data\&quot;\n    15\treadme = \&quot;README.md\&quot;\n    16\trequires-python = \&quot;&gt;=3.9\&quot;\n    17\tclassifiers = [\n    18\t    \&quot;Programming Language :: Python :: 3\&quot;,\n    19\t    \&quot;License :: OSI Approved :: MIT License\&quot;,\n    20\t    \&quot;Operating System :: OS Independent\&quot;\n    21\t]\n    22\tdependencies = [\n    23\t    \&quot;networkx\&quot;,\n    24\t    \&quot;pandas\&quot;\n    25\t]\n    26\t\n    27\t[project.optional-dependencies]\n    28\tdev = [\n    29\t    \&quot;pytest&gt;=7.0\&quot;,\n    30\t    \&quot;pytest-cov&gt;=4.0\&quot;,\n    31\t    \&quot;black&gt;=23.0\&quot;,\n    32\t    \&quot;isort&gt;=5.0\&quot;,\n    33\t    \&quot;mypy&gt;=1.0\&quot;,\n    34\t    \&quot;pylint&gt;=2.15\&quot;,\n    35\t    \&quot;coverage&gt;=7.0\&quot;\n    36\t]\n    37\t\n    38\t[tool.setuptools]\n    39\tpackage-dir = {\&quot;\&quot; = \&quot;src\&quot;}\n    40\t\n    41\t[tool.setuptools.packages.find]\n    42\twhere = [\&quot;src\&quot;]\n    43\t\n    44\t[tool.black]\n    45\tline-length = 120\n    46\ttarget-version = ['py39']\n    47\t\n    48\t[tool.isort]\n    49\tprofile = \&quot;black\&quot;\n    50\tline_length = 120\n    51\t\n    52\t[tool.mypy]\n    53\tpython_version = \&quot;3.9\&quot;\n    54\twarn_return_any = true\n    55\twarn_unused_configs = true\n    56\tdisallow_untyped_defs = true\n    57\tdisallow_incomplete_defs = true\n    58\tcheck_untyped_defs = true\n    59\tdisallow_untyped_decorators = true\n    60\tno_implicit_optional = true\n    61\twarn_redundant_casts = true\n    62\twarn_unused_ignores = true\n    63\twarn_no_return = true\n    64\twarn_unreachable = true\n    65\tstrict_equality = true\n    66\t\n    67\t[tool.pylint.messages_control]\n    68\tdisable = [\n    69\t    \&quot;missing-docstring\&quot;,\n    70\t    \&quot;too-few-public-methods\&quot;,\n    71\t    \&quot;invalid-name\&quot;,\n    72\t    \&quot;line-too-long\&quot;\n    73\t]\n    74\t\n    75\t[tool.pylint.format]\n    76\tmax-line-length = 120\n    77\t\n    78\t[tool.pytest.ini_options]\n    79\ttestpaths = [\&quot;src/meddra_graph/tests\&quot;]\n    80\tpython_files = [\&quot;test_*.py\&quot;]\n    81\tpython_classes = [\&quot;Test*\&quot;]\n    82\tpython_functions = [\&quot;test_*\&quot;]\n    83\taddopts = \&quot;--strict-markers --strict-config\&quot;\n    84\t\n    85\t[tool.coverage.run]\n    86\tsource = [\&quot;src/meddra_graph\&quot;]\n    87\tomit = [\&quot;*/tests/*\&quot;]\n    88\t\n    89\t[tool.coverage.report]\n    90\texclude_lines = [\n    91\t    \&quot;pragma: no cover\&quot;,\n    92\t    \&quot;def __repr__\&quot;,\n    93\t    \&quot;raise AssertionError\&quot;,\n    94\t    \&quot;raise NotImplementedError\&quot;\n    95\t]\n    96\t\nTotal lines in file: 96\n&quot;,&quot;isError&quot;:false,&quot;requestId&quot;:&quot;&quot;}},&quot;1e398c8d-d5a4-4e3a-9d0a-1be440f2f96f;toolu_vrtx_01NVXRwoJEFP3S3rM2SZ9Q4c&quot;:{&quot;requestId&quot;:&quot;1e398c8d-d5a4-4e3a-9d0a-1be440f2f96f&quot;,&quot;toolUseId&quot;:&quot;toolu_vrtx_01NVXRwoJEFP3S3rM2SZ9Q4c&quot;,&quot;phase&quot;:5,&quot;result&quot;:{&quot;text&quot;:&quot;Note:\nView range expanded to meet minimum size of 500 lines. End line adjusted to last line of file (99).\n\nHere's the result of running `cat -n` on src/meddra_graph/tests/test_meddra_digraph.py:\n     1\tfrom pathlib import Path\n     2\t\n     3\timport pytest\n     4\t\n     5\tfrom meddra_graph.meddra_digraph import MedDRADiGraph\n     6\t\n     7\tTEST_TERMS = [\n     8\t    # SOC (System Organ Class) test cases\n     9\t    (\&quot;soc\&quot;, \&quot;10001000\&quot;, \&quot;Lorem ipsum dolor sit amet\&quot;),\n    10\t    (\&quot;soc\&quot;, \&quot;10002000\&quot;, \&quot;Consectetur adipiscing elit\&quot;),\n    11\t    (\&quot;soc\&quot;, \&quot;10003000\&quot;, \&quot;Sed do eiusmod tempor incididunt\&quot;),\n    12\t    # HLGT (High Level Group Term) test cases\n    13\t    (\&quot;hlgt\&quot;, \&quot;10001001\&quot;, \&quot;Nostrud exercitation ullamco\&quot;),\n    14\t    (\&quot;hlgt\&quot;, \&quot;10001002\&quot;, \&quot;Laboris nisi ut aliquip ex ea\&quot;),\n    15\t    (\&quot;hlgt\&quot;, \&quot;10002001\&quot;, \&quot;Commodo consequat duis aute irure\&quot;),\n    16\t    # HLT (High Level Term) test cases\n    17\t    (\&quot;hlt\&quot;, \&quot;10001101\&quot;, \&quot;Nulla pariatur excepteur sint occaecat\&quot;),\n    18\t    (\&quot;hlt\&quot;, \&quot;10001102\&quot;, \&quot;Cupidatat non proident sunt in culpa\&quot;),\n    19\t    (\&quot;hlt\&quot;, \&quot;10002101\&quot;, \&quot;Est laborum lorem ipsum dolor sit\&quot;),\n    20\t    # LLT (Lowest Level Term) test cases - using codes that don't conflict with mdhier.asc\n    21\t    (\&quot;llt\&quot;, \&quot;10001302\&quot;, \&quot;Cillum dolore eu fugiat nulla\&quot;),\n    22\t    (\&quot;llt\&quot;, \&quot;10001303\&quot;, \&quot;Pariatur excepteur sint occaecat\&quot;),\n    23\t    (\&quot;llt\&quot;, \&quot;10002302\&quot;, \&quot;Anim id est laborum sed ut\&quot;),\n    24\t]\n    25\t\n    26\t\n    27\t@pytest.fixture(name=\&quot;meddra_digraph\&quot;)\n    28\tdef meddra_digraph_fixture() -&gt; MedDRADiGraph:\n    29\t    return MedDRADiGraph()\n    30\t\n    31\t\n    32\t@pytest.fixture(name=\&quot;test_data_path\&quot;)\n    33\tdef test_data_path_fixture() -&gt; Path:\n    34\t    return Path(__file__).parent / \&quot;test_data\&quot;\n    35\t\n    36\t\n    37\tdef test_term_levels_loaded(meddra_digraph: MedDRADiGraph, test_data_path: Path) -&gt; None:\n    38\t    meddra_digraph.load(test_data_path)\n    39\t    assert meddra_digraph.meddra_version is not None\n    40\t    assert len(meddra_digraph.term_levels) == 6\n    41\t    assert set(meddra_digraph.term_levels) == {\&quot;soc\&quot;, \&quot;hlgt\&quot;, \&quot;hlt\&quot;, \&quot;pt\&quot;, \&quot;llt\&quot;, \&quot;mdhier\&quot;}\n    42\t\n    43\t\n    44\tdef test_schema_levels_loaded(meddra_digraph: MedDRADiGraph, test_data_path: Path) -&gt; None:\n    45\t    meddra_digraph.load(test_data_path)\n    46\t    assert len(meddra_digraph.schema) == 12\n    47\t    # Check that core term files are in schema\n    48\t    assert \&quot;soc.asc\&quot; in meddra_digraph.schema\n    49\t    assert \&quot;hlgt.asc\&quot; in meddra_digraph.schema\n    50\t    assert \&quot;hlt.asc\&quot; in meddra_digraph.schema\n    51\t    assert \&quot;pt.asc\&quot; in meddra_digraph.schema\n    52\t    assert \&quot;llt.asc\&quot; in meddra_digraph.schema\n    53\t    assert \&quot;mdhier.asc\&quot; in meddra_digraph.schema\n    54\t\n    55\t\n    56\tdef test_edges_loaded(meddra_digraph: MedDRADiGraph, test_data_path: Path) -&gt; None:\n    57\t    meddra_digraph.load(test_data_path)\n    58\t    assert len(meddra_digraph.edges) &gt;= 0\n    59\t\n    60\t\n    61\tdef test_terms_loaded(meddra_digraph: MedDRADiGraph, test_data_path: Path) -&gt; None:\n    62\t    meddra_digraph.load(test_data_path)\n    63\t    assert len(meddra_digraph.terms) &gt; 1\n    64\t\n    65\t\n    66\tdef test_nodes_loaded(meddra_digraph: MedDRADiGraph, test_data_path: Path) -&gt; None:\n    67\t    meddra_digraph.load(test_data_path)\n    68\t    assert len(meddra_digraph.nodes) &gt; 1\n    69\t\n    70\t\n    71\t# Generate IDs automatically from the test parameters\n    72\tdef _generate_test_ids() -&gt; list[str]:\n    73\t    \&quot;\&quot;\&quot;Generate test IDs like soc1, soc2, hlgt1, hlgt2, etc.\&quot;\&quot;\&quot;\n    74\t    term_counts: dict[str, int] = {}\n    75\t    ids: list[str] = []\n    76\t    for term_level, _, _ in TEST_TERMS:\n    77\t        term_counts[term_level] = term_counts.get(term_level, 0) + 1\n    78\t        ids.append(f\&quot;{term_level}{term_counts[term_level]}\&quot;)\n    79\t    return ids\n    80\t\n    81\t\n    82\t@pytest.mark.parametrize(\&quot;term_level, term_code, expected_name\&quot;, TEST_TERMS, ids=_generate_test_ids())\n    83\tdef test_term_definitions_correct(\n    84\t    meddra_digraph: MedDRADiGraph, test_data_path: Path, term_level: str, term_code: str, expected_name: str\n    85\t) -&gt; None:\n    86\t    \&quot;\&quot;\&quot;Test that each term level has the correct definition/name in the test data.\&quot;\&quot;\&quot;\n    87\t    meddra_digraph.load(test_data_path)\n    88\t\n    89\t    assert term_code in meddra_digraph.terms, f\&quot;Term {term_code} not found in loaded terms\&quot;\n    90\t\n    91\t    term_data = meddra_digraph.terms[term_code]\n    92\t    assert term_data[\&quot;node_type\&quot;] == term_level, f\&quot;Expected node_type {term_level}, got {term_data['node_type']}\&quot;\n    93\t\n    94\t    name_field = f\&quot;{term_level}_name\&quot;\n    95\t    assert name_field in term_data, f\&quot;Name field {name_field} not found in term data\&quot;\n    96\t    assert (\n    97\t        term_data[name_field] == expected_name\n    98\t    ), f\&quot;Expected {name_field} to be '{expected_name}', got '{term_data[name_field]}'\&quot;\n    99\t\nTotal lines in file: 99\n&quot;,&quot;isError&quot;:false,&quot;requestId&quot;:&quot;&quot;}},&quot;6bf6b3fe-9f4c-485f-9c7b-ffd28c2ce307;toolu_vrtx_01XGa2oNN4UcGQp7WxBUspVA&quot;:{&quot;requestId&quot;:&quot;6bf6b3fe-9f4c-485f-9c7b-ffd28c2ce307&quot;,&quot;toolUseId&quot;:&quot;toolu_vrtx_01XGa2oNN4UcGQp7WxBUspVA&quot;,&quot;phase&quot;:8},&quot;22bb6e7d-6e5a-419e-881f-b1a434e76ef2;toolu_vrtx_01YJVBFjpyvmStsJFkDxV5af&quot;:{&quot;requestId&quot;:&quot;22bb6e7d-6e5a-419e-881f-b1a434e76ef2&quot;,&quot;toolUseId&quot;:&quot;toolu_vrtx_01YJVBFjpyvmStsJFkDxV5af&quot;,&quot;phase&quot;:8,&quot;result&quot;:{&quot;text&quot;:&quot;Here's the result of running `cat -n` on README.md:\n     1\t\n     2\t\n     3\t# MedDRA Loader\n     4\t\n     5\t[![CI](https://github.com/wullli/meddra-loader/workflows/CI/badge.svg)](https://github.com/wullli/meddra-loader/actions/workflows/ci.yml)\n     6\t[![codecov](https://codecov.io/gh/wullli/meddra-loader/branch/main/graph/badge.svg)](https://codecov.io/gh/wullli/meddra-loader)\n     7\t\n     8\tDISCLAIMER: This software does not give you access to MedDRA and you need a valid subscription to work with MedDRA data: https://www.meddra.org/. It merely provides tooling for loading the MedDRA data and hierarchy with python into a networkx graph. It is only intended for use with legitimately licensed MedDRA data and users are responsible for obtaining a valid license from the MSSO.\n     9\t\nTotal lines in file: 9\n&quot;,&quot;isError&quot;:false,&quot;requestId&quot;:&quot;&quot;}},&quot;70121754-b95d-4808-9446-c9323d0cac49;toolu_vrtx_01XehpA3137D7HguikFRKkFn&quot;:{&quot;requestId&quot;:&quot;70121754-b95d-4808-9446-c9323d0cac49&quot;,&quot;toolUseId&quot;:&quot;toolu_vrtx_01XehpA3137D7HguikFRKkFn&quot;,&quot;phase&quot;:5,&quot;result&quot;:{&quot;text&quot;:&quot;Here's the result of running `cat -n` on README.md:\n     1\t\n     2\t\n     3\t# MedDRA Loader\n     4\t\n     5\t[![CI](https://github.com/wullli/meddra-loader/workflows/CI/badge.svg)](https://github.com/wullli/meddra-loader/actions/workflows/ci.yml)\n     6\t[![codecov](https://codecov.io/gh/wullli/meddra-loader/branch/main/graph/badge.svg)](https://codecov.io/gh/wullli/meddra-loader)\n     7\t\n     8\tDISCLAIMER: This software does not give you access to MedDRA and you need a valid subscription to work with MedDRA data: https://www.meddra.org/. It merely provides tooling for loading the MedDRA data and hierarchy with python into a networkx graph. It is only intended for use with legitimately licensed MedDRA data and users are responsible for obtaining a valid license from the MSSO.\n     9\t\nTotal lines in file: 9\n&quot;,&quot;isError&quot;:false,&quot;requestId&quot;:&quot;&quot;}},&quot;2e9e9e4c-b5a9-4eaa-8d90-8f44714983cc;toolu_vrtx_01ApZbyEc3AqinoU81vQhLhK&quot;:{&quot;requestId&quot;:&quot;2e9e9e4c-b5a9-4eaa-8d90-8f44714983cc&quot;,&quot;toolUseId&quot;:&quot;toolu_vrtx_01ApZbyEc3AqinoU81vQhLhK&quot;,&quot;phase&quot;:5,&quot;result&quot;:{&quot;text&quot;:&quot;The following code sections were retrieved:\nPath: modules/meddra-loader/demo_loading.py\n     1\t#!/usr/bin/env python3\n     2\t\&quot;\&quot;\&quot;\n     3\tDemo script to show MedDRADiGraph loading dummy data.\n     4\t\&quot;\&quot;\&quot;\n     5\t\n     6\tfrom pathlib import Path\n     7\tfrom src.meddra_graph.meddra_digraph import MedDRADiGraph\n     8\t\n     9\tdef main():\n    10\t    # Create MedDRADiGraph instance\n    11\t    graph = MedDRADiGraph()\n    12\t    \n    13\t    # Load dummy test data\n    14\t    test_data_path = Path(\&quot;test_data\&quot;)\n    15\t    print(f\&quot;Loading dummy MedDRA data from: {test_data_path}\&quot;)\n    16\t    \n    17\t    graph.load(test_data_path)\n    18\t    \n    19\t    # Display loaded information\n    20\t    print(f\&quot;\\nMedDRA Version: {graph.meddra_version}\&quot;)\n    21\t    print(f\&quot;Term Levels: {graph.term_levels}\&quot;)\n    22\t    print(f\&quot;Number of terms loaded: {len(graph.terms)}\&quot;)\n    23\t    print(f\&quot;Schema files: {list(graph.schema.keys())}\&quot;)\n    24\t    \n    25\t    # Show some sample terms\n    26\t    print(\&quot;\\nSample terms loaded:\&quot;)\n    27\t    for i, (term_id, term_data) in enumerate(graph.terms.items()):\n    28\t        if i &gt;= 5:  # Show only first 5 terms\n    29\t            break\n    30\t        print(f\&quot;  {term_id}: {term_data}\&quot;)\n    31\t    \n    32\t    print(\&quot;\\nDummy data loading completed successfully!\&quot;)\n    33\t\n    34\tif __name__ == \&quot;__main__\&quot;:\n    35\t    main()\n...\nPath: src/meddra_graph/meddra_digraph.py\n     1\timport json\n     2\tfrom pathlib import Path\n     3\tfrom typing import Any, Union, cast\n     4\t\n     5\timport networkx as nx\n     6\t\n     7\tDEFAULT_SCHEMA_PATH = Path(__file__).parent / \&quot;resources\&quot; / \&quot;meddra_schema_v28.json\&quot;\n     8\t\n     9\t\n    10\tclass MedDRADiGraph(nx.DiGraph):\n    11\t\n    12\t    def __init__(self, *args: Any, **kwargs: Any) -&gt; None:\n    13\t        super().__init__(*args, **kwargs)\n    14\t        self.schema: dict[str, dict[str, str]] = {}\n    15\t        self.term_levels: set[str] = set()\n    16\t        self.edges: set[tuple[str, ...]] = set()\n    17\t        self.terms: dict[str, dict[str, Any]] = {}\n    18\t        self.meddra_version: Union[str, None] = None\n    19\t\n    20\t    def load(\n    21\t        self, meddra_directory_path: Union[str, Path], schema_path: Union[str, Path] = DEFAULT_SCHEMA_PATH\n    22\t    ) -&gt; None:\n    23\t        meddra_directory_path = Path(meddra_directory_path)\n    24\t        self.schema = self._load_schema(schema_path)\n    25\t        self.meddra_version = \&quot; \&quot;.join(self._load_file(meddra_directory_path / \&quot;meddra_release.asc\&quot;)[0]).strip()\n    26\t        assert meddra_directory_path.is_dir()\n    27\t        self.term_levels = self._get_term_levels(meddra_directory_path)\n    28\t        edges = set()\n    29\t        self.terms = {}\n    30\t        for file_path in meddra_directory_path.glob(\&quot;*.asc\&quot;):\n    31\t            if self._is_edge_file(file_path):\n    32\t                edges.update(self._load_file(file_path))\n    33\t\n    34\t        for file_path in meddra_directory_path.glob(\&quot;*.asc\&quot;):\n    35\t            if self._is_term_file(file_path):\n    36\t                data = self._load_file(file_path)\n    37\t                file_name = file_path.name\n    38\t                node_type = file_path.name.split(\&quot;.\&quot;)[0]\n    39\t\n    40\t                # Process each row of data\n    41\t                for row in data:\n    42\t                    if len(row) &gt;= len(self.schema[file_name]):\n    43\t                        # Create a dictionary for this term using the schema\n    44\t                        term_dict = dict(zip(self.schema[file_name].keys(), row))\n    45\t                        term_dict[\&quot;node_type\&quot;] = node_type\n    46\t\n    47\t                        # Use the first field as the key (usually the code)\n    48\t                        first_field = list(self.schema[file_name].keys())[0]\n    49\t                        term_key = term_dict[first_field]\n    50\t                        self.terms[term_key] = term_dict\n    51\t        self.add_edges_from(edges)\n    52\t        self.add_nodes_from(self.terms.keys())\n    53\t        nx.set_node_attributes(self, self.terms)\n    54\t\n    55\t    def _load_schema(self, schema_path: Union[str, Path]) -&gt; dict[str, dict[str, str]]:\n    56\t        with open(schema_path, \&quot;r\&quot;, encoding=\&quot;utf-8\&quot;) as f:\n    57\t            return cast(dict[str, dict[str, str]], json.load(f))\n    58\t\n    59\t    def _get_term_levels(self, meddra_directory_path: Path) -&gt; set[str]:\n    60\t        term_levels = set()\n    61\t        for file_path in meddra_directory_path.glob(\&quot;*.asc\&quot;):\n    62\t            file_name = file_path.name.split(\&quot;.\&quot;)[0]\n    63\t            if not \&quot;_\&quot; in file_name:\n    64\t                term_levels.add(file_name)\n    65\t        return term_levels\n    66\t\n    67\t    def _is_term_file(self, file_path: Path) -&gt; bool:\n    68\t        return file_path.name.split(\&quot;.\&quot;)[0] in self.term_levels\n    69\t\n    70\t    def _is_edge_file(self, file_path: Path) -&gt; bool:\n    71\t        if not \&quot;_\&quot; in file_path.name:\n    72\t            return False\n    73\t        try:\n    74\t            t0, t1 = file_path.name.split(\&quot;.\&quot;)[0].split(\&quot;_\&quot;)\n    75\t            return t0 in self.term_levels and t1 in self.term_levels\n    76\t        except (ValueError, IndexError):\n    77\t            return False\n    78\t\n    79\t    def _load_file(self, file_path: Path) -&gt; list[tuple[str, ...]]:\n    80\t        lines = []\n    81\t        with open(file_path, \&quot;r\&quot;, encoding=\&quot;utf-8\&quot;) as f:\n    82\t            for line in f:\n    83\t                lines.append(self._load_line(line))\n    84\t        return lines\n    85\t\n    86\t    def _load_line(self, line: str) -&gt; tuple[str, ...]:\n    87\t        return tuple(line.strip().split(\&quot;$\&quot;))\n...\nPath: src/meddra_graph/tests/test_meddra_digraph.py\n     1\tfrom pathlib import Path\n     2\t\n     3\timport pytest\n     4\t\n     5\tfrom meddra_graph.meddra_digraph import MedDRADiGraph\n     6\t\n     7\tTEST_TERMS = [\n     8\t    # SOC (System Organ Class) test cases\n     9\t    (\&quot;soc\&quot;, \&quot;10001000\&quot;, \&quot;Lorem ipsum dolor sit amet\&quot;),\n    10\t    (\&quot;soc\&quot;, \&quot;10002000\&quot;, \&quot;Consectetur adipiscing elit\&quot;),\n    11\t    (\&quot;soc\&quot;, \&quot;10003000\&quot;, \&quot;Sed do eiusmod tempor incididunt\&quot;),\n    12\t    # HLGT (High Level Group Term) test cases\n    13\t    (\&quot;hlgt\&quot;, \&quot;10001001\&quot;, \&quot;Nostrud exercitation ullamco\&quot;),\n    14\t    (\&quot;hlgt\&quot;, \&quot;10001002\&quot;, \&quot;Laboris nisi ut aliquip ex ea\&quot;),\n    15\t    (\&quot;hlgt\&quot;, \&quot;10002001\&quot;, \&quot;Commodo consequat duis aute irure\&quot;),\n    16\t    # HLT (High Level Term) test cases\n    17\t    (\&quot;hlt\&quot;, \&quot;10001101\&quot;, \&quot;Nulla pariatur excepteur sint occaecat\&quot;),\n    18\t    (\&quot;hlt\&quot;, \&quot;10001102\&quot;, \&quot;Cupidatat non proident sunt in culpa\&quot;),\n    19\t    (\&quot;hlt\&quot;, \&quot;10002101\&quot;, \&quot;Est laborum lorem ipsum dolor sit\&quot;),\n    20\t    # LLT (Lowest Level Term) test cases - using codes that don't conflict with mdhier.asc\n    21\t    (\&quot;llt\&quot;, \&quot;10001302\&quot;, \&quot;Cillum dolore eu fugiat nulla\&quot;),\n    22\t    (\&quot;llt\&quot;, \&quot;10001303\&quot;, \&quot;Pariatur excepteur sint occaecat\&quot;),\n    23\t    (\&quot;llt\&quot;, \&quot;10002302\&quot;, \&quot;Anim id est laborum sed ut\&quot;),\n    24\t]\n    25\t\n    26\t\n    27\t@pytest.fixture(name=\&quot;meddra_digraph\&quot;)\n    28\tdef meddra_digraph_fixture() -&gt; MedDRADiGraph:\n    29\t    return MedDRADiGraph()\n    30\t\n    31\t\n    32\t@pytest.fixture(name=\&quot;test_data_path\&quot;)\n    33\tdef test_data_path_fixture() -&gt; Path:\n    34\t    return Path(__file__).parent / \&quot;test_data\&quot;\n    35\t\n    36\t\n    37\tdef test_term_levels_loaded(meddra_digraph: MedDRADiGraph, test_data_path: Path) -&gt; None:\n    38\t    meddra_digraph.load(test_data_path)\n    39\t    assert meddra_digraph.meddra_version is not None\n    40\t    assert len(meddra_digraph.term_levels) == 6\n    41\t    assert set(meddra_digraph.term_levels) == {\&quot;soc\&quot;, \&quot;hlgt\&quot;, \&quot;hlt\&quot;, \&quot;pt\&quot;, \&quot;llt\&quot;, \&quot;mdhier\&quot;}\n    42\t\n    43\t\n    44\tdef test_schema_levels_loaded(meddra_digraph: MedDRADiGraph, test_data_path: Path) -&gt; None:\n    45\t    meddra_digraph.load(test_data_path)\n    46\t    assert len(meddra_digraph.schema) == 12\n    47\t    # Check that core term files are in schema\n    48\t    assert \&quot;soc.asc\&quot; in meddra_digraph.schema\n    49\t    assert \&quot;hlgt.asc\&quot; in meddra_digraph.schema\n    50\t    assert \&quot;hlt.asc\&quot; in meddra_digraph.schema\n    51\t    assert \&quot;pt.asc\&quot; in meddra_digraph.schema\n    52\t    assert \&quot;llt.asc\&quot; in meddra_digraph.schema\n    53\t    assert \&quot;mdhier.asc\&quot; in meddra_digraph.schema\n    54\t\n    55\t\n    56\tdef test_edges_loaded(meddra_digraph: MedDRADiGraph, test_data_path: Path) -&gt; None:\n    57\t    meddra_digraph.load(test_data_path)\n    58\t    assert len(meddra_digraph.edges) &gt;= 0\n    59\t\n    60\t\n    61\tdef test_terms_loaded(meddra_digraph: MedDRADiGraph, test_data_path: Path) -&gt; None:\n    62\t    meddra_digraph.load(test_data_path)\n    63\t    assert len(meddra_digraph.terms) &gt; 1\n    64\t\n    65\t\n    66\tdef test_nodes_loaded(meddra_digraph: MedDRADiGraph, test_data_path: Path) -&gt; None:\n    67\t    meddra_digraph.load(test_data_path)\n    68\t    assert len(meddra_digraph.nodes) &gt; 1\n    69\t\n    70\t\n    71\t# Generate IDs automatically from the test parameters\n    72\tdef _generate_test_ids() -&gt; list[str]:\n    73\t    \&quot;\&quot;\&quot;Generate test IDs like soc1, soc2, hlgt1, hlgt2, etc.\&quot;\&quot;\&quot;\n    74\t    term_counts: dict[str, int] = {}\n    75\t    ids: list[str] = []\n    76\t    for term_level, _, _ in TEST_TERMS:\n    77\t        term_counts[term_level] = term_counts.get(term_level, 0) + 1\n    78\t        ids.append(f\&quot;{term_level}{term_counts[term_level]}\&quot;)\n    79\t    return ids\n    80\t\n    81\t\n    82\t@pytest.mark.parametrize(\&quot;term_level, term_code, expected_name\&quot;, TEST_TERMS, ids=_generate_test_ids())\n    83\tdef test_term_definitions_correct(\n    84\t    meddra_digraph: MedDRADiGraph, test_data_path: Path, term_level: str, term_code: str, expected_name: str\n    85\t) -&gt; None:\n    86\t    \&quot;\&quot;\&quot;Test that each term level has the correct definition/name in the test data.\&quot;\&quot;\&quot;\n    87\t    meddra_digraph.load(test_data_path)\n    88\t\n    89\t    assert term_code in meddra_digraph.terms, f\&quot;Term {term_code} not found in loaded terms\&quot;\n    90\t\n    91\t    term_data = meddra_digraph.terms[term_code]\n    92\t    assert term_data[\&quot;node_type\&quot;] == term_level, f\&quot;Expected node_type {term_level}, got {term_data['node_type']}\&quot;\n...\nPath: src/meddra_graph/tests/test_data/README.md\n     1\t# MedDRA Test Data\n     2\t\n     3\tThis directory contains dummy test data files for testing the MedDRADiGraph loading functionality.\n     4\t\n     5\t## Important Note\n     6\t\n     7\t**All data in these files is completely anonymized and fake.** This includes:\n     8\t- Lorem Ipsum text for all term names and descriptions\n     9\t- Anonymized codes (e.g., ABC, DEF, PQR instead of real abbreviations)\n    10\t- Fake version numbers (99.0 instead of real MedDRA versions)\n    11\t- Generic ICD codes (X00-X99, Y00-Y99, Z00-Z99 instead of real medical codes)\n    12\t- Anonymized reference codes for all external coding systems\n    13\t\n    14\tThis ensures no real MedDRA data is stored in this repository, which is important for licensing compliance.\n    15\t\n    16\t## Data Format\n    17\t\n    18\tAll files use the MedDRA standard format (version 28.0):\n    19\t- Fields are delimited by `$` characters\n    20\t- Each line represents one record\n    21\t- Field structure follows the schema defined in `src/meddra_loader/resources/meddra_schema_v28.json`\n    22\t\n...\nPath: README.md\n     1\t\n     2\t\n     3\t# MedDRA Loader\n     4\t\n     5\t[![CI](https://github.com/wullli/meddra-loader/workflows/CI/badge.svg)](https://github.com/wullli/meddra-loader/actions/workflows/ci.yml)\n     6\t[![codecov](https://codecov.io/gh/wullli/meddra-loader/branch/main/graph/badge.svg)](https://codecov.io/gh/wullli/meddra-loader)\n     7\t\n     8\tDISCLAIMER: This software does not give you access to MedDRA and you need a valid subscription to work with MedDRA data: https://www.meddra.org/. It merely provides tooling for loading the MedDRA data and hierarchy with python into a networkx graph. It is only intended for use with legitimately licensed MedDRA data and users are responsible for obtaining a valid license from the MSSO.\n...\nPath: src/sprint/ctcae.py\n     1\t# Written by Alessandro Motta &lt;alessandro.motta@hslu.ch&gt;\n     2\t\n     3\timport pandas as pd\n     4\t\n     5\tfrom pathlib import Path\n     6\t\n     7\t\n     8\tdef load():\n     9\t    file_path = Path(__file__).parent.parent.parent / \&quot;data\&quot; / 'manual-full-text-analysis' / 'CTCAE_v5.0.xlsx'\n    10\t\n    11\t    renames = {\n    12\t        'CTCAE Term': 'name',\n    13\t        'MedDRA SOC': 'system_organ_class',\n    14\t        'Definition': 'definition',\n    15\t    }\n    16\t\n    17\t    ctcae = (\n    18\t        pd\n    19\t        .read_excel(file_path)\n    20\t        [renames.keys()]\n    21\t        .map(str.strip)\n    22\t    )\n...\nPath: src/sprint/entrypoints/ctcae_detection_gpt.py\n...\n    44\t\n    45\t\n    46\tdef study_name_to_markdown_path(study_name, *, full_text_dir) -&gt; str:\n    47\t    assert len(study_name) &gt; 0\n    48\t    init_char = study_name[0]\n    49\t\n    50\t    assert init_char.isdigit() or init_char == 'A', f\&quot;study_name={study_name}\&quot;\n    51\t    study_dir = 'first-search' if init_char.isdigit() else 'updated-search'\n    52\t    study_id = study_name.split('-')[0]\n    53\t\n    54\t    md_path = Path(full_text_dir) / study_dir / f\&quot;{study_id}_*.md\&quot;\n    55\t    md_path = glob(str(md_path))\n    56\t\n    57\t    assert len(md_path) &lt;= 1\n    58\t    return md_path[0] if len(md_path) else None\n    59\t\n    60\t\n    61\tdef detect_ctcaes(file_path, ctcae) -&gt; list[str]:\n    62\t    with open(file_path, 'r') as file:\n    63\t        text = file.read()\n    64\t\n    65\t    if (text_len := len(text)) &gt; max_text_len:\n    66\t        raise ValueError(f\&quot;Excessively long text ({text_len} &gt; {max_text_len} chars)\&quot;)\n    67\t\n    68\t    aes = sprint.full_text.ctcae_detection_gpt.detect(ctcae=ctcae, text=text)\n    69\t    return aes\n    70\t\n    71\t\n    72\tdef detect_dspy(file_path, detector: CtcaePredictor) -&gt; tuple[list[str], dict]:\n    73\t    with open(file_path, 'r') as file:\n    74\t        text = file.read()\n    75\t\n    76\t    if (text_len := len(text)) &gt; max_text_len:\n    77\t        raise ValueError(f\&quot;Excessively long text ({text_len} &gt; {max_text_len} chars)\&quot;)\n    78\t\n    79\t    return detector(text)\n...\nPath: src/meddra_graph/resources/meddra_schema_v28.json\n     1\t{\n     2\t  \&quot;llt.asc\&quot;: {\n     3\t    \&quot;llt_code\&quot;: \&quot;int\&quot;,\n     4\t    \&quot;llt_name\&quot;: \&quot;str\&quot;,\n     5\t    \&quot;pt_code\&quot;: \&quot;int\&quot;,\n     6\t    \&quot;llt_whoart_code\&quot;: \&quot;str\&quot;,\n     7\t    \&quot;llt_harts_code\&quot;: \&quot;int\&quot;,\n     8\t    \&quot;llt_costart_sym\&quot;: \&quot;str\&quot;,\n     9\t    \&quot;llt_icd9_code\&quot;: \&quot;str\&quot;,\n    10\t    \&quot;llt_icd9cm_code\&quot;: \&quot;str\&quot;,\n    11\t    \&quot;llt_icd10_code\&quot;: \&quot;str\&quot;,\n    12\t    \&quot;llt_currency\&quot;: \&quot;str\&quot;,\n    13\t    \&quot;llt_jart_code\&quot;: \&quot;str\&quot;\n    14\t  },\n    15\t  \&quot;pt.asc\&quot;: {\n    16\t    \&quot;pt_code\&quot;: \&quot;int\&quot;,\n    17\t    \&quot;pt_name\&quot;: \&quot;str\&quot;,\n    18\t    \&quot;null_field\&quot;: \&quot;str\&quot;,\n    19\t    \&quot;pt_soc_code\&quot;: \&quot;int\&quot;,\n    20\t    \&quot;pt_whoart_code\&quot;: \&quot;str\&quot;,\n    21\t    \&quot;pt_harts_code\&quot;: \&quot;int\&quot;,\n    22\t    \&quot;pt_costart_sym\&quot;: \&quot;str\&quot;,\n    23\t    \&quot;pt_icd9_code\&quot;: \&quot;str\&quot;,\n    24\t    \&quot;pt_icd9cm_code\&quot;: \&quot;str\&quot;,\n    25\t    \&quot;pt_icd10_code\&quot;: \&quot;str\&quot;,\n    26\t    \&quot;pt_jart_code\&quot;: \&quot;str\&quot;\n    27\t  },\n    28\t  \&quot;hlt.asc\&quot;: {\n    29\t    \&quot;hlt_code\&quot;: \&quot;int\&quot;,\n    30\t    \&quot;hlt_name\&quot;: \&quot;str\&quot;,\n    31\t    \&quot;hlt_whoart_code\&quot;: \&quot;str\&quot;,\n    32\t    \&quot;hlt_harts_code\&quot;: \&quot;int\&quot;,\n    33\t    \&quot;hlt_costart_sym\&quot;: \&quot;str\&quot;,\n    34\t    \&quot;hlt_icd9_code\&quot;: \&quot;str\&quot;,\n    35\t    \&quot;hlt_icd9cm_code\&quot;: \&quot;str\&quot;,\n    36\t    \&quot;hlt_icd10_code\&quot;: \&quot;str\&quot;,\n    37\t    \&quot;hlt_jart_code\&quot;: \&quot;str\&quot;\n    38\t  },\n...\n   103\t  \&quot;smq_content.asc\&quot;: {\n   104\t    \&quot;smq_code\&quot;: \&quot;int\&quot;,\n   105\t    \&quot;term_code\&quot;: \&quot;int\&quot;,\n   106\t    \&quot;term_level\&quot;: \&quot;int\&quot;,\n   107\t    \&quot;term_scope\&quot;: \&quot;int\&quot;,\n   108\t    \&quot;term_category\&quot;: \&quot;str\&quot;,\n   109\t    \&quot;term_weight\&quot;: \&quot;int\&quot;,\n   110\t    \&quot;term_status\&quot;: \&quot;str\&quot;,\n   111\t    \&quot;term_addition_version\&quot;: \&quot;str\&quot;,\n   112\t    \&quot;term_last_modified_version\&quot;: \&quot;str\&quot;\n   113\t  }\n   114\t}...\nPath: src/sprint/entrypoints/ctcae_detection.py\n...\n    16\t\n    17\t\n    18\tdef load_ctcae(file_path):\n    19\t    ctcae = pd.read_excel(file_path)\n    20\t\n    21\t    # Strip spaces (empty definitions are ' -' by default)\n    22\t    ctcae['Definition'] = ctcae['Definition'].map(str.strip)\n    23\t    # Remove entries without definition\n    24\t    ctcae = ctcae.loc[ctcae['Definition'] != '-']\n    25\t\n    26\t    # Build categorical 'class' column from 'MedDRA SOC'\n    27\t    ctcae['Class'] = ctcae['MedDRA SOC'].map(str.lower).astype('category')\n    28\t    classes = ctcae['Class'].cat.categories\n    29\t\n    30\t    # Clean up output table\n    31\t    ctcae = ctcae[['CTCAE Term', 'Definition', 'Class']]\n    32\t    return ctcae\n...\nPath: src/sprint/full_text/annotations.py\n...\n    75\t\n    76\t    # Group CTCAE AEs by study\n    77\t    aes = aes.groupby('study_name').aggregate({\&quot;ctcae_index\&quot;: lambda ids: list(np.unique(ids)),\n    78\t                                               \&quot;study_id\&quot;: \&quot;first\&quot;})\n    79\t    return aes\n    80\t\n    81\t\n    82\tdef load(root_dir):\n    83\t    def load_aes(root_dir):\n    84\t        \&quot;\&quot;\&quot;Loads adverse effect (AE) annotations from Excel file\&quot;\&quot;\&quot;\n    85\t        file_path = root_dir / 'SPRINT.LLM.AEs-20240619.xlsx'\n    86\t        aes = pd.read_excel(file_path, header=0, dtype=str)\n    87\t\n    88\t        aes = pd.DataFrame(data=dict(\n    89\t            study_name=aes['studyname'],\n    90\t            treatment_name=aes['treatment'],\n    91\t            treatment_group_id=aes['master_index_group'],\n    92\t            aes=(\n    93\t                aes\n    94\t                .loc[:, 'ae_name1':]  # Take all columns starting with ae_name1\n    95\t                .apply(\n    96\t                    lambda series: (\n    97\t                        series\n    98\t                        .dropna(ignore_index=True)  # Ignore empty AE columns\n    99\t                        .values  # Convert to list (of strings)\n   100\t                    ),\n   101\t                    axis='columns',\n   102\t                )\n   103\t            ),\n   104\t        ))\n   105\t\n   106\t        return aes\n   107\t\n   108\t    def load_linkage(root_root):\n   109\t        \&quot;\&quot;\&quot;Loads AE-to-PDF linkage from Excel file\&quot;\&quot;\&quot;\n   110\t        file_path = root_dir / 'SPRINT.LLM.linkage-20240619.xlsx'\n   111\t        linkage = pd.read_excel(file_path, header=0, dtype=str)\n   112\t\n   113\t        linkage = pd.DataFrame(data=dict(\n   114\t            study_name=linkage['studyname'],\n   115\t            file_name=linkage['name.PDF'],\n   116\t            search=linkage['search'],\n   117\t        ))\n   118\t\n   119\t        if any(bad := linkage.isna().any(axis='columns').values):\n   120\t            LOGGER.warning(\n   121\t                \&quot;The following linkage entries are incomplete and will be dropped:\\n\&quot;\n   122\t                \&quot;\\n\&quot;\n   123\t                \&quot;{}\&quot;.format(linkage.loc[bad])\n   124\t            )\n   125\t            linkage = linkage[~bad]\n   126\t\n   127\t        assert not linkage.isna().any(axis=None)\n   128\t        return linkage\n   129\t\n   130\t    def linkage_file_path(link):\n   131\t        dir_path = LINKAGE_SEARCH_TO_DIR[link['search']]\n   132\t        file_path = root_dir / dir_path / link['file_name']\n   133\t        return file_path\n...\nPath: src/sprint/full_text/ctcae_detection_dspy.py\n...\n   154\t\n   155\t\n   156\tclass CtcaePredictor(dspy.Module):\n   157\t\n   158\t    def __init__(self, ctcaes: pd.DataFrame, model: str = 'gpt-4o', k: int = 10):\n   159\t        super().__init__()\n   160\t        # self.ctcae_rm = CtcaeContext()\n   161\t        # self.ctcae_rm.fill(ctcaes)\n   162\t        self.aenames = ctcaes.name.apply(lambda x: x.lower().strip()).tolist()\n   163\t        self.effect_descriptions = ctcaes.desc.tolist()\n   164\t        self.name_to_desc = dict(zip(self.aenames, self.effect_descriptions))\n   165\t        # self.ctcae_retriever = SimpleRetrieve(k=k)\n   166\t        self.ctcae_retriever = dspy.ChainOfThought(CtcaeRetrieve)\n   167\t        self.summarize = dspy.ChainOfThought(Summarize)\n   168\t        self.predict = dspy.ChainOfThought(Predict)\n   169\t        if \&quot;gpt\&quot; in model:\n   170\t            self.llm = dspy.LM(model=model)\n   171\t        else:\n   172\t            self.llm = dspy.OllamaLocal(model='llama3.1')\n   173\t        dspy.configure(lm=self.llm, trace=[])\n   174\t\n   175\t    def forward(self, study_text: str):\n   176\t        summary = self.summarize(study=study_text).summary\n...&quot;,&quot;isError&quot;:false,&quot;requestId&quot;:&quot;&quot;}},&quot;2323422d-21c5-4704-a395-c89dae0c1b32;toolu_vrtx_01UzWHTnu32BFVB6sQbMet1t&quot;:{&quot;requestId&quot;:&quot;2323422d-21c5-4704-a395-c89dae0c1b32&quot;,&quot;toolUseId&quot;:&quot;toolu_vrtx_01UzWHTnu32BFVB6sQbMet1t&quot;,&quot;phase&quot;:7},&quot;f713aebc-b981-4353-be7f-705e52353438;toolu_vrtx_01Sw7879m92nfgABQ14Gtjyy&quot;:{&quot;requestId&quot;:&quot;f713aebc-b981-4353-be7f-705e52353438&quot;,&quot;toolUseId&quot;:&quot;toolu_vrtx_01Sw7879m92nfgABQ14Gtjyy&quot;,&quot;phase&quot;:8,&quot;result&quot;:{&quot;text&quot;:&quot;Here's the result of running `cat -n` on README.md:\n     1\t\n     2\t\n     3\t# MedDRA Loader\n     4\t\n     5\t[![CI](https://github.com/wullli/meddra-loader/workflows/CI/badge.svg)](https://github.com/wullli/meddra-loader/actions/workflows/ci.yml)\n     6\t[![codecov](https://codecov.io/gh/wullli/meddra-loader/branch/main/graph/badge.svg)](https://codecov.io/gh/wullli/meddra-loader)\n     7\t\n     8\tDISCLAIMER: This software does not give you access to MedDRA and you need a valid subscription to work with MedDRA data: https://www.meddra.org/. It merely provides tooling for loading the MedDRA data and hierarchy with python into a networkx graph. It is only intended for use with legitimately licensed MedDRA data and users are responsible for obtaining a valid license from the MSSO.\n     9\t\nTotal lines in file: 9\n&quot;,&quot;isError&quot;:false,&quot;requestId&quot;:&quot;&quot;}},&quot;077d25f8-516f-4cae-980f-421a87a97d93;toolu_vrtx_011vqv1FHbGdUsNKs6S7dxyn&quot;:{&quot;requestId&quot;:&quot;077d25f8-516f-4cae-980f-421a87a97d93&quot;,&quot;toolUseId&quot;:&quot;toolu_vrtx_011vqv1FHbGdUsNKs6S7dxyn&quot;,&quot;phase&quot;:5,&quot;result&quot;:{&quot;text&quot;:&quot;Here's the result of running `cat -n` on README.md:\n     1\t\n     2\t\n     3\t# MedDRA Loader\n     4\t\n     5\t[![CI](https://github.com/wullli/meddra-loader/workflows/CI/badge.svg)](https://github.com/wullli/meddra-loader/actions/workflows/ci.yml)\n     6\t[![codecov](https://codecov.io/gh/wullli/meddra-loader/branch/main/graph/badge.svg)](https://codecov.io/gh/wullli/meddra-loader)\n     7\t\n     8\tDISCLAIMER: This software does not give you access to MedDRA and you need a valid subscription to work with MedDRA data: https://www.meddra.org/. It merely provides tooling for loading the MedDRA data and hierarchy with python into a networkx graph. It is only intended for use with legitimately licensed MedDRA data and users are responsible for obtaining a valid license from the MSSO.\n     9\t\nTotal lines in file: 9\n&quot;,&quot;isError&quot;:false,&quot;requestId&quot;:&quot;&quot;}},&quot;eac253cf-f9b4-440c-b78a-edcac5b88089;toolu_vrtx_014QMiy1SHkpw4J7d1x39eJR&quot;:{&quot;requestId&quot;:&quot;eac253cf-f9b4-440c-b78a-edcac5b88089&quot;,&quot;toolUseId&quot;:&quot;toolu_vrtx_014QMiy1SHkpw4J7d1x39eJR&quot;,&quot;phase&quot;:8},&quot;da9d2b9f-fa7a-47b4-8f6d-bcc7eee69ee9;toolu_vrtx_01AHxHAMYwY4WGFyGuYwUVYK&quot;:{&quot;requestId&quot;:&quot;da9d2b9f-fa7a-47b4-8f6d-bcc7eee69ee9&quot;,&quot;toolUseId&quot;:&quot;toolu_vrtx_01AHxHAMYwY4WGFyGuYwUVYK&quot;,&quot;phase&quot;:8,&quot;result&quot;:{&quot;text&quot;:&quot;Here's the result of running `cat -n` on src/meddra_graph/tests/test_meddra_loader.py:\n     1\tfrom pathlib import Path\n     2\t\n     3\timport pandas as pd\n     4\timport pytest\n     5\t\n     6\tfrom meddra_graph.meddra_loader import MedDRALoader, MedDRAData\n     7\t\n     8\tTEST_TERMS = [\n     9\t    # SOC (System Organ Classes)\n    10\t    (\&quot;soc\&quot;, \&quot;10001000\&quot;, \&quot;Lorem ipsum dolor sit amet\&quot;),\n    11\t    (\&quot;soc\&quot;, \&quot;10002000\&quot;, \&quot;Consectetur adipiscing elit\&quot;),\n    12\t    (\&quot;soc\&quot;, \&quot;10003000\&quot;, \&quot;Sed do eiusmod tempor incididunt\&quot;),\n    13\t    (\&quot;soc\&quot;, \&quot;10004000\&quot;, \&quot;Ut labore et dolore magna aliqua\&quot;),\n    14\t    (\&quot;soc\&quot;, \&quot;10005000\&quot;, \&quot;Enim ad minim veniam quis\&quot;),\n    15\t\n    16\t    # HLGT (High Level Group Terms)\n    17\t    (\&quot;hlgt\&quot;, \&quot;10001001\&quot;, \&quot;Nostrud exercitation ullamco\&quot;),\n    18\t    (\&quot;hlgt\&quot;, \&quot;10001002\&quot;, \&quot;Laboris nisi ut aliquip ex ea\&quot;),\n    19\t    (\&quot;hlgt\&quot;, \&quot;10002001\&quot;, \&quot;Commodo consequat duis aute irure\&quot;),\n    20\t    (\&quot;hlgt\&quot;, \&quot;10002002\&quot;, \&quot;Dolor in reprehenderit in voluptate\&quot;),\n    21\t    (\&quot;hlgt\&quot;, \&quot;10003001\&quot;, \&quot;Velit esse cillum dolore eu fugiat\&quot;),\n    22\t\n    23\t    # HLT (High Level Terms)\n    24\t    (\&quot;hlt\&quot;, \&quot;10001101\&quot;, \&quot;Nulla pariatur excepteur sint occaecat\&quot;),\n    25\t    (\&quot;hlt\&quot;, \&quot;10001102\&quot;, \&quot;Cupidatat non proident sunt in culpa\&quot;),\n    26\t    (\&quot;hlt\&quot;, \&quot;10002101\&quot;, \&quot;Est laborum lorem ipsum dolor sit\&quot;),\n    27\t    (\&quot;hlt\&quot;, \&quot;10002102\&quot;, \&quot;Amet consectetur adipiscing elit sed\&quot;),\n    28\t    (\&quot;hlt\&quot;, \&quot;10003101\&quot;, \&quot;Duis aute irure dolor in reprehenderit\&quot;),\n    29\t\n    30\t    # PT (Preferred Terms)\n    31\t    (\&quot;pt\&quot;, \&quot;10001201\&quot;, \&quot;Do eiusmod tempor incididunt ut\&quot;),\n    32\t    (\&quot;pt\&quot;, \&quot;10001202\&quot;, \&quot;Labore et dolore magna aliqua\&quot;),\n    33\t    (\&quot;pt\&quot;, \&quot;10001301\&quot;, \&quot;Enim ad minim veniam quis nostrud\&quot;),\n    34\t    (\&quot;pt\&quot;, \&quot;10002201\&quot;, \&quot;Exercitation ullamco laboris nisi\&quot;),\n    35\t    (\&quot;pt\&quot;, \&quot;10002202\&quot;, \&quot;Ut aliquip ex ea commodo consequat\&quot;),\n    36\t\n    37\t    # LLT (Lowest Level Terms)\n    38\t    (\&quot;llt\&quot;, \&quot;10001302\&quot;, \&quot;Cillum dolore eu fugiat nulla\&quot;),\n    39\t    (\&quot;llt\&quot;, \&quot;10001303\&quot;, \&quot;Pariatur excepteur sint occaecat\&quot;),\n    40\t    (\&quot;llt\&quot;, \&quot;10002302\&quot;, \&quot;Anim id est laborum sed ut\&quot;),\n    41\t    (\&quot;llt\&quot;, \&quot;10002303\&quot;, \&quot;Lorem ipsum dolor sit amet\&quot;),\n    42\t    (\&quot;llt\&quot;, \&quot;10003301\&quot;, \&quot;Consectetur adipiscing elit\&quot;),\n    43\t]\n    44\t\n    45\tNUMBER_OF_TEST_TERMS = len(TEST_TERMS)\n    46\tNUMBER_OF_TEST_EDGES = 19\n    47\t\n    48\t\n    49\tdef _generate_test_ids() -&gt; list[str]:\n    50\t    \&quot;\&quot;\&quot;Generate test IDs like soc1, soc2, hlgt1, hlgt2, etc.\&quot;\&quot;\&quot;\n    51\t    term_counts: dict[str, int] = {}\n    52\t    ids: list[str] = []\n    53\t    for term_level, _, _ in TEST_TERMS:\n    54\t        term_counts[term_level] = term_counts.get(term_level, 0) + 1\n    55\t        ids.append(f\&quot;{term_level}{term_counts[term_level]}\&quot;)\n    56\t    return ids\n    57\t\n    58\t\n    59\t@pytest.fixture(name=\&quot;meddra_data\&quot;)\n    60\tdef meddra_data_fixture() -&gt; MedDRAData:\n    61\t    return MedDRALoader.load(Path(__file__).parent / \&quot;test_data\&quot;)\n    62\t\n    63\t\n    64\tdef test_loading_passes() -&gt; None:\n    65\t    MedDRALoader.load(Path(__file__).parent / \&quot;test_data\&quot;)\n    66\t\n    67\t\n    68\tdef test_version_loaded(meddra_data: MedDRAData) -&gt; None:\n    69\t    assert meddra_data.version == \&quot;99.0 TestLang Dummy Data Release\&quot;\n    70\t\n    71\t\n    72\tdef test_term_levels_loaded(meddra_data: MedDRAData) -&gt; None:\n    73\t    df = pd.DataFrame.from_records(list(meddra_data.terms.values()))\n    74\t    assert len(df[\&quot;term_type\&quot;].unique()) == 5\n    75\t    assert set(df[\&quot;term_type\&quot;].unique()) == {\&quot;soc\&quot;, \&quot;hlgt\&quot;, \&quot;hlt\&quot;, \&quot;pt\&quot;, \&quot;llt\&quot;}\n    76\t\n    77\t\n    78\tdef test_schema_levels_loaded(meddra_data: MedDRAData) -&gt; None:\n    79\t    assert len(meddra_data.schema) == 12\n    80\t    assert all(fn in meddra_data.schema for fn in [\&quot;soc.asc\&quot;, \&quot;hlgt.asc\&quot;, \&quot;hlt.asc\&quot;, \&quot;pt.asc\&quot;, \&quot;llt.asc\&quot;])\n    81\t\n    82\t\n    83\tdef test_edges_loaded(meddra_data: MedDRAData) -&gt; None:\n    84\t    assert len(meddra_data.edges) == NUMBER_OF_TEST_EDGES\n    85\t\n    86\t\n    87\tdef test_terms_loaded(meddra_data: MedDRAData) -&gt; None:\n    88\t    assert len(meddra_data.terms) == NUMBER_OF_TEST_TERMS\n    89\t\n    90\t\n    91\tdef test_graph_nodes_loaded(meddra_data: MedDRAData) -&gt; None:\n    92\t    assert len(meddra_data.to_graph().nodes()) == NUMBER_OF_TEST_TERMS\n    93\t\n    94\t\n    95\tdef test_graph_edges_loaded(meddra_data: MedDRAData) -&gt; None:\n    96\t    assert len(meddra_data.to_graph().edges()) == NUMBER_OF_TEST_EDGES\n    97\t\n    98\t\n    99\tdef test_term_definitions_correct(meddra_data: MedDRAData) -&gt; None:\n   100\t    \&quot;\&quot;\&quot;Test that each term has the correct definition/name in the loaded data.\&quot;\&quot;\&quot;\n   101\t    g = meddra_data.to_graph()\n   102\t    for term_type, term_code, expected_name in TEST_TERMS:\n   103\t        assert g.nodes[term_code][f\&quot;{term_type}_code\&quot;] == term_code\n   104\t        assert g.nodes[term_code][f\&quot;{term_type}_name\&quot;] == expected_name\n   105\t        assert g.nodes[term_code][\&quot;term_type\&quot;] == term_type\n   106\t\nTotal lines in file: 106\n&quot;,&quot;isError&quot;:false,&quot;requestId&quot;:&quot;&quot;}},&quot;cc25f179-5a7a-466c-bc36-62eb1e878472;toolu_vrtx_01SDKYgZJiMyBfzUsi4ndp4W&quot;:{&quot;requestId&quot;:&quot;cc25f179-5a7a-466c-bc36-62eb1e878472&quot;,&quot;toolUseId&quot;:&quot;toolu_vrtx_01SDKYgZJiMyBfzUsi4ndp4W&quot;,&quot;phase&quot;:5,&quot;result&quot;:{&quot;text&quot;:&quot;Here's the result of running `cat -n` on src/meddra_graph/tests/test_meddra_loader.py:\n     1\tfrom pathlib import Path\n     2\t\n     3\timport pandas as pd\n     4\timport pytest\n     5\t\n     6\tfrom meddra_graph.meddra_loader import MedDRALoader, MedDRAData\n     7\t\n     8\tTEST_TERMS = [\n     9\t    # SOC (System Organ Classes)\n    10\t    (\&quot;soc\&quot;, \&quot;10001000\&quot;, \&quot;Lorem ipsum dolor sit amet\&quot;),\n    11\t    (\&quot;soc\&quot;, \&quot;10002000\&quot;, \&quot;Consectetur adipiscing elit\&quot;),\n    12\t    (\&quot;soc\&quot;, \&quot;10003000\&quot;, \&quot;Sed do eiusmod tempor incididunt\&quot;),\n    13\t    (\&quot;soc\&quot;, \&quot;10004000\&quot;, \&quot;Ut labore et dolore magna aliqua\&quot;),\n    14\t    (\&quot;soc\&quot;, \&quot;10005000\&quot;, \&quot;Enim ad minim veniam quis\&quot;),\n    15\t\n    16\t    # HLGT (High Level Group Terms)\n    17\t    (\&quot;hlgt\&quot;, \&quot;10001001\&quot;, \&quot;Nostrud exercitation ullamco\&quot;),\n    18\t    (\&quot;hlgt\&quot;, \&quot;10001002\&quot;, \&quot;Laboris nisi ut aliquip ex ea\&quot;),\n    19\t    (\&quot;hlgt\&quot;, \&quot;10002001\&quot;, \&quot;Commodo consequat duis aute irure\&quot;),\n    20\t    (\&quot;hlgt\&quot;, \&quot;10002002\&quot;, \&quot;Dolor in reprehenderit in voluptate\&quot;),\n    21\t    (\&quot;hlgt\&quot;, \&quot;10003001\&quot;, \&quot;Velit esse cillum dolore eu fugiat\&quot;),\n    22\t\n    23\t    # HLT (High Level Terms)\n    24\t    (\&quot;hlt\&quot;, \&quot;10001101\&quot;, \&quot;Nulla pariatur excepteur sint occaecat\&quot;),\n    25\t    (\&quot;hlt\&quot;, \&quot;10001102\&quot;, \&quot;Cupidatat non proident sunt in culpa\&quot;),\n    26\t    (\&quot;hlt\&quot;, \&quot;10002101\&quot;, \&quot;Est laborum lorem ipsum dolor sit\&quot;),\n    27\t    (\&quot;hlt\&quot;, \&quot;10002102\&quot;, \&quot;Amet consectetur adipiscing elit sed\&quot;),\n    28\t    (\&quot;hlt\&quot;, \&quot;10003101\&quot;, \&quot;Duis aute irure dolor in reprehenderit\&quot;),\n    29\t\n    30\t    # PT (Preferred Terms)\n    31\t    (\&quot;pt\&quot;, \&quot;10001201\&quot;, \&quot;Do eiusmod tempor incididunt ut\&quot;),\n    32\t    (\&quot;pt\&quot;, \&quot;10001202\&quot;, \&quot;Labore et dolore magna aliqua\&quot;),\n    33\t    (\&quot;pt\&quot;, \&quot;10001301\&quot;, \&quot;Enim ad minim veniam quis nostrud\&quot;),\n    34\t    (\&quot;pt\&quot;, \&quot;10002201\&quot;, \&quot;Exercitation ullamco laboris nisi\&quot;),\n    35\t    (\&quot;pt\&quot;, \&quot;10002202\&quot;, \&quot;Ut aliquip ex ea commodo consequat\&quot;),\n    36\t\n    37\t    # LLT (Lowest Level Terms)\n    38\t    (\&quot;llt\&quot;, \&quot;10001302\&quot;, \&quot;Cillum dolore eu fugiat nulla\&quot;),\n    39\t    (\&quot;llt\&quot;, \&quot;10001303\&quot;, \&quot;Pariatur excepteur sint occaecat\&quot;),\n    40\t    (\&quot;llt\&quot;, \&quot;10002302\&quot;, \&quot;Anim id est laborum sed ut\&quot;),\n    41\t    (\&quot;llt\&quot;, \&quot;10002303\&quot;, \&quot;Lorem ipsum dolor sit amet\&quot;),\n    42\t    (\&quot;llt\&quot;, \&quot;10003301\&quot;, \&quot;Consectetur adipiscing elit\&quot;),\n    43\t]\n    44\t\n    45\tNUMBER_OF_TEST_TERMS = len(TEST_TERMS)\n    46\tNUMBER_OF_TEST_EDGES = 19\n    47\t\n    48\t\n    49\tdef _generate_test_ids() -&gt; list[str]:\n    50\t    \&quot;\&quot;\&quot;Generate test IDs like soc1, soc2, hlgt1, hlgt2, etc.\&quot;\&quot;\&quot;\n    51\t    term_counts: dict[str, int] = {}\n    52\t    ids: list[str] = []\n    53\t    for term_level, _, _ in TEST_TERMS:\n    54\t        term_counts[term_level] = term_counts.get(term_level, 0) + 1\n    55\t        ids.append(f\&quot;{term_level}{term_counts[term_level]}\&quot;)\n    56\t    return ids\n    57\t\n    58\t\n    59\t@pytest.fixture(name=\&quot;meddra_data\&quot;)\n    60\tdef meddra_data_fixture() -&gt; MedDRAData:\n    61\t    return MedDRALoader.load(Path(__file__).parent / \&quot;test_data\&quot;)\n    62\t\n    63\t\n    64\tdef test_loading_passes() -&gt; None:\n    65\t    MedDRALoader.load(Path(__file__).parent / \&quot;test_data\&quot;)\n    66\t\n    67\t\n    68\tdef test_version_loaded(meddra_data: MedDRAData) -&gt; None:\n    69\t    assert meddra_data.version == \&quot;99.0 TestLang Dummy Data Release\&quot;\n    70\t\n    71\t\n    72\tdef test_term_levels_loaded(meddra_data: MedDRAData) -&gt; None:\n    73\t    df = pd.DataFrame.from_records(list(meddra_data.terms.values()))\n    74\t    assert len(df[\&quot;term_type\&quot;].unique()) == 5\n    75\t    assert set(df[\&quot;term_type\&quot;].unique()) == {\&quot;soc\&quot;, \&quot;hlgt\&quot;, \&quot;hlt\&quot;, \&quot;pt\&quot;, \&quot;llt\&quot;}\n    76\t\n    77\t\n    78\tdef test_schema_levels_loaded(meddra_data: MedDRAData) -&gt; None:\n    79\t    assert len(meddra_data.schema) == 12\n    80\t    assert all(fn in meddra_data.schema for fn in [\&quot;soc.asc\&quot;, \&quot;hlgt.asc\&quot;, \&quot;hlt.asc\&quot;, \&quot;pt.asc\&quot;, \&quot;llt.asc\&quot;])\n    81\t\n    82\t\n    83\tdef test_edges_loaded(meddra_data: MedDRAData) -&gt; None:\n    84\t    assert len(meddra_data.edges) == NUMBER_OF_TEST_EDGES\n    85\t\n    86\t\n    87\tdef test_terms_loaded(meddra_data: MedDRAData) -&gt; None:\n    88\t    assert len(meddra_data.terms) == NUMBER_OF_TEST_TERMS\n    89\t\n    90\t\n    91\tdef test_graph_nodes_loaded(meddra_data: MedDRAData) -&gt; None:\n    92\t    assert len(meddra_data.to_graph().nodes()) == NUMBER_OF_TEST_TERMS\n    93\t\n    94\t\n    95\tdef test_graph_edges_loaded(meddra_data: MedDRAData) -&gt; None:\n    96\t    assert len(meddra_data.to_graph().edges()) == NUMBER_OF_TEST_EDGES\n    97\t\n    98\t\n    99\tdef test_term_definitions_correct(meddra_data: MedDRAData) -&gt; None:\n   100\t    \&quot;\&quot;\&quot;Test that each term has the correct definition/name in the loaded data.\&quot;\&quot;\&quot;\n   101\t    g = meddra_data.to_graph()\n   102\t    for term_type, term_code, expected_name in TEST_TERMS:\n   103\t        assert g.nodes[term_code][f\&quot;{term_type}_code\&quot;] == term_code\n   104\t        assert g.nodes[term_code][f\&quot;{term_type}_name\&quot;] == expected_name\n   105\t        assert g.nodes[term_code][\&quot;term_type\&quot;] == term_type\n   106\t\nTotal lines in file: 106\n&quot;,&quot;isError&quot;:false,&quot;requestId&quot;:&quot;&quot;}},&quot;24d52d2e-a346-404f-aff2-9639c1101fdd;toolu_vrtx_01J2fTE7m5gqneuY9SeWUNMz&quot;:{&quot;requestId&quot;:&quot;24d52d2e-a346-404f-aff2-9639c1101fdd&quot;,&quot;toolUseId&quot;:&quot;toolu_vrtx_01J2fTE7m5gqneuY9SeWUNMz&quot;,&quot;phase&quot;:5,&quot;result&quot;:{&quot;text&quot;:&quot;The following code sections were retrieved:\nPath: src/meddra_graph/meddra_loader.py\n     1\timport json\n     2\tfrom dataclasses import dataclass\n     3\tfrom pathlib import Path\n     4\tfrom typing import Any, Union, cast\n     5\t\n     6\timport networkx as nx\n     7\t\n     8\tDEFAULT_SCHEMA_PATH = Path(__file__).parent / \&quot;resources\&quot; / \&quot;meddra_schema_v28.json\&quot;\n     9\t\n    10\t\n    11\t@dataclass\n    12\tclass MedDRAData:\n    13\t    version: str\n    14\t    schema: dict[str, dict[str, str]]\n    15\t    terms: dict[str, dict[str, Any]]\n    16\t    edges: list[tuple[str, str]]\n    17\t\n    18\t    def to_graph(self) -&gt; nx.DiGraph:\n    19\t        g = nx.DiGraph()\n    20\t        g.add_edges_from(self.edges)\n    21\t        g.add_nodes_from(self.terms.keys())\n    22\t        nx.set_node_attributes(g, self.terms)\n    23\t\n    24\t\n    25\t@dataclass\n    26\tclass _MedDRASchema:\n    27\t    fields: dict[str, dict[str, str]]\n    28\t    term_types: set[str]\n    29\t\n    30\t    def __init__(self, schema_path: Union[str, Path]):\n    31\t        with open(schema_path, \&quot;r\&quot;, encoding=\&quot;utf-8\&quot;) as f:\n    32\t            data = cast(dict[str, dict[str, dict[str, str]]], json.load(f))\n    33\t            self.term_types = set(data[\&quot;term_types\&quot;])\n    34\t            self.fields = data[\&quot;fields\&quot;]\n    35\t\n    36\t\n    37\tclass MedDRALoader:\n    38\t\n    39\t    @classmethod\n    40\t    def load(\n    41\t            cls,\n    42\t            meddra_directory_path: Union[str, Path],\n    43\t            schema_path: Union[str, Path] = DEFAULT_SCHEMA_PATH\n    44\t    ) -&gt; MedDRAData:\n    45\t        meddra_directory_path = Path(meddra_directory_path)\n    46\t        assert meddra_directory_path.is_dir()\n    47\t\n    48\t        schema = _MedDRASchema(schema_path)\n    49\t        version = \&quot; \&quot;.join(cls._load_file(meddra_directory_path / \&quot;meddra_release.asc\&quot;)[0]).strip()\n    50\t        terms = cls._load_terms(meddra_directory_path, schema)\n    51\t        edges = cls._load_edges(meddra_directory_path, schema)\n    52\t\n    53\t        return MedDRAData(version=version, schema=schema.fields, terms=terms, edges=list(edges))\n    54\t\n    55\t    @classmethod\n    56\t    def _load_terms(cls,\n    57\t                    meddra_directory_path: Path,\n    58\t                    schema: _MedDRASchema,\n    59\t                    ) -&gt; dict[str, dict[str, Any]]:\n    60\t        terms = {}\n    61\t        for file_path in meddra_directory_path.glob(\&quot;*.asc\&quot;):\n    62\t            if cls._is_term_file(file_path, schema):\n    63\t                data = cls._load_file(file_path)\n    64\t                file_name = file_path.name\n    65\t                term_type = file_name.split(\&quot;.\&quot;)[0]\n    66\t\n    67\t                for row in data:\n    68\t                    if len(row) &gt;= len(schema.fields[file_name]):\n    69\t                        term_dict = dict(zip(schema.fields[file_name].keys(), row))\n    70\t                        term_dict[\&quot;term_type\&quot;] = term_type\n    71\t\n    72\t                        first_field = list(schema.fields[file_name].keys())[0]\n    73\t                        term_key = term_dict[first_field]\n    74\t                        terms[term_key] = term_dict\n    75\t        return terms\n    76\t\n    77\t    @classmethod\n    78\t    def _load_edges(cls, meddra_directory_path: Path, schema: _MedDRASchema) -&gt; set[tuple[str, str]]:\n    79\t        edges: set[tuple[str, str]] = set()\n    80\t        for file_path in meddra_directory_path.glob(\&quot;*.asc\&quot;):\n    81\t            if cls._is_edge_file(file_path, schema):\n    82\t                edges.update(cast(set[tuple[str, str]], cls._load_file(file_path)))\n    83\t        return edges\n    84\t\n    85\t    @staticmethod\n    86\t    def _is_term_file(file_path: Path, schema: _MedDRASchema) -&gt; bool:\n    87\t        return file_path.name.split(\&quot;.\&quot;)[0] in schema.term_types\n    88\t\n    89\t    @staticmethod\n    90\t    def _is_edge_file(file_path: Path, schema: _MedDRASchema) -&gt; bool:\n    91\t        if not \&quot;_\&quot; in file_path.name:\n    92\t            return False\n    93\t        try:\n    94\t            t0, t1 = file_path.name.split(\&quot;.\&quot;)[0].split(\&quot;_\&quot;)\n    95\t            return t0 in schema.term_types and t1 in schema.term_types\n    96\t        except (ValueError, IndexError):\n    97\t            return False\n    98\t\n    99\t    @classmethod\n   100\t    def _load_file(cls, file_path: Path) -&gt; list[tuple[str, ...]]:\n   101\t        lines = []\n   102\t        with open(file_path, \&quot;r\&quot;, encoding=\&quot;utf-8\&quot;) as f:\n   103\t            for line in f:\n   104\t                lines.append(cls._load_line(line))\n   105\t        return lines\n   106\t\n   107\t    @classmethod\n   108\t    def _load_line(cls, line: str) -&gt; tuple[str, ...]:\n   109\t        return tuple(line.strip().split(\&quot;$\&quot;))\n...\nPath: modules/meddra-loader/demo_loading.py\n     1\t#!/usr/bin/env python3\n     2\t\&quot;\&quot;\&quot;\n     3\tDemo script to show MedDRADiGraph loading dummy data.\n     4\t\&quot;\&quot;\&quot;\n     5\t\n     6\tfrom pathlib import Path\n     7\tfrom src.meddra_graph.meddra_digraph import MedDRADiGraph\n     8\t\n     9\tdef main():\n    10\t    # Create MedDRADiGraph instance\n    11\t    graph = MedDRADiGraph()\n    12\t    \n    13\t    # Load dummy test data\n    14\t    test_data_path = Path(\&quot;test_data\&quot;)\n    15\t    print(f\&quot;Loading dummy MedDRA data from: {test_data_path}\&quot;)\n    16\t    \n    17\t    graph.load(test_data_path)\n    18\t    \n    19\t    # Display loaded information\n    20\t    print(f\&quot;\\nMedDRA Version: {graph.meddra_version}\&quot;)\n    21\t    print(f\&quot;Term Levels: {graph.term_levels}\&quot;)\n    22\t    print(f\&quot;Number of terms loaded: {len(graph.terms)}\&quot;)\n    23\t    print(f\&quot;Schema files: {list(graph.schema.keys())}\&quot;)\n    24\t    \n    25\t    # Show some sample terms\n    26\t    print(\&quot;\\nSample terms loaded:\&quot;)\n    27\t    for i, (term_id, term_data) in enumerate(graph.terms.items()):\n    28\t        if i &gt;= 5:  # Show only first 5 terms\n    29\t            break\n    30\t        print(f\&quot;  {term_id}: {term_data}\&quot;)\n    31\t    \n    32\t    print(\&quot;\\nDummy data loading completed successfully!\&quot;)\n    33\t\n    34\tif __name__ == \&quot;__main__\&quot;:\n    35\t    main()\n...\nPath: src/meddra_graph/tests/test_meddra_loader.py\n     1\tfrom pathlib import Path\n     2\t\n     3\timport pandas as pd\n     4\timport pytest\n     5\t\n     6\tfrom meddra_graph.meddra_loader import MedDRALoader, MedDRAData\n...\n    34\t\n    35\tNUMBER_OF_TEST_TERMS = len(TEST_TERMS)\n    36\tNUMBER_OF_TEST_EDGES = 19\n    37\t\n    38\t\n    39\tdef _generate_test_ids() -&gt; list[str]:\n    40\t    \&quot;\&quot;\&quot;Generate test IDs like soc1, soc2, hlgt1, hlgt2, etc.\&quot;\&quot;\&quot;\n    41\t    term_counts: dict[str, int] = {}\n    42\t    ids: list[str] = []\n    43\t    for term_level, _, _ in TEST_TERMS:\n    44\t        term_counts[term_level] = term_counts.get(term_level, 0) + 1\n    45\t        ids.append(f\&quot;{term_level}{term_counts[term_level]}\&quot;)\n    46\t    return ids\n    47\t\n    48\t\n    49\t@pytest.fixture(name=\&quot;meddra_data\&quot;)\n    50\tdef meddra_data_fixture() -&gt; MedDRAData:\n    51\t    return MedDRALoader.load(Path(__file__).parent / \&quot;test_data\&quot;)\n    52\t\n    53\t\n    54\tdef test_loading_passes() -&gt; None:\n    55\t    MedDRALoader.load(Path(__file__).parent / \&quot;test_data\&quot;)\n    56\t\n    57\t\n    58\tdef test_version_loaded(meddra_data: MedDRAData) -&gt; None:\n    59\t    assert meddra_data.version == \&quot;99.0 TestLang Dummy Data Release\&quot;\n    60\t\n    61\t\n    62\tdef test_term_levels_loaded(meddra_data: MedDRAData) -&gt; None:\n    63\t    df = pd.DataFrame.from_records(list(meddra_data.terms.values()))\n    64\t    assert len(df[\&quot;term_type\&quot;].unique()) == 5\n    65\t    assert set(df[\&quot;term_type\&quot;].unique()) == {\&quot;soc\&quot;, \&quot;hlgt\&quot;, \&quot;hlt\&quot;, \&quot;pt\&quot;, \&quot;llt\&quot;}\n    66\t\n    67\t\n    68\tdef test_schema_levels_loaded(meddra_data: MedDRAData) -&gt; None:\n    69\t    assert len(meddra_data.schema) == 12\n    70\t    assert all(fn in meddra_data.schema for fn in [\&quot;soc.asc\&quot;, \&quot;hlgt.asc\&quot;, \&quot;hlt.asc\&quot;, \&quot;pt.asc\&quot;, \&quot;llt.asc\&quot;])\n    71\t\n    72\t\n    73\tdef test_edges_loaded(meddra_data: MedDRAData) -&gt; None:\n    74\t    assert len(meddra_data.edges) == NUMBER_OF_TEST_EDGES\n    75\t\n    76\t\n    77\tdef test_terms_loaded(meddra_data: MedDRAData) -&gt; None:\n    78\t    assert len(meddra_data.terms) == NUMBER_OF_TEST_TERMS\n    79\t\n    80\t\n    81\tdef test_graph_nodes_loaded(meddra_data: MedDRAData) -&gt; None:\n    82\t    assert len(meddra_data.to_graph().nodes) == NUMBER_OF_TEST_TERMS\n    83\t\n    84\t\n    85\tdef test_graph_edges_loaded(meddra_data: MedDRAData) -&gt; None:\n    86\t    assert len(meddra_data.to_graph().edges) == NUMBER_OF_TEST_EDGES\n    87\t\n    88\t\n    89\tdef test_term_definitions_correct(meddra_data: MedDRAData) -&gt; None:\n    90\t    \&quot;\&quot;\&quot;Test that each term has the correct definition/name in the loaded data.\&quot;\&quot;\&quot;\n    91\t    g = meddra_data.to_graph()\n    92\t    for term_type, term_code, expected_name in TEST_TERMS:\n    93\t        assert g.nodes[term_code][f\&quot;{term_type}_code\&quot;] == term_code\n    94\t        assert g.nodes[term_code][f\&quot;{term_type}_name\&quot;] == expected_name\n    95\t        assert g.nodes[term_code][\&quot;term_type\&quot;] == term_type\n...\nPath: src/meddra_graph/tests/test_data/README.md\n     1\t# MedDRA Test Data\n     2\t\n     3\tThis directory contains dummy test data files for testing the MedDRADiGraph loading functionality.\n     4\t\n     5\t## Important Note\n     6\t\n     7\t**All data in these files is completely anonymized and fake.** This includes:\n     8\t- Lorem Ipsum text for all term names and descriptions\n     9\t- Anonymized codes (e.g., ABC, DEF, PQR instead of real abbreviations)\n    10\t- Fake version numbers (99.0 instead of real MedDRA versions)\n    11\t- Generic ICD codes (X00-X99, Y00-Y99, Z00-Z99 instead of real medical codes)\n    12\t- Anonymized reference codes for all external coding systems\n    13\t\n    14\tThis ensures no real MedDRA data is stored in this repository, which is important for licensing compliance.\n    15\t\n    16\t## Data Format\n    17\t\n    18\tAll files use the MedDRA standard format (version 28.0):\n    19\t- Fields are delimited by `$` characters\n    20\t- Each line represents one record\n    21\t- Field structure follows the schema defined in `src/meddra_loader/resources/meddra_schema_v28.json`\n    22\t\n...\nPath: src/meddra_graph/resources/meddra_schema_v28.json\n     1\t{\n     2\t  \&quot;term_types\&quot;: [\n     3\t    \&quot;llt\&quot;,\n     4\t    \&quot;pt\&quot;,\n     5\t    \&quot;hlt\&quot;,\n     6\t    \&quot;hlgt\&quot;,\n     7\t    \&quot;soc\&quot;\n     8\t  ],\n     9\t  \&quot;fields\&quot;: {\n    10\t    \&quot;llt.asc\&quot;: {\n    11\t      \&quot;llt_code\&quot;: \&quot;int\&quot;,\n    12\t      \&quot;llt_name\&quot;: \&quot;str\&quot;,\n    13\t      \&quot;pt_code\&quot;: \&quot;int\&quot;,\n    14\t      \&quot;llt_whoart_code\&quot;: \&quot;str\&quot;,\n    15\t      \&quot;llt_harts_code\&quot;: \&quot;int\&quot;,\n    16\t      \&quot;llt_costart_sym\&quot;: \&quot;str\&quot;,\n    17\t      \&quot;llt_icd9_code\&quot;: \&quot;str\&quot;,\n    18\t      \&quot;llt_icd9cm_code\&quot;: \&quot;str\&quot;,\n    19\t      \&quot;llt_icd10_code\&quot;: \&quot;str\&quot;,\n    20\t      \&quot;llt_currency\&quot;: \&quot;str\&quot;,\n    21\t      \&quot;llt_jart_code\&quot;: \&quot;str\&quot;\n    22\t    },\n    23\t    \&quot;pt.asc\&quot;: {\n    24\t      \&quot;pt_code\&quot;: \&quot;int\&quot;,\n    25\t      \&quot;pt_name\&quot;: \&quot;str\&quot;,\n    26\t      \&quot;pt_soc_code\&quot;: \&quot;int\&quot;,\n    27\t      \&quot;pt_whoart_code\&quot;: \&quot;str\&quot;,\n    28\t      \&quot;pt_harts_code\&quot;: \&quot;int\&quot;,\n    29\t      \&quot;pt_costart_sym\&quot;: \&quot;str\&quot;,\n    30\t      \&quot;pt_icd9_code\&quot;: \&quot;str\&quot;,\n    31\t      \&quot;pt_icd9cm_code\&quot;: \&quot;str\&quot;,\n    32\t      \&quot;pt_icd10_code\&quot;: \&quot;str\&quot;,\n    33\t      \&quot;pt_jart_code\&quot;: \&quot;str\&quot;\n    34\t    },\n    35\t    \&quot;hlt.asc\&quot;: {\n    36\t      \&quot;hlt_code\&quot;: \&quot;int\&quot;,\n    37\t      \&quot;hlt_name\&quot;: \&quot;str\&quot;,\n    38\t      \&quot;hlt_whoart_code\&quot;: \&quot;str\&quot;,\n    39\t      \&quot;hlt_harts_code\&quot;: \&quot;int\&quot;,\n    40\t      \&quot;hlt_costart_sym\&quot;: \&quot;str\&quot;,\n    41\t      \&quot;hlt_icd9_code\&quot;: \&quot;str\&quot;,\n    42\t      \&quot;hlt_icd9cm_code\&quot;: \&quot;str\&quot;,\n    43\t      \&quot;hlt_icd10_code\&quot;: \&quot;str\&quot;,\n    44\t      \&quot;hlt_jart_code\&quot;: \&quot;str\&quot;\n    45\t    },\n    46\t    \&quot;hlt_pt.asc\&quot;: {\n    47\t      \&quot;hlt_code\&quot;: \&quot;int\&quot;,\n    48\t      \&quot;pt_code\&quot;: \&quot;int\&quot;\n    49\t    },\n    50\t    \&quot;hlgt.asc\&quot;: {\n    51\t      \&quot;hlgt_code\&quot;: \&quot;int\&quot;,\n    52\t      \&quot;hlgt_name\&quot;: \&quot;str\&quot;,\n    53\t      \&quot;hlgt_whoart_code\&quot;: \&quot;str\&quot;,\n    54\t      \&quot;hlgt_harts_code\&quot;: \&quot;int\&quot;,\n    55\t      \&quot;hlgt_costart_sym\&quot;: \&quot;str\&quot;,\n    56\t      \&quot;hlgt_icd9_code\&quot;: \&quot;str\&quot;,\n    57\t      \&quot;hlgt_icd9cm_code\&quot;: \&quot;str\&quot;,\n    58\t      \&quot;hlgt_icd10_code\&quot;: \&quot;str\&quot;,\n    59\t      \&quot;hlgt_jart_code\&quot;: \&quot;str\&quot;\n    60\t    },\n    61\t    \&quot;higt_hlt.asc\&quot;: {\n    62\t      \&quot;hlgt_code\&quot;: \&quot;int\&quot;,\n    63\t      \&quot;hlt_code\&quot;: \&quot;int\&quot;\n    64\t    },\n    65\t    \&quot;soc.asc\&quot;: {\n    66\t      \&quot;soc_code\&quot;: \&quot;int\&quot;,\n    67\t      \&quot;soc_name\&quot;: \&quot;str\&quot;,\n    68\t      \&quot;soc_abbrev\&quot;: \&quot;str\&quot;,\n    69\t      \&quot;soc_whoart_code\&quot;: \&quot;str\&quot;,\n    70\t      \&quot;soc_harts_code\&quot;: \&quot;int\&quot;,\n    71\t      \&quot;soc_costart_sym\&quot;: \&quot;str\&quot;,\n    72\t      \&quot;soc_icd9_code\&quot;: \&quot;str\&quot;,\n    73\t      \&quot;soc_icd9cm_code\&quot;: \&quot;str\&quot;,\n    74\t      \&quot;soc_icd10_code\&quot;: \&quot;str\&quot;,\n    75\t      \&quot;soc_jart_code\&quot;: \&quot;str\&quot;\n    76\t    },\n    77\t    \&quot;soc_higt.asc\&quot;: {\n    78\t      \&quot;soc_code\&quot;: \&quot;int\&quot;,\n    79\t      \&quot;hlgt_code\&quot;: \&quot;int\&quot;\n    80\t    },\n    81\t    \&quot;mdhier.asc\&quot;: {\n    82\t      \&quot;pt_code\&quot;: \&quot;int\&quot;,\n    83\t      \&quot;hlt_code\&quot;: \&quot;int\&quot;,\n    84\t      \&quot;hlgt_code\&quot;: \&quot;int\&quot;,\n    85\t      \&quot;soc_code\&quot;: \&quot;int\&quot;,\n    86\t      \&quot;pt_name\&quot;: \&quot;str\&quot;,\n    87\t      \&quot;hlt_name\&quot;: \&quot;str\&quot;,\n    88\t      \&quot;hlgt_name\&quot;: \&quot;str\&quot;,\n    89\t      \&quot;soc_name\&quot;: \&quot;str\&quot;,\n    90\t      \&quot;soc_abbrev\&quot;: \&quot;str\&quot;,\n    91\t      \&quot;null_field\&quot;: \&quot;str\&quot;,\n    92\t      \&quot;pt_soc_code\&quot;: \&quot;int\&quot;,\n    93\t      \&quot;primary_soc_fg\&quot;: \&quot;str\&quot;\n    94\t    },\n    95\t    \&quot;intl_ord.asc\&quot;: {\n    96\t      \&quot;intl_ord_code\&quot;: \&quot;int\&quot;,\n    97\t      \&quot;soc_code\&quot;: \&quot;int\&quot;\n    98\t    },\n    99\t    \&quot;smq_list.asc\&quot;: {\n   100\t      \&quot;smq_code\&quot;: \&quot;int\&quot;,\n   101\t      \&quot;smq_name\&quot;: \&quot;str\&quot;,\n   102\t      \&quot;smq_level\&quot;: \&quot;int\&quot;,\n   103\t      \&quot;smq_description\&quot;: \&quot;str\&quot;,\n   104\t      \&quot;smq_source\&quot;: \&quot;str\&quot;,\n   105\t      \&quot;smq_note\&quot;: \&quot;str\&quot;,\n   106\t      \&quot;MedDRA_version\&quot;: \&quot;str\&quot;,\n   107\t      \&quot;status\&quot;: \&quot;str\&quot;,\n   108\t      \&quot;smq_algorithm\&quot;: \&quot;str\&quot;\n   109\t    },\n   110\t    \&quot;smq_content.asc\&quot;: {\n   111\t      \&quot;smq_code\&quot;: \&quot;int\&quot;,\n   112\t      \&quot;term_code\&quot;: \&quot;int\&quot;,\n   113\t      \&quot;term_level\&quot;: \&quot;int\&quot;,\n   114\t      \&quot;term_scope\&quot;: \&quot;int\&quot;,\n   115\t      \&quot;term_category\&quot;: \&quot;str\&quot;,\n   116\t      \&quot;term_weight\&quot;: \&quot;int\&quot;,\n   117\t      \&quot;term_status\&quot;: \&quot;str\&quot;,\n   118\t      \&quot;term_addition_version\&quot;: \&quot;str\&quot;,\n   119\t      \&quot;term_last_modified_version\&quot;: \&quot;str\&quot;\n   120\t    }\n   121\t  }\n   122\t}...\nPath: src/sprint/models/weights/run-20241010T111217/wandb-metadata.json\n     1\t{\n     2\t    \&quot;os\&quot;: \&quot;Linux-5.15.0-89-generic-x86_64-with-glibc2.35\&quot;,\n     3\t    \&quot;python\&quot;: \&quot;3.12.2\&quot;,\n     4\t    \&quot;heartbeatAt\&quot;: \&quot;2024-10-10T11:12:19.061092\&quot;,\n     5\t    \&quot;startedAt\&quot;: \&quot;2024-10-10T11:12:18.533126\&quot;,\n     6\t    \&quot;docker\&quot;: null,\n     7\t    \&quot;cuda\&quot;: null,\n     8\t    \&quot;args\&quot;: [],\n     9\t    \&quot;state\&quot;: \&quot;running\&quot;,\n    10\t    \&quot;program\&quot;: \&quot;/home/amotta/projects/sprint/train-token-based-abstract-classifier.py\&quot;,\n    11\t    \&quot;codePathLocal\&quot;: \&quot;train-token-based-abstract-classifier.py\&quot;,\n    12\t    \&quot;codePath\&quot;: \&quot;train-token-based-abstract-classifier.py\&quot;,\n    13\t    \&quot;git\&quot;: {\n    14\t        \&quot;remote\&quot;: \&quot;git@gitlab.switch.ch:hslu/research/abiz/sprint.git\&quot;,\n    15\t        \&quot;commit\&quot;: \&quot;7658016a96ae0dcb503f2256fc643e78f4dfcb3e\&quot;\n    16\t    },\n...\nPath: src/sprint/data_utils.py\n...\n    84\t\n    85\t        dir_embeddings = None\n    86\t        if load_embeddings is not None:\n    87\t            # TODO(amotta): Allow use to specify which embeddings to load\n    88\t            dir_embeddings_file_path = dir_path / 'embeddings.npz'\n    89\t            dir_embeddings = dict(np.load(\n    90\t                dir_embeddings_file_path,\n    91\t                allow_pickle=True,\n    92\t            ))\n    93\t\n    94\t            assert all(\n    95\t                len(v) == len(dir_abstracts)\n    96\t                for v in dir_embeddings.values()\n    97\t            )\n    98\t\n    99\t        abstracts[dir] = dir_abstracts[fields]\n   100\t        embeddings[dir] = dir_embeddings\n   101\t\n   102\t    abstracts = pd.concat(abstracts, names=['dir', 'nr'])\n   103\t\n   104\t    if load_embeddings:\n   105\t        embedding_keys = [e.keys() for e in embeddings.values()]\n   106\t        assert all(e == embedding_keys[0] for e in embedding_keys)\n   107\t        embedding_keys = embedding_keys[0]\n   108\t\n   109\t        embeddings = {\n   110\t            key: np.concatenate(tuple(\n   111\t                embeddings[dir][key]\n   112\t                for dir in DIRS\n   113\t            ))\n   114\t            for key in embedding_keys\n   115\t        }\n   116\t\n   117\t    foreign_language_mask = abstracts.apply(is_in_foreign_language, axis='columns')\n   118\t    mask = (abstracts['split'] == split) &amp; ~foreign_language_mask\n   119\t    abstracts = abstracts.loc[mask]\n   120\t\n   121\t    if load_embeddings:\n   122\t        embeddings = {\n   123\t            key: value[mask]\n   124\t            for key, value in embeddings.items()\n   125\t        }\n   126\t\n   127\t        assert all(\n   128\t            len(v) == len(abstracts)\n   129\t            for v in embeddings.values()\n   130\t        )\n   131\t\n   132\t    ret = (abstracts,)\n   133\t    if load_embeddings:\n   134\t        ret += (embeddings,)\n   135\t\n   136\t    return ret\n   137\t\n   138\t\n   139\tdef _to_confusion_matrix_label(*, true, pred) -&gt; str:\n   140\t    if true == True and pred == True: return 'TP'\n   141\t    if true == True and pred == False: return 'FN'\n   142\t    if true == False and pred == True: return 'FP'\n   143\t    if true == False and pred == False: return 'TN'\n   144\t    assert False, f\&quot;{true=}, {pred=}\&quot;\n   145\t\n   146\t\n   147\tdef aes_to_export(*, study, aes, ctcae) -&gt; dict[str, str]:\n   148\t    # Normalize AE names\n   149\t    aes_norm = list(map(str.lower, aes))\n   150\t    ctcae_norm = list(map(str.lower, ctcae['name'].values))\n   151\t\n   152\t    aes_not_in_ctcae = [\n   153\t        ae\n   154\t        for ae, ae_norm in zip(aes, aes_norm)\n   155\t        if ae_norm not in ctcae_norm\n   156\t    ]\n   157\t\n   158\t    ctcae_in_aes = [ae in aes_norm for ae in ctcae_norm]\n   159\t    ctcae_in_aes.append(len(aes_not_in_ctcae) &gt; 0)\n   160\t    preds = np.asarray(ctcae_in_aes, dtype=bool)\n   161\t\n   162\t    trues = np.zeros(len(ctcae) + 1, dtype=bool)\n   163\t    # NOTE(amotta): The `ctcae_indices` contains -1 if the ground truth\n   164\t    # contains AEs not in CTCAE.\n   165\t    trues[study['ctcae_indices']] = True\n   166\t\n   167\t    assert preds.shape == trues.shape\n   168\t\n   169\t    ctcae_labels = [\n   170\t        _to_confusion_matrix_label(true=true, pred=pred)\n   171\t        for true, pred in zip(trues, preds)\n   172\t    ]\n...\nPath: src/meddra_graph/tests/test_data/soc.asc\n     1\t10001000$Lorem ipsum dolor sit amet$Lorem$ABC$20001000$ABC$ABC$X00-X99$X00-X99$ABC\n     2\t10002000$Consectetur adipiscing elit$Consectetur$DEF$20002000$DEF$DEF$Y00-Y99$Y00-Y99$DEF\n     3\t10003000$Sed do eiusmod tempor incididunt$Sed$GHI$20003000$GHI$GHI$Z00-Z99$Z00-Z99$GHI\n     4\t10004000$Ut labore et dolore magna aliqua$Ut$JKL$20004000$JKL$JKL$W00-W99$W00-W99$JKL\n     5\t10005000$Enim ad minim veniam quis$Enim$MNO$20005000$MNO$MNO$V00-V99$V00-V99$MNO\n...\nPath: src/sprint/entrypoints/ctcae_detection.py\n...\n    16\t\n    17\t\n    18\tdef load_ctcae(file_path):\n    19\t    ctcae = pd.read_excel(file_path)\n    20\t\n    21\t    # Strip spaces (empty definitions are ' -' by default)\n    22\t    ctcae['Definition'] = ctcae['Definition'].map(str.strip)\n    23\t    # Remove entries without definition\n    24\t    ctcae = ctcae.loc[ctcae['Definition'] != '-']\n    25\t\n    26\t    # Build categorical 'class' column from 'MedDRA SOC'\n    27\t    ctcae['Class'] = ctcae['MedDRA SOC'].map(str.lower).astype('category')\n    28\t    classes = ctcae['Class'].cat.categories\n    29\t\n    30\t    # Clean up output table\n    31\t    ctcae = ctcae[['CTCAE Term', 'Definition', 'Class']]\n    32\t    return ctcae\n...\nPath: src/sprint/entrypoints/train-token-based-abstract-classifier.py\n...\n    78\t\n    79\t\n    80\t# NOTE(amotta): Copy-paste from train-abstract-classifier.py\n    81\tdef load_data(*, split):\n    82\t    abstracts, embeddings = load_data_split(str(data_path / \&quot;manual-abstract-screening\&quot;),\n    83\t        split=split, load_embeddings=True,\n    84\t    )\n    85\t\n    86\t    # NOTE(amotta): For backward compatibility\n    87\t    for key in embeddings.keys():\n    88\t        if key == 'embedding': continue\n    89\t        assert key not in abstracts.columns\n    90\t        abstracts[key] = embeddings[key]\n    91\t    del embeddings\n    92\t\n    93\t    # NOTE(amotta): See preprocess_data in train-abstract-classifier.py\n    94\t    mask = ~abstracts['duplicate'].values\n    95\t    _, max_token_count = ABSTRACTS_TOKEN_RANGE\n    96\t    mas...&quot;,&quot;isError&quot;:false,&quot;requestId&quot;:&quot;&quot;}},&quot;a3169c9a-bc12-4add-846a-44cdcaf89d3b;toolu_vrtx_01P2WFvZyTfF71WTABVMLGPo&quot;:{&quot;requestId&quot;:&quot;a3169c9a-bc12-4add-846a-44cdcaf89d3b&quot;,&quot;toolUseId&quot;:&quot;toolu_vrtx_01P2WFvZyTfF71WTABVMLGPo&quot;,&quot;phase&quot;:5,&quot;result&quot;:{&quot;text&quot;:&quot;Note:\nView range expanded to meet minimum size of 500 lines. End line adjusted to last line of file (114).\n\nHere's the result of running `cat -n` on src/meddra_graph/meddra_loader.py:\n    18\t    def to_graph(self) -&gt; nx.DiGraph:\n    19\t        g = nx.DiGraph()\n    20\t        g.add_nodes_from(self.terms.keys())\n    21\t        g.add_edges_from(self.edges)\n    22\t        nx.set_node_attributes(g, self.terms)\n    23\t        return g\n    24\t\n    25\t\n    26\t@dataclass\n    27\tclass _MedDRASchema:\n    28\t    fields: dict[str, dict[str, str]]\n    29\t    term_types: set[str]\n    30\t\n    31\t    def __init__(self, schema_path: Union[str, Path]):\n    32\t        with open(schema_path, \&quot;r\&quot;, encoding=\&quot;utf-8\&quot;) as f:\n    33\t            data = cast(dict[str, dict[str, dict[str, str]]], json.load(f))\n    34\t            self.term_types = set(data[\&quot;term_types\&quot;])\n    35\t            self.fields = data[\&quot;fields\&quot;]\n    36\t\n    37\t\n    38\tclass MedDRALoader:\n    39\t\n    40\t    @classmethod\n    41\t    def load(\n    42\t            cls,\n    43\t            meddra_directory_path: Union[str, Path],\n    44\t            schema_path: Union[str, Path] = DEFAULT_SCHEMA_PATH\n    45\t    ) -&gt; MedDRAData:\n    46\t        meddra_directory_path = Path(meddra_directory_path)\n    47\t        assert meddra_directory_path.is_dir()\n    48\t\n    49\t        schema = _MedDRASchema(schema_path)\n    50\t        version = \&quot; \&quot;.join(cls._load_file(meddra_directory_path / \&quot;meddra_release.asc\&quot;)[0]).strip()\n    51\t        terms = cls._load_terms(meddra_directory_path, schema)\n    52\t        edges = cls._load_edges(meddra_directory_path, schema)\n    53\t\n    54\t        return MedDRAData(version=version, schema=schema.fields, terms=terms, edges=list(edges))\n    55\t\n    56\t    @classmethod\n    57\t    def _load_terms(cls,\n    58\t                    meddra_directory_path: Path,\n    59\t                    schema: _MedDRASchema,\n    60\t                    ) -&gt; dict[str, dict[str, Any]]:\n    61\t        terms = {}\n    62\t        for file_path in meddra_directory_path.glob(\&quot;*.asc\&quot;):\n    63\t            if cls._is_term_file(file_path, schema):\n    64\t                data = cls._load_file(file_path)\n    65\t                file_name = file_path.name\n    66\t                term_type = file_name.split(\&quot;.\&quot;)[0]\n    67\t\n    68\t                for row in data:\n    69\t                    if len(row) &lt; len(schema.fields[file_name]):\n    70\t                        raise ValueError(f\&quot;Invalid number of fields in {file_path}\&quot;)\n    71\t\n    72\t                    term_dict = dict(zip(schema.fields[file_name].keys(), row))\n    73\t                    term_dict[\&quot;term_type\&quot;] = term_type\n    74\t\n    75\t                    first_field = list(schema.fields[file_name].keys())[0]\n    76\t                    term_key = term_dict[first_field]\n    77\t                    terms[term_key] = term_dict\n    78\t\n    79\t        return terms\n    80\t\n    81\t    @classmethod\n    82\t    def _load_edges(cls, meddra_directory_path: Path, schema: _MedDRASchema) -&gt; set[tuple[str, str]]:\n    83\t        edges: set[tuple[str, str]] = set()\n    84\t        for file_path in meddra_directory_path.glob(\&quot;*.asc\&quot;):\n    85\t            if cls._is_edge_file(file_path, schema):\n    86\t                edges.update(cast(set[tuple[str, str]], cls._load_file(file_path)))\n    87\t        return edges\n    88\t\n    89\t    @staticmethod\n    90\t    def _is_term_file(file_path: Path, schema: _MedDRASchema) -&gt; bool:\n    91\t        return file_path.name.split(\&quot;.\&quot;)[0] in schema.term_types\n    92\t\n    93\t    @staticmethod\n    94\t    def _is_edge_file(file_path: Path, schema: _MedDRASchema) -&gt; bool:\n    95\t        if not \&quot;_\&quot; in file_path.name:\n    96\t            return False\n    97\t        try:\n    98\t            t0, t1 = file_path.name.split(\&quot;.\&quot;)[0].split(\&quot;_\&quot;)\n    99\t            return t0 in schema.term_types and t1 in schema.term_types\n   100\t        except (ValueError, IndexError):\n   101\t            return False\n   102\t\n   103\t    @classmethod\n   104\t    def _load_file(cls, file_path: Path) -&gt; list[tuple[str, ...]]:\n   105\t        lines = []\n   106\t        with open(file_path, \&quot;r\&quot;, encoding=\&quot;utf-8\&quot;) as f:\n   107\t            for line in f:\n   108\t                lines.append(cls._load_line(line))\n   109\t        return lines\n   110\t\n   111\t    @classmethod\n   112\t    def _load_line(cls, line: str) -&gt; tuple[str, ...]:\n   113\t        return tuple(line.strip().split(\&quot;$\&quot;))\n   114\t\nTotal lines in file: 114\n&quot;,&quot;isError&quot;:false,&quot;requestId&quot;:&quot;&quot;}},&quot;23b84395-92d6-42bf-a466-ad687b736954;toolu_vrtx_01GbdKxUNTnFqei8JdQDTfEn&quot;:{&quot;requestId&quot;:&quot;23b84395-92d6-42bf-a466-ad687b736954&quot;,&quot;toolUseId&quot;:&quot;toolu_vrtx_01GbdKxUNTnFqei8JdQDTfEn&quot;,&quot;phase&quot;:5,&quot;result&quot;:{&quot;text&quot;:&quot;Here's the files and directories up to 2 levels deep in src/meddra_graph/tests/test_data, excluding hidden items:\nsrc/meddra_graph/tests/test_data/README.md\nsrc/meddra_graph/tests/test_data/hlgt.asc\nsrc/meddra_graph/tests/test_data/hlgt_hlt.asc\nsrc/meddra_graph/tests/test_data/hlt.asc\nsrc/meddra_graph/tests/test_data/hlt_pt.asc\nsrc/meddra_graph/tests/test_data/intl_ord.asc\nsrc/meddra_graph/tests/test_data/llt.asc\nsrc/meddra_graph/tests/test_data/mdhier.asc\nsrc/meddra_graph/tests/test_data/meddra_release.asc\nsrc/meddra_graph/tests/test_data/pt.asc\nsrc/meddra_graph/tests/test_data/smq_content.asc\nsrc/meddra_graph/tests/test_data/smq_list.asc\nsrc/meddra_graph/tests/test_data/soc.asc\nsrc/meddra_graph/tests/test_data/soc_hlgt.asc\n&quot;,&quot;isError&quot;:false,&quot;requestId&quot;:&quot;&quot;}},&quot;0630a3a6-bd84-48db-85bb-d506427cc7ae;toolu_vrtx_019R8yuMGvxWT92Jy1MDfkip&quot;:{&quot;requestId&quot;:&quot;0630a3a6-bd84-48db-85bb-d506427cc7ae&quot;,&quot;toolUseId&quot;:&quot;toolu_vrtx_019R8yuMGvxWT92Jy1MDfkip&quot;,&quot;phase&quot;:5,&quot;result&quot;:{&quot;text&quot;:&quot;Here's the result of running `cat -n` on src/meddra_graph/tests/test_data/hlgt_hlt.asc:\n     1\t10001001$10001101\n     2\t10001001$10001102\n     3\t10001002$10001201\n     4\t10002001$10002101\n     5\t10002002$10002102\n     6\t10003001$10002101\n     7\t\nTotal lines in file: 7\n&quot;,&quot;isError&quot;:false,&quot;requestId&quot;:&quot;&quot;}},&quot;c89e1a34-fd83-4ccb-8dcb-e6afdd88ecb9;toolu_vrtx_01KznpRzxMEYBYdmZbKrunjH&quot;:{&quot;requestId&quot;:&quot;c89e1a34-fd83-4ccb-8dcb-e6afdd88ecb9&quot;,&quot;toolUseId&quot;:&quot;toolu_vrtx_01KznpRzxMEYBYdmZbKrunjH&quot;,&quot;phase&quot;:5,&quot;result&quot;:{&quot;text&quot;:&quot;Here's the result of running `cat -n` on src/meddra_graph/tests/test_data/soc_hlgt.asc:\n     1\t10001000$10001001\n     2\t10001000$10001002\n     3\t10002000$10002001\n     4\t10002000$10002002\n     5\t10003000$10003001\n     6\t\nTotal lines in file: 6\n&quot;,&quot;isError&quot;:false,&quot;requestId&quot;:&quot;&quot;}},&quot;4acd7689-025b-43aa-84d9-8143a4855d31;toolu_vrtx_01ATjPrAdN2etBeaTNAEnFM1&quot;:{&quot;requestId&quot;:&quot;4acd7689-025b-43aa-84d9-8143a4855d31&quot;,&quot;toolUseId&quot;:&quot;toolu_vrtx_01ATjPrAdN2etBeaTNAEnFM1&quot;,&quot;phase&quot;:5,&quot;result&quot;:{&quot;text&quot;:&quot;Here are the results from executing the command.\n        &lt;return-code&gt;\n        0\n        &lt;/return-code&gt;\n        &lt;stdout&gt;\n        Sample edges:\n  0: ('10002102', '10002203') (type: &lt;class 'tuple'&gt;, len: 2)\n  1: ('10001102', '10001202') (type: &lt;class 'tuple'&gt;, len: 2)\n  2: ('10003001', '10002101') (type: &lt;class 'tuple'&gt;, len: 2)\n  3: ('10001000', '10001001') (type: &lt;class 'tuple'&gt;, len: 2)\n  4: ('10001000', '10001002') (type: &lt;class 'tuple'&gt;, len: 2)\n  5: ('10002101', '10002202') (type: &lt;class 'tuple'&gt;, len: 2)\n  6: ('10002002', '10002102') (type: &lt;class 'tuple'&gt;, len: 2)\n  7: ('10001201', '10001301') (type: &lt;class 'tuple'&gt;, len: 2)\n  8: ('10001101', '10001202') (type: &lt;class 'tuple'&gt;, len: 2)\n  9: ('10002001', '10002101') (type: &lt;class 'tuple'&gt;, len: 2)\n\nTotal nodes: 26\nTotal terms: 25\n\nExtra nodes not in terms: 1\n  '10002203'\n\n        &lt;/stdout&gt;\n        &lt;stderr&gt;\n        \n        &lt;/stderr&gt;&quot;,&quot;isError&quot;:false,&quot;requestId&quot;:&quot;&quot;}},&quot;670651fb-9b27-4bd4-8109-dfa9545ca226;toolu_vrtx_016ZdM4f7BNvfxLs2PDQQ9pq&quot;:{&quot;requestId&quot;:&quot;670651fb-9b27-4bd4-8109-dfa9545ca226&quot;,&quot;toolUseId&quot;:&quot;toolu_vrtx_016ZdM4f7BNvfxLs2PDQQ9pq&quot;,&quot;phase&quot;:5,&quot;result&quot;:{&quot;text&quot;:&quot;Here are the results from executing the command.\n        &lt;return-code&gt;\n        0\n        &lt;/return-code&gt;\n        &lt;stdout&gt;\n        src/meddra_graph/tests/test_data/mdhier.asc:10002203$10002102$10002002$10002000$Duis aute irure dolor in$Amet consectetur adipiscing elit sed$Dolor in reprehenderit in voluptate$Consectetur adipiscing elit$Consectetur$$10002000$Y\nsrc/meddra_graph/tests/test_data/hlt_pt.asc:10002102$10002203\nsrc/meddra_graph/tests/test_data/smq_content.asc:20000002$10002203$4$2$B$1$A$99.0$99.0\n\n        &lt;/stdout&gt;\n        &lt;stderr&gt;\n        \n        &lt;/stderr&gt;&quot;,&quot;isError&quot;:false,&quot;requestId&quot;:&quot;&quot;}},&quot;b0525bac-d1d8-4cbc-9855-ca530ea3544b;toolu_vrtx_019DvwP22EinWh59bFKrGFXU&quot;:{&quot;requestId&quot;:&quot;b0525bac-d1d8-4cbc-9855-ca530ea3544b&quot;,&quot;toolUseId&quot;:&quot;toolu_vrtx_019DvwP22EinWh59bFKrGFXU&quot;,&quot;phase&quot;:5,&quot;result&quot;:{&quot;text&quot;:&quot;Here's the result of running `cat -n` on src/meddra_graph/tests/test_data/pt.asc:\n     1\t10001201$Do eiusmod tempor incididunt ut$$10001000$TUV$50001201$TUV$X40.1$X40.1$TUV\n     2\t10001202$Labore et dolore magna aliqua$$10001000$WXY$50001202$WXY$X40.2$X40.2$WXY\n     3\t10001301$Enim ad minim veniam quis nostrud$$10001000$ZAB$50001301$ZAB$X40.3$X40.3$ZAB\n     4\t10002201$Exercitation ullamco laboris nisi$$10002000$CDE$50002201$CDE$Y40.1$Y40.1$CDE\n     5\t10002202$Ut aliquip ex ea commodo consequat$$10002000$FGH$50002202$FGH$Y40.2$Y40.2$FGH\n     6\t\nTotal lines in file: 6\n&quot;,&quot;isError&quot;:false,&quot;requestId&quot;:&quot;&quot;}},&quot;3c6dc090-e632-426d-9373-3317b6f55822;toolu_vrtx_016zLMEcJ92XcqHxNqZcKzEz&quot;:{&quot;requestId&quot;:&quot;3c6dc090-e632-426d-9373-3317b6f55822&quot;,&quot;toolUseId&quot;:&quot;toolu_vrtx_016zLMEcJ92XcqHxNqZcKzEz&quot;,&quot;phase&quot;:5,&quot;result&quot;:{&quot;text&quot;:&quot;Here's the result of running `cat -n` on src/meddra_graph/tests/test_data/hlt_pt.asc:\n     1\t10001101$10001201\n     2\t10001101$10001202\n     3\t10001102$10001202\n     4\t10001201$10001301\n     5\t10002101$10002201\n     6\t10002101$10002202\n     7\t10002102$10002202\n     8\t10002102$10002203\n     9\t\nTotal lines in file: 9\n&quot;,&quot;isError&quot;:false,&quot;requestId&quot;:&quot;&quot;}},&quot;87fd1dcd-8eae-45b7-99b6-d2e0b724789a;toolu_vrtx_01V6Pn2BSFAgEna2HddBp8sa&quot;:{&quot;requestId&quot;:&quot;87fd1dcd-8eae-45b7-99b6-d2e0b724789a&quot;,&quot;toolUseId&quot;:&quot;toolu_vrtx_01V6Pn2BSFAgEna2HddBp8sa&quot;,&quot;phase&quot;:8},&quot;e4a79ec5-524d-4b08-95ed-28f4883b0e71;toolu_vrtx_018mKkcX6qu15aNauEEHM11r&quot;:{&quot;requestId&quot;:&quot;e4a79ec5-524d-4b08-95ed-28f4883b0e71&quot;,&quot;toolUseId&quot;:&quot;toolu_vrtx_018mKkcX6qu15aNauEEHM11r&quot;,&quot;phase&quot;:8,&quot;result&quot;:{&quot;text&quot;:&quot;Here are the results from executing the command.\n        &lt;return-code&gt;\n        0\n        &lt;/return-code&gt;\n        &lt;stdout&gt;\n        Actual terms in test data:\n\n# SOC terms:\n    ('soc', '50000001', 'Lorem ipsum dolor sit amet'),\n    ('soc', '50000002', 'Consectetur adipiscing elit'),\n    ('soc', '50000003', 'Sed do eiusmod tempor incididunt'),\n    ('soc', '50000004', 'Ut labore et dolore magna aliqua'),\n    ('soc', '50000005', 'Enim ad minim veniam quis'),\n\n# HLGT terms:\n    ('hlgt', '30000001', 'Nostrud exercitation ullamco'),\n    ('hlgt', '30000002', 'Laboris nisi ut aliquip ex ea'),\n    ('hlgt', '30000003', 'Commodo consequat duis aute irure'),\n    ('hlgt', '30000004', 'Dolor in reprehenderit in voluptate'),\n    ('hlgt', '30000005', 'Velit esse cillum dolore eu fugiat'),\n\n# HLT terms:\n    ('hlt', '10000001', 'Nulla pariatur excepteur sint occaecat'),\n    ('hlt', '10000002', 'Cupidatat non proident sunt in culpa'),\n    ('hlt', '10000003', 'Qui officia deserunt mollit anim id'),\n    ('hlt', '10000004', 'Est laborum lorem ipsum dolor sit'),\n    ('hlt', '10000005', 'Amet consectetur adipiscing elit sed'),\n\n# PT terms:\n    ('pt', '40000001', 'Do eiusmod tempor incididunt ut'),\n    ('pt', '40000002', 'Labore et dolore magna aliqua'),\n    ('pt', '40000003', 'Enim ad minim veniam quis nostrud'),\n    ('pt', '40000004', 'Exercitation ullamco laboris nisi'),\n    ('pt', '40000005', 'Ut aliquip ex ea commodo consequat'),\n\n# LLT terms:\n    ('llt', '20000001', 'Reprehenderit in voluptate velit esse'),\n    ('llt', '20000002', 'Cillum dolore eu fugiat nulla'),\n    ('llt', '20000003', 'Pariatur excepteur sint occaecat'),\n    ('llt', '20000004', 'Cupidatat non proident sunt in'),\n    ('llt', '20000005', 'Culpa qui officia deserunt mollit'),\n\nTotal terms: 25\nTotal edges: 24\n\n        &lt;/stdout&gt;\n        &lt;stderr&gt;\n        \n        &lt;/stderr&gt;&quot;,&quot;isError&quot;:false,&quot;requestId&quot;:&quot;&quot;}},&quot;242c4916-b394-4294-b5a3-3d87400f0f7d;toolu_vrtx_01LJoqLugayAfECRJVGikk7S&quot;:{&quot;requestId&quot;:&quot;242c4916-b394-4294-b5a3-3d87400f0f7d&quot;,&quot;toolUseId&quot;:&quot;toolu_vrtx_01LJoqLugayAfECRJVGikk7S&quot;,&quot;phase&quot;:5,&quot;result&quot;:{&quot;text&quot;:&quot;Here are the results from executing the command.\n        &lt;return-code&gt;\n        0\n        &lt;/return-code&gt;\n        &lt;stdout&gt;\n        === SOC terms ===\n50000001$Lorem ipsum dolor sit amet$Lorem$ABC$20001000$ABC$ABC$X00-X99$X00-X99$ABC\n50000002$Consectetur adipiscing elit$Consectetur$DEF$20002000$DEF$DEF$Y00-Y99$Y00-Y99$DEF\n50000003$Sed do eiusmod tempor incididunt$Sed$GHI$20003000$GHI$GHI$Z00-Z99$Z00-Z99$GHI\n50000004$Ut labore et dolore magna aliqua$Ut$JKL$20004000$JKL$JKL$W00-W99$W00-W99$JKL\n50000005$Enim ad minim veniam quis$Enim$MNO$20005000$MNO$MNO$V00-V99$V00-V99$MNO\n\n=== HLGT terms ===\n30000001$Nostrud exercitation ullamco$PQR$30001001$PQR$PQR$X10-X19$X10-X19$PQR\n30000002$Laboris nisi ut aliquip ex ea$STU$30001002$STU$STU$X20-X29$X20-X29$STU\n30000003$Commodo consequat duis aute irure$VWX$30002001$VWX$VWX$Y10-Y19$Y10-Y19$VWX\n30000004$Dolor in reprehenderit in voluptate$YZA$30002002$YZA$YZA$Y20-Y29$Y20-Y29$YZA\n30000005$Velit esse cillum dolore eu fugiat$BCD$30003001$BCD$BCD$Z10-Z19$Z10-Z19$BCD\n\n=== HLT terms ===\n10000001$Nulla pariatur excepteur sint occaecat$EFG$40001101$EFG$EFG$X30$X30$EFG\n10000002$Cupidatat non proident sunt in culpa$HIJ$40001102$HIJ$HIJ$X31$X31$HIJ\n10000003$Qui officia deserunt mollit anim id$KLM$40001201$KLM$KLM$X32$X32$KLM\n10000004$Est laborum lorem ipsum dolor sit$NOP$40002101$NOP$NOP$Y30$Y30$NOP\n10000005$Amet consectetur adipiscing elit sed$QRS$40002102$QRS$QRS$Y31$Y31$QRS\n\n=== PT terms ===\n40000001$Do eiusmod tempor incididunt ut$$10001000$TUV$50001201$TUV$X40.1$X40.1$TUV\n40000002$Labore et dolore magna aliqua$$10001000$WXY$50001202$WXY$X40.2$X40.2$WXY\n40000003$Enim ad minim veniam quis nostrud$$10001000$ZAB$50001301$ZAB$X40.3$X40.3$ZAB\n40000004$Exercitation ullamco laboris nisi$$10002000$CDE$50002201$CDE$Y40.1$Y40.1$CDE\n40000005$Ut aliquip ex ea commodo consequat$$10002000$FGH$50002202$FGH$Y40.2$Y40.2$FGH\n\n=== LLT terms ===\n20000001$Reprehenderit in voluptate velit esse$10001201$LMN$60001301$LMN$X50.1$X50.1$X50.1$Y$LMN\n20000002$Cillum dolore eu fugiat nulla$10001201$OPQ$60001302$OPQ$X50.2$X50.2$X50.2$Y$OPQ\n20000003$Pariatur excepteur sint occaecat$10001202$RST$60001303$RST$X50.3$X50.3$X50.3$Y$RST\n20000004$Cupidatat non proident sunt in$10001301$UVW$60001401$UVW$X50.4$X50.4$X50.4$Y$UVW\n20000005$Culpa qui officia deserunt mollit$10002201$XYZ$60002301$XYZ$Y50.1$Y50.1$Y50.1$Y$XYZ\n\n        &lt;/stdout&gt;\n        &lt;stderr&gt;\n        \n        &lt;/stderr&gt;&quot;,&quot;isError&quot;:false,&quot;requestId&quot;:&quot;&quot;}},&quot;522025f8-8943-49a0-b2be-0b4ef3e2d809;toolu_vrtx_01Jz1rbrgXBHvDARGmBTAeuc&quot;:{&quot;requestId&quot;:&quot;522025f8-8943-49a0-b2be-0b4ef3e2d809&quot;,&quot;toolUseId&quot;:&quot;toolu_vrtx_01Jz1rbrgXBHvDARGmBTAeuc&quot;,&quot;phase&quot;:6,&quot;result&quot;:{&quot;text&quot;:&quot;Failed to edit the file src/meddra_graph/tests/test_meddra_loader.py. See below for details.\nResult for str_replace for entry with index [0]:\nNo replacement was performed, oldStr did not appear verbatim in src/meddra_graph/tests/test_meddra_loader.py.\nThe content in the specified region is:\n     4\timport pytest\n     5\t\n     6\tfrom meddra_graph.meddra_loader import MedDRALoader, MedDRAData\n     7\t\n     8\tTEST_TERMS = [\n     9\t    # SOC (System Organ Classes)\n    10\t    (\&quot;soc\&quot;, \&quot;10001000\&quot;, \&quot;Lorem ipsum dolor sit amet\&quot;),\n    11\t    (\&quot;soc\&quot;, \&quot;10002000\&quot;, \&quot;Consectetur adipiscing elit\&quot;),\n    12\t    (\&quot;soc\&quot;, \&quot;10003000\&quot;, \&quot;Sed do eiusmod tempor incididunt\&quot;),\n    13\t    (\&quot;soc\&quot;, \&quot;10004000\&quot;, \&quot;Ut labore et dolore magna aliqua\&quot;),\n    14\t    (\&quot;soc\&quot;, \&quot;10005000\&quot;, \&quot;Enim ad minim veniam quis\&quot;),\n    15\t\n    16\t    # HLGT (High Level Group Terms)\n    17\t    (\&quot;hlgt\&quot;, \&quot;10001001\&quot;, \&quot;Nostrud exercitation ullamco\&quot;),\n    18\t    (\&quot;hlgt\&quot;, \&quot;10001002\&quot;, \&quot;Laboris nisi ut aliquip ex ea\&quot;),\n    19\t    (\&quot;hlgt\&quot;, \&quot;10002001\&quot;, \&quot;Commodo consequat duis aute irure\&quot;),\n    20\t    (\&quot;hlgt\&quot;, \&quot;10002002\&quot;, \&quot;Dolor in reprehenderit in voluptate\&quot;),\n    21\t    (\&quot;hlgt\&quot;, \&quot;10003001\&quot;, \&quot;Velit esse cillum dolore eu fugiat\&quot;),\n    22\t\n    23\t    # HLT (High Level Terms)\n    24\t    (\&quot;hlt\&quot;, \&quot;10001101\&quot;, \&quot;Nulla pariatur excepteur sint occaecat\&quot;),\n    25\t    (\&quot;hlt\&quot;, \&quot;10001102\&quot;, \&quot;Cupidatat non proident sunt in culpa\&quot;),\n    26\t    (\&quot;hlt\&quot;, \&quot;10001203\&quot;, \&quot;Qui officia deserunt mollit anim id\&quot;),\n    27\t    (\&quot;hlt\&quot;, \&quot;10002101\&quot;, \&quot;Est laborum lorem ipsum dolor sit\&quot;),\n    28\t    (\&quot;hlt\&quot;, \&quot;10002102\&quot;, \&quot;Amet consectetur adipiscing elit sed\&quot;),\n    29\t\n    30\t    # PT (Preferred Terms)\n    31\t    (\&quot;pt\&quot;, \&quot;10001201\&quot;, \&quot;Do eiusmod tempor incididunt ut\&quot;),\n    32\t    (\&quot;pt\&quot;, \&quot;10001202\&quot;, \&quot;Labore et dolore magna aliqua\&quot;),\n    33\t    (\&quot;pt\&quot;, \&quot;10001302\&quot;, \&quot;Enim ad minim veniam quis nostrud\&quot;),\n    34\t    (\&quot;pt\&quot;, \&quot;10002201\&quot;, \&quot;Exercitation ullamco laboris nisi\&quot;),\n    35\t    (\&quot;pt\&quot;, \&quot;10002202\&quot;, \&quot;Ut aliquip ex ea commodo consequat\&quot;),\n    36\t\n    37\t    # LLT (Lowest Level Terms) from file\n    38\t    (\&quot;llt\&quot;, \&quot;10001301\&quot;, \&quot;Reprehenderit in voluptate velit esse\&quot;),\n    39\t    (\&quot;llt\&quot;, \&quot;10001302\&quot;, \&quot;Cillum dolore eu fugiat nulla pariatur\&quot;),\n    40\t    (\&quot;llt\&quot;, \&quot;10001303\&quot;, \&quot;Pariatur excepteur sint occaecat cupidatat\&quot;),\n    41\t    (\&quot;llt\&quot;, \&quot;10001401\&quot;, \&quot;Cupidatat non proident sunt in culpa qui\&quot;),\n    42\t    (\&quot;llt\&quot;, \&quot;10002301\&quot;, \&quot;Officia deserunt mollit anim id est\&quot;),\n    43\t]\n    44\t\n    45\tNUMBER_OF_TEST_TERMS = len(TEST_TERMS)\n    46\tNUMBER_OF_TEST_EDGES = 24\n    47\t\n\nDiff between oldStr and the specified region is:\n===================================================================\n--- oldStr\n+++ regionContent\n@@ -16,21 +16,21 @@\n     # HLT (High Level Terms)\n     (\&quot;hlt\&quot;, \&quot;10001101\&quot;, \&quot;Nulla pariatur excepteur sint occaecat\&quot;),\n     (\&quot;hlt\&quot;, \&quot;10001102\&quot;, \&quot;Cupidatat non proident sunt in culpa\&quot;),\n+    (\&quot;hlt\&quot;, \&quot;10001203\&quot;, \&quot;Qui officia deserunt mollit anim id\&quot;),\n     (\&quot;hlt\&quot;, \&quot;10002101\&quot;, \&quot;Est laborum lorem ipsum dolor sit\&quot;),\n     (\&quot;hlt\&quot;, \&quot;10002102\&quot;, \&quot;Amet consectetur adipiscing elit sed\&quot;),\n-    (\&quot;hlt\&quot;, \&quot;10003101\&quot;, \&quot;Duis aute irure dolor in reprehenderit\&quot;),\n \n     # PT (Preferred Terms)\n     (\&quot;pt\&quot;, \&quot;10001201\&quot;, \&quot;Do eiusmod tempor incididunt ut\&quot;),\n     (\&quot;pt\&quot;, \&quot;10001202\&quot;, \&quot;Labore et dolore magna aliqua\&quot;),\n-    (\&quot;pt\&quot;, \&quot;10001301\&quot;, \&quot;Enim ad minim veniam quis nostrud\&quot;),\n+    (\&quot;pt\&quot;, \&quot;10001302\&quot;, \&quot;Enim ad minim veniam quis nostrud\&quot;),\n     (\&quot;pt\&quot;, \&quot;10002201\&quot;, \&quot;Exercitation ullamco laboris nisi\&quot;),\n     (\&quot;pt\&quot;, \&quot;10002202\&quot;, \&quot;Ut aliquip ex ea commodo consequat\&quot;),\n \n-    # LLT (Lowest Level Terms)\n-    (\&quot;llt\&quot;, \&quot;10001302\&quot;, \&quot;Cillum dolore eu fugiat nulla\&quot;),\n-    (\&quot;llt\&quot;, \&quot;10001303\&quot;, \&quot;Pariatur excepteur sint occaecat\&quot;),\n-    (\&quot;llt\&quot;, \&quot;10002302\&quot;, \&quot;Anim id est laborum sed ut\&quot;),\n-    (\&quot;llt\&quot;, \&quot;10002303\&quot;, \&quot;Lorem ipsum dolor sit amet\&quot;),\n-    (\&quot;llt\&quot;, \&quot;10003301\&quot;, \&quot;Consectetur adipiscing elit\&quot;),\n+    # LLT (Lowest Level Terms) from file\n+    (\&quot;llt\&quot;, \&quot;10001301\&quot;, \&quot;Reprehenderit in voluptate velit esse\&quot;),\n+    (\&quot;llt\&quot;, \&quot;10001302\&quot;, \&quot;Cillum dolore eu fugiat nulla pariatur\&quot;),\n+    (\&quot;llt\&quot;, \&quot;10001303\&quot;, \&quot;Pariatur excepteur sint occaecat cupidatat\&quot;),\n+    (\&quot;llt\&quot;, \&quot;10001401\&quot;, \&quot;Cupidatat non proident sunt in culpa qui\&quot;),\n+    (\&quot;llt\&quot;, \&quot;10002301\&quot;, \&quot;Officia deserunt mollit anim id est\&quot;),\n ]\n\n\nFix failed str_replace entries accordingly and try again.\n&quot;,&quot;isError&quot;:true,&quot;requestId&quot;:&quot;&quot;}},&quot;e7a073a8-013d-4c96-9018-4b0eecc8c3ab;toolu_vrtx_01J6i3xyonjvLjZLwZsvhkBS&quot;:{&quot;requestId&quot;:&quot;e7a073a8-013d-4c96-9018-4b0eecc8c3ab&quot;,&quot;toolUseId&quot;:&quot;toolu_vrtx_01J6i3xyonjvLjZLwZsvhkBS&quot;,&quot;phase&quot;:5,&quot;result&quot;:{&quot;text&quot;:&quot;Note:\nView range expanded to meet minimum size of 500 lines. End line adjusted to last line of file (106).\n\nHere's the result of running `cat -n` on src/meddra_graph/tests/test_meddra_loader.py:\n     8\tTEST_TERMS = [\n     9\t    # SOC (System Organ Classes)\n    10\t    (\&quot;soc\&quot;, \&quot;10001000\&quot;, \&quot;Lorem ipsum dolor sit amet\&quot;),\n    11\t    (\&quot;soc\&quot;, \&quot;10002000\&quot;, \&quot;Consectetur adipiscing elit\&quot;),\n    12\t    (\&quot;soc\&quot;, \&quot;10003000\&quot;, \&quot;Sed do eiusmod tempor incididunt\&quot;),\n    13\t    (\&quot;soc\&quot;, \&quot;10004000\&quot;, \&quot;Ut labore et dolore magna aliqua\&quot;),\n    14\t    (\&quot;soc\&quot;, \&quot;10005000\&quot;, \&quot;Enim ad minim veniam quis\&quot;),\n    15\t\n    16\t    # HLGT (High Level Group Terms)\n    17\t    (\&quot;hlgt\&quot;, \&quot;10001001\&quot;, \&quot;Nostrud exercitation ullamco\&quot;),\n    18\t    (\&quot;hlgt\&quot;, \&quot;10001002\&quot;, \&quot;Laboris nisi ut aliquip ex ea\&quot;),\n    19\t    (\&quot;hlgt\&quot;, \&quot;10002001\&quot;, \&quot;Commodo consequat duis aute irure\&quot;),\n    20\t    (\&quot;hlgt\&quot;, \&quot;10002002\&quot;, \&quot;Dolor in reprehenderit in voluptate\&quot;),\n    21\t    (\&quot;hlgt\&quot;, \&quot;10003001\&quot;, \&quot;Velit esse cillum dolore eu fugiat\&quot;),\n    22\t\n    23\t    # HLT (High Level Terms)\n    24\t    (\&quot;hlt\&quot;, \&quot;10001101\&quot;, \&quot;Nulla pariatur excepteur sint occaecat\&quot;),\n    25\t    (\&quot;hlt\&quot;, \&quot;10001102\&quot;, \&quot;Cupidatat non proident sunt in culpa\&quot;),\n    26\t    (\&quot;hlt\&quot;, \&quot;10001203\&quot;, \&quot;Qui officia deserunt mollit anim id\&quot;),\n    27\t    (\&quot;hlt\&quot;, \&quot;10002101\&quot;, \&quot;Est laborum lorem ipsum dolor sit\&quot;),\n    28\t    (\&quot;hlt\&quot;, \&quot;10002102\&quot;, \&quot;Amet consectetur adipiscing elit sed\&quot;),\n    29\t\n    30\t    # PT (Preferred Terms)\n    31\t    (\&quot;pt\&quot;, \&quot;10001201\&quot;, \&quot;Do eiusmod tempor incididunt ut\&quot;),\n    32\t    (\&quot;pt\&quot;, \&quot;10001202\&quot;, \&quot;Labore et dolore magna aliqua\&quot;),\n    33\t    (\&quot;pt\&quot;, \&quot;10001302\&quot;, \&quot;Enim ad minim veniam quis nostrud\&quot;),\n    34\t    (\&quot;pt\&quot;, \&quot;10002201\&quot;, \&quot;Exercitation ullamco laboris nisi\&quot;),\n    35\t    (\&quot;pt\&quot;, \&quot;10002202\&quot;, \&quot;Ut aliquip ex ea commodo consequat\&quot;),\n    36\t\n    37\t    # LLT (Lowest Level Terms) from file\n    38\t    (\&quot;llt\&quot;, \&quot;10001301\&quot;, \&quot;Reprehenderit in voluptate velit esse\&quot;),\n    39\t    (\&quot;llt\&quot;, \&quot;10001302\&quot;, \&quot;Cillum dolore eu fugiat nulla pariatur\&quot;),\n    40\t    (\&quot;llt\&quot;, \&quot;10001303\&quot;, \&quot;Pariatur excepteur sint occaecat cupidatat\&quot;),\n    41\t    (\&quot;llt\&quot;, \&quot;10001401\&quot;, \&quot;Cupidatat non proident sunt in culpa qui\&quot;),\n    42\t    (\&quot;llt\&quot;, \&quot;10002301\&quot;, \&quot;Officia deserunt mollit anim id est\&quot;),\n    43\t]\n    44\t\n    45\tNUMBER_OF_TEST_TERMS = len(TEST_TERMS)\n    46\tNUMBER_OF_TEST_EDGES = 24\n    47\t\n    48\t\n    49\tdef _generate_test_ids() -&gt; list[str]:\n    50\t    \&quot;\&quot;\&quot;Generate test IDs like soc1, soc2, hlgt1, hlgt2, etc.\&quot;\&quot;\&quot;\n    51\t    term_counts: dict[str, int] = {}\n    52\t    ids: list[str] = []\n    53\t    for term_level, _, _ in TEST_TERMS:\n    54\t        term_counts[term_level] = term_counts.get(term_level, 0) + 1\n    55\t        ids.append(f\&quot;{term_level}{term_counts[term_level]}\&quot;)\n    56\t    return ids\n    57\t\n    58\t\n    59\t@pytest.fixture(name=\&quot;meddra_data\&quot;)\n    60\tdef meddra_data_fixture() -&gt; MedDRAData:\n    61\t    return MedDRALoader.load(Path(__file__).parent / \&quot;test_data\&quot;)\n    62\t\n    63\t\n    64\tdef test_loading_passes() -&gt; None:\n    65\t    MedDRALoader.load(Path(__file__).parent / \&quot;test_data\&quot;)\n    66\t\n    67\t\n    68\tdef test_version_loaded(meddra_data: MedDRAData) -&gt; None:\n    69\t    assert meddra_data.version == \&quot;99.0 TestLang Dummy Data Release\&quot;\n    70\t\n    71\t\n    72\tdef test_term_levels_loaded(meddra_data: MedDRAData) -&gt; None:\n    73\t    df = pd.DataFrame.from_records(list(meddra_data.terms.values()))\n    74\t    assert len(df[\&quot;term_type\&quot;].unique()) == 5\n    75\t    assert set(df[\&quot;term_type\&quot;].unique()) == {\&quot;soc\&quot;, \&quot;hlgt\&quot;, \&quot;hlt\&quot;, \&quot;pt\&quot;, \&quot;llt\&quot;}\n    76\t\n    77\t\n    78\tdef test_schema_levels_loaded(meddra_data: MedDRAData) -&gt; None:\n    79\t    assert len(meddra_data.schema) == 12\n    80\t    assert all(fn in meddra_data.schema for fn in [\&quot;soc.asc\&quot;, \&quot;hlgt.asc\&quot;, \&quot;hlt.asc\&quot;, \&quot;pt.asc\&quot;, \&quot;llt.asc\&quot;])\n    81\t\n    82\t\n    83\tdef test_edges_loaded(meddra_data: MedDRAData) -&gt; None:\n    84\t    assert len(meddra_data.edges) == NUMBER_OF_TEST_EDGES\n    85\t\n    86\t\n    87\tdef test_terms_loaded(meddra_data: MedDRAData) -&gt; None:\n    88\t    assert len(meddra_data.terms) == NUMBER_OF_TEST_TERMS\n    89\t\n    90\t\n    91\tdef test_graph_nodes_loaded(meddra_data: MedDRAData) -&gt; None:\n    92\t    assert len(meddra_data.to_graph().nodes()) == NUMBER_OF_TEST_TERMS\n    93\t\n    94\t\n    95\tdef test_graph_edges_loaded(meddra_data: MedDRAData) -&gt; None:\n    96\t    assert len(meddra_data.to_graph().edges()) == NUMBER_OF_TEST_EDGES\n    97\t\n    98\t\n    99\tdef test_term_definitions_correct(meddra_data: MedDRAData) -&gt; None:\n   100\t    \&quot;\&quot;\&quot;Test that each term has the correct definition/name in the loaded data.\&quot;\&quot;\&quot;\n   101\t    g = meddra_data.to_graph()\n   102\t    for term_type, term_code, expected_name in TEST_TERMS:\n   103\t        assert g.nodes[term_code][f\&quot;{term_type}_code\&quot;] == term_code\n   104\t        assert g.nodes[term_code][f\&quot;{term_type}_name\&quot;] == expected_name\n   105\t        assert g.nodes[term_code][\&quot;term_type\&quot;] == term_type\n   106\t\nTotal lines in file: 106\n&quot;,&quot;isError&quot;:false,&quot;requestId&quot;:&quot;&quot;}},&quot;bf585ec0-10db-429b-a741-42cd6c600484;toolu_vrtx_01Ma5PLvHM267FcS8BXEiHZc&quot;:{&quot;requestId&quot;:&quot;bf585ec0-10db-429b-a741-42cd6c600484&quot;,&quot;toolUseId&quot;:&quot;toolu_vrtx_01Ma5PLvHM267FcS8BXEiHZc&quot;,&quot;phase&quot;:7}},&quot;draftExchange&quot;:{&quot;request_message&quot;:&quot;&quot;,&quot;rich_text_json_repr&quot;:{&quot;type&quot;:&quot;doc&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;paragraph&quot;}]},&quot;status&quot;:&quot;draft&quot;},&quot;requestIds&quot;:[],&quot;isPinned&quot;:false,&quot;isShareable&quot;:true,&quot;extraData&quot;:{&quot;isAgentConversation&quot;:true,&quot;hasDirtyEdits&quot;:false},&quot;personaType&quot;:0,&quot;rootTaskUuid&quot;:&quot;0a3b1907-aa72-4d5d-91df-e5f1a9e944a3&quot;}},&quot;agentExecutionMode&quot;:&quot;auto&quot;,&quot;isPanelCollapsed&quot;:true,&quot;displayedAnnouncements&quot;:[],&quot;sortConversationsBy&quot;:&quot;lastMessageTimestamp&quot;,&quot;sendMode&quot;:&quot;send&quot;}" />
      </map>
    </option>
  </component>
</project>