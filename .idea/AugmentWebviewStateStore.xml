<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AugmentWebviewStateStore">
    <option name="stateMap">
      <map>
        <entry key="CHAT_STATE" value="{&quot;currentConversationId&quot;:&quot;74af6f30-1148-4e4e-9aa9-b13b1280d4ca&quot;,&quot;conversations&quot;:{&quot;0faf8e49-1904-4977-a97c-468a8d721bf5&quot;:{&quot;id&quot;:&quot;0faf8e49-1904-4977-a97c-468a8d721bf5&quot;,&quot;createdAtIso&quot;:&quot;2025-06-24T15:06:57.214Z&quot;,&quot;lastInteractedAtIso&quot;:&quot;2025-06-24T15:07:47.224Z&quot;,&quot;chatHistory&quot;:[{&quot;status&quot;:&quot;success&quot;,&quot;request_id&quot;:&quot;b9e42154-168e-4b51-a5cf-4b11a12c13d7&quot;,&quot;request_message&quot;:&quot;Please add a short usage section to the readme. Keep it light.&quot;,&quot;rich_text_json_repr&quot;:{&quot;type&quot;:&quot;doc&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;Please add a short usage section to the readme. Keep it light.&quot;}]}]},&quot;mentioned_items&quot;:[],&quot;structured_output_nodes&quot;:[{&quot;id&quot;:0,&quot;type&quot;:0,&quot;content&quot;:&quot;I'll add a short usage section to the README.md that's light and informative:\n\n&lt;augment_code_snippet path=\&quot;README.md\&quot; mode=\&quot;EDIT\&quot;&gt;\n```markdown\n# MedDRA Loader\n\n[![CI](https://github.com/wullli/meddra-loader/workflows/CI/badge.svg)](https://github.com/wullli/meddra-loader/actions/workflows/ci.yml)\n[![codecov](https://codecov.io/gh/wullli/meddra-loader/branch/main/graph/badge.svg)](https://codecov.io/gh/wullli/meddra-loader)\n\nDISCLAIMER: This software does not give you access to MedDRA and you need a valid subscription to work with MedDRA data: https://www.meddra.org/. It merely provides tooling for loading the MedDRA data and hierarchy with python into a networkx graph. It is only intended for use with legitimately licensed MedDRA data and users are responsible for obtaining a valid license from the MSSO.\n\n## Usage\n\n```python\nfrom pathlib import Path\nfrom meddra_loader.meddra_digraph import MedDRADiGraph\n\n# Create a new MedDRA graph\ngraph = MedDRADiGraph()\n\n# Load MedDRA data from a directory\ngraph.load(Path(\&quot;/path/to/meddra/data\&quot;))\n\n# Access MedDRA version\nprint(f\&quot;MedDRA Version: {graph.meddra_version}\&quot;)\n\n# Access loaded terms\nprint(f\&quot;Number of terms: {len(graph.terms)}\&quot;)\n\n# Access term hierarchy\nprint(f\&quot;Term levels: {graph.term_levels}\&quot;)\n```\n\nThe graph is a standard NetworkX DiGraph with additional MedDRA-specific attributes and methods.\n```\n&lt;/augment_code_snippet&gt;\n&quot;},{&quot;id&quot;:2,&quot;type&quot;:2,&quot;content&quot;:&quot;&quot;},{&quot;id&quot;:3,&quot;type&quot;:3,&quot;content&quot;:&quot;README.md:0-675\nsrc/meddra_loader/tests/test_data/README.md:0-669\nsrc/meddra_loader/tests/test_data/README.md:669-904\n.github/workflows/ci.yml:0-102\n.github/workflows/ci.yml:102-1003\n.github/workflows/ci.yml:1003-1370\npyproject.toml:0-690\npyproject.toml:690-1394\npyproject.toml:1394-1857\nmodules/meddra-loader/demo_loading.py:0-170\nmodules/meddra-loader/demo_loading.py:170-1016\nscripts/run_ci_checks.sh:0-585\n.gitignore:0-717\n.gitignore:717-1195\n.gitignore:1195-1783\n.gitignore:1783-2477\n.gitignore:2477-3001\n.gitignore:3001-3571\n.gitignore:3571-4319\nLICENSE:0-601\nsrc/sprint/entrypoints/copy_markdown.py:0-848\nsrc/sprint/models/weights/run-20241010T111217/wandb-metadata.json:0-625\nsrc/sprint/models/weights/run-20241010T111217/wandb-metadata.json:625-987\nsrc/sprint/models/weights/run-20241010T111217/wandb-metadata.json:3643-4004\nsrc/sprint/full_text/ctcae_detection_dspy.py:0-437\nsrc/sprint/full_text/ctcae_detection_dspy.py:437-834\nsrc/sprint/full_text/ctcae_detection_dspy.py:7211-8065\n.pre-commit-config.yaml:0-442\nsrc/meddra_loader/tests/test_meddra_digraph.py:0-96\nsrc/meddra_loader/tests/test_meddra_digraph.py:876-1618\nsrc/meddra_loader/tests/test_meddra_digraph.py:1618-2290\nsrc/meddra_loader/tests/test_meddra_digraph.py:2290-3029\nsrc/meddra_loader/tests/test_meddra_digraph.py:3029-3671\nsrc/meddra_loader/tests/test_data/smq_list.asc:0-693\nsrc/sprint/entrypoints/check-full-text-annotations.py:0-606\nsrc/sprint/full_text/annotations.py:0-306\nsrc/sprint/entrypoints/extract-manual-abstract-screening_first-search.py:0-752\nsrc/sprint/entrypoints/extract-manual-abstract-screening_first-search.py:752-1483\nsrc/sprint/entrypoints/extract-manual-abstract-screening_first-search.py:2789-3649\nsrc/sprint/entrypoints/download-pubmed-abstracts.py:3796-4392\nsrc/sprint/full_text/ctcae_detection_gpt.py:0-571\nsrc/sprint/full_text/ctcae_detection_gpt.py:1007-1708\nsrc/sprint/learning_rate_schedules.py:0-852\nsrc/meddra_loader/meddra_digraph.py:0-567&quot;}],&quot;seen_state&quot;:&quot;seen&quot;,&quot;structured_request_nodes&quot;:[{&quot;id&quot;:0,&quot;type&quot;:0,&quot;text_node&quot;:{&quot;content&quot;:&quot;Please add a short usage section to the readme. Keep it light.&quot;}},{&quot;id&quot;:1,&quot;type&quot;:4,&quot;ide_state_node&quot;:{&quot;workspaceFolders&quot;:[{&quot;repositoryRoot&quot;:&quot;/Users/tcwullsc/Devel/AAI/SPRINT/modules/meddra-loader&quot;,&quot;folderRoot&quot;:&quot;/Users/tcwullsc/Devel/AAI/SPRINT/modules/meddra-loader&quot;}],&quot;workspaceFoldersUnchanged&quot;:false}}],&quot;timestamp&quot;:&quot;2025-06-24T15:07:47.224Z&quot;,&quot;response_text&quot;:&quot;I'll add a short usage section to the README.md that's light and informative:\n\n````markdown path=README.md mode=EDIT\n# MedDRA Loader\n\n[![CI](https://github.com/wullli/meddra-loader/workflows/CI/badge.svg)](https://github.com/wullli/meddra-loader/actions/workflows/ci.yml)\n[![codecov](https://codecov.io/gh/wullli/meddra-loader/branch/main/graph/badge.svg)](https://codecov.io/gh/wullli/meddra-loader)\n\nDISCLAIMER: This software does not give you access to MedDRA and you need a valid subscription to work with MedDRA data: https://www.meddra.org/. It merely provides tooling for loading the MedDRA data and hierarchy with python into a networkx graph. It is only intended for use with legitimately licensed MedDRA data and users are responsible for obtaining a valid license from the MSSO.\n\n## Usage\n\n```python\nfrom pathlib import Path\nfrom meddra_loader.meddra_digraph import MedDRADiGraph\n\n# Create a new MedDRA graph\ngraph = MedDRADiGraph()\n\n# Load MedDRA data from a directory\ngraph.load(Path(\&quot;/path/to/meddra/data\&quot;))\n\n# Access MedDRA version\nprint(f\&quot;MedDRA Version: {graph.meddra_version}\&quot;)\n\n# Access loaded terms\nprint(f\&quot;Number of terms: {len(graph.terms)}\&quot;)\n\n# Access term hierarchy\nprint(f\&quot;Term levels: {graph.term_levels}\&quot;)\n```\n\nThe graph is a standard NetworkX DiGraph with additional MedDRA-specific attributes and methods.\n````\n&quot;,&quot;workspace_file_chunks&quot;:[{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;675&quot;,&quot;blob_name&quot;:&quot;62073004d6d11ace193d8558f159cb5b90efec9a98bef3fb132e26c2195653ee&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;README.md&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;669&quot;,&quot;blob_name&quot;:&quot;398c8257a27ef2177bdc248cee91ae175f6529a306fd37160a1282ce3f2025a5&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/meddra_loader/tests/test_data/README.md&quot;}},{&quot;char_start&quot;:&quot;669&quot;,&quot;char_end&quot;:&quot;904&quot;,&quot;blob_name&quot;:&quot;398c8257a27ef2177bdc248cee91ae175f6529a306fd37160a1282ce3f2025a5&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/meddra_loader/tests/test_data/README.md&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;102&quot;,&quot;blob_name&quot;:&quot;5259a526f6129dedae62889574b11375d1b0a5d489a9c47b031455419374ee6e&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.github/workflows/ci.yml&quot;}},{&quot;char_start&quot;:&quot;102&quot;,&quot;char_end&quot;:&quot;1003&quot;,&quot;blob_name&quot;:&quot;5259a526f6129dedae62889574b11375d1b0a5d489a9c47b031455419374ee6e&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.github/workflows/ci.yml&quot;}},{&quot;char_start&quot;:&quot;1003&quot;,&quot;char_end&quot;:&quot;1370&quot;,&quot;blob_name&quot;:&quot;5259a526f6129dedae62889574b11375d1b0a5d489a9c47b031455419374ee6e&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.github/workflows/ci.yml&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;690&quot;,&quot;blob_name&quot;:&quot;905481e22ff71b6ec37a74e752f12e8a7420257a71420f6e69ff39e562e10787&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;pyproject.toml&quot;}},{&quot;char_start&quot;:&quot;690&quot;,&quot;char_end&quot;:&quot;1394&quot;,&quot;blob_name&quot;:&quot;905481e22ff71b6ec37a74e752f12e8a7420257a71420f6e69ff39e562e10787&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;pyproject.toml&quot;}},{&quot;char_start&quot;:&quot;1394&quot;,&quot;char_end&quot;:&quot;1857&quot;,&quot;blob_name&quot;:&quot;905481e22ff71b6ec37a74e752f12e8a7420257a71420f6e69ff39e562e10787&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;pyproject.toml&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;170&quot;,&quot;blob_name&quot;:&quot;31b17fb986bc436069610779da2974f4ef307839a2684549cab57e7b09ca710d&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;modules/meddra-loader/demo_loading.py&quot;}},{&quot;char_start&quot;:&quot;170&quot;,&quot;char_end&quot;:&quot;1016&quot;,&quot;blob_name&quot;:&quot;31b17fb986bc436069610779da2974f4ef307839a2684549cab57e7b09ca710d&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;modules/meddra-loader/demo_loading.py&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;585&quot;,&quot;blob_name&quot;:&quot;72a511dc920288d94f775236e2c2c493cb943f3314fcec177fc5886c019e9ac0&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;scripts/run_ci_checks.sh&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;717&quot;,&quot;blob_name&quot;:&quot;36aa700825092a585d6c6781f2e3e5169589410102154e18e1d9fa1855ca1e1e&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.gitignore&quot;}},{&quot;char_start&quot;:&quot;717&quot;,&quot;char_end&quot;:&quot;1195&quot;,&quot;blob_name&quot;:&quot;36aa700825092a585d6c6781f2e3e5169589410102154e18e1d9fa1855ca1e1e&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.gitignore&quot;}},{&quot;char_start&quot;:&quot;1195&quot;,&quot;char_end&quot;:&quot;1783&quot;,&quot;blob_name&quot;:&quot;36aa700825092a585d6c6781f2e3e5169589410102154e18e1d9fa1855ca1e1e&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.gitignore&quot;}},{&quot;char_start&quot;:&quot;1783&quot;,&quot;char_end&quot;:&quot;2477&quot;,&quot;blob_name&quot;:&quot;36aa700825092a585d6c6781f2e3e5169589410102154e18e1d9fa1855ca1e1e&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.gitignore&quot;}},{&quot;char_start&quot;:&quot;2477&quot;,&quot;char_end&quot;:&quot;3001&quot;,&quot;blob_name&quot;:&quot;36aa700825092a585d6c6781f2e3e5169589410102154e18e1d9fa1855ca1e1e&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.gitignore&quot;}},{&quot;char_start&quot;:&quot;3001&quot;,&quot;char_end&quot;:&quot;3571&quot;,&quot;blob_name&quot;:&quot;36aa700825092a585d6c6781f2e3e5169589410102154e18e1d9fa1855ca1e1e&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.gitignore&quot;}},{&quot;char_start&quot;:&quot;3571&quot;,&quot;char_end&quot;:&quot;4319&quot;,&quot;blob_name&quot;:&quot;36aa700825092a585d6c6781f2e3e5169589410102154e18e1d9fa1855ca1e1e&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.gitignore&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;601&quot;,&quot;blob_name&quot;:&quot;7f5abdedd9943d076bd910829b1f5cffd28fba17dc34da49b48207c21465ab8c&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;LICENSE&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;848&quot;,&quot;blob_name&quot;:&quot;f36308a0a79ce0b724fdab2bf66aeff43fbc5309f377babe0dd02e10a7f763b5&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/sprint/entrypoints/copy_markdown.py&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;625&quot;,&quot;blob_name&quot;:&quot;f0e4b4ab9d9d387e2e3f725d3ab16ca7b3f9d2f844ddd7cd23489e85289edce3&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/sprint/models/weights/run-20241010T111217/wandb-metadata.json&quot;}},{&quot;char_start&quot;:&quot;625&quot;,&quot;char_end&quot;:&quot;987&quot;,&quot;blob_name&quot;:&quot;f0e4b4ab9d9d387e2e3f725d3ab16ca7b3f9d2f844ddd7cd23489e85289edce3&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/sprint/models/weights/run-20241010T111217/wandb-metadata.json&quot;}},{&quot;char_start&quot;:&quot;3643&quot;,&quot;char_end&quot;:&quot;4004&quot;,&quot;blob_name&quot;:&quot;f0e4b4ab9d9d387e2e3f725d3ab16ca7b3f9d2f844ddd7cd23489e85289edce3&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/sprint/models/weights/run-20241010T111217/wandb-metadata.json&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;437&quot;,&quot;blob_name&quot;:&quot;3dd0d194b8f813743d50425eb7222742c76b1774780f04f563d393f803c0ec85&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/sprint/full_text/ctcae_detection_dspy.py&quot;}},{&quot;char_start&quot;:&quot;437&quot;,&quot;char_end&quot;:&quot;834&quot;,&quot;blob_name&quot;:&quot;3dd0d194b8f813743d50425eb7222742c76b1774780f04f563d393f803c0ec85&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/sprint/full_text/ctcae_detection_dspy.py&quot;}},{&quot;char_start&quot;:&quot;7211&quot;,&quot;char_end&quot;:&quot;8065&quot;,&quot;blob_name&quot;:&quot;3dd0d194b8f813743d50425eb7222742c76b1774780f04f563d393f803c0ec85&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/sprint/full_text/ctcae_detection_dspy.py&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;442&quot;,&quot;blob_name&quot;:&quot;72133dc003b632c3b707ab048a29300c0670eeed748a0c0a132881b3c0a01cd3&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.pre-commit-config.yaml&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;96&quot;,&quot;blob_name&quot;:&quot;c2a433b808f0201241dfc4ff55336b69749905aa7f633d152fbcba4107666004&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/meddra_loader/tests/test_meddra_digraph.py&quot;}},{&quot;char_start&quot;:&quot;876&quot;,&quot;char_end&quot;:&quot;1618&quot;,&quot;blob_name&quot;:&quot;c2a433b808f0201241dfc4ff55336b69749905aa7f633d152fbcba4107666004&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/meddra_loader/tests/test_meddra_digraph.py&quot;}},{&quot;char_start&quot;:&quot;1618&quot;,&quot;char_end&quot;:&quot;2290&quot;,&quot;blob_name&quot;:&quot;c2a433b808f0201241dfc4ff55336b69749905aa7f633d152fbcba4107666004&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/meddra_loader/tests/test_meddra_digraph.py&quot;}},{&quot;char_start&quot;:&quot;2290&quot;,&quot;char_end&quot;:&quot;3029&quot;,&quot;blob_name&quot;:&quot;c2a433b808f0201241dfc4ff55336b69749905aa7f633d152fbcba4107666004&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/meddra_loader/tests/test_meddra_digraph.py&quot;}},{&quot;char_start&quot;:&quot;3029&quot;,&quot;char_end&quot;:&quot;3671&quot;,&quot;blob_name&quot;:&quot;c2a433b808f0201241dfc4ff55336b69749905aa7f633d152fbcba4107666004&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/meddra_loader/tests/test_meddra_digraph.py&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;693&quot;,&quot;blob_name&quot;:&quot;6cd5302980feab50724a294a4eedaba19c07d350c06156da9555c9b5526e1fc1&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/meddra_loader/tests/test_data/smq_list.asc&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;606&quot;,&quot;blob_name&quot;:&quot;be6551d74325f96a7db442c5d85a5e44a3122a846df6537b31f2b4c88ca387f2&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/sprint/entrypoints/check-full-text-annotations.py&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;306&quot;,&quot;blob_name&quot;:&quot;7991567d8fb622e61557de7526faab1a78ed94865a2762094d4285daab266a01&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/sprint/full_text/annotations.py&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;752&quot;,&quot;blob_name&quot;:&quot;06d66832e8f42ab1b94ed585e3b385d3bd64da2fb117c5d87ec23bbe337ae181&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/sprint/entrypoints/extract-manual-abstract-screening_first-search.py&quot;}},{&quot;char_start&quot;:&quot;752&quot;,&quot;char_end&quot;:&quot;1483&quot;,&quot;blob_name&quot;:&quot;06d66832e8f42ab1b94ed585e3b385d3bd64da2fb117c5d87ec23bbe337ae181&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/sprint/entrypoints/extract-manual-abstract-screening_first-search.py&quot;}},{&quot;char_start&quot;:&quot;2789&quot;,&quot;char_end&quot;:&quot;3649&quot;,&quot;blob_name&quot;:&quot;06d66832e8f42ab1b94ed585e3b385d3bd64da2fb117c5d87ec23bbe337ae181&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/sprint/entrypoints/extract-manual-abstract-screening_first-search.py&quot;}},{&quot;char_start&quot;:&quot;3796&quot;,&quot;char_end&quot;:&quot;4392&quot;,&quot;blob_name&quot;:&quot;161cbdc737bfc71c11185eeb5925557e9058dd86aa93113c503bb82c16398037&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/sprint/entrypoints/download-pubmed-abstracts.py&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;571&quot;,&quot;blob_name&quot;:&quot;c829a9f6a102d4c8179ed2d24571ed597489c5c76a610dd8acf4d07f2d3c7648&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/sprint/full_text/ctcae_detection_gpt.py&quot;}},{&quot;char_start&quot;:&quot;1007&quot;,&quot;char_end&quot;:&quot;1708&quot;,&quot;blob_name&quot;:&quot;c829a9f6a102d4c8179ed2d24571ed597489c5c76a610dd8acf4d07f2d3c7648&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/sprint/full_text/ctcae_detection_gpt.py&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;852&quot;,&quot;blob_name&quot;:&quot;1f55667c4b99270b15aa1769579f223e370e2bbd137fd2c21a8672cddc04f918&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/sprint/learning_rate_schedules.py&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;567&quot;,&quot;blob_name&quot;:&quot;3936602b42de01b007d077927ab81b5488dd7d8e27c285333aad98c07e4f1cba&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/meddra_loader/meddra_digraph.py&quot;}}]}],&quot;feedbackStates&quot;:{&quot;temp-fe-b6f81e18-4416-46aa-a9bf-0768f9c22daf&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;}},&quot;toolUseStates&quot;:{},&quot;draftExchange&quot;:{&quot;request_message&quot;:&quot;&quot;,&quot;rich_text_json_repr&quot;:{&quot;type&quot;:&quot;doc&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;paragraph&quot;}]},&quot;status&quot;:&quot;draft&quot;},&quot;draftActiveContextIds&quot;:[&quot;/Users/tcwullsc/Devel/AAI/SPRINT/modules/meddra-loader/README.md&quot;,&quot;/Users/tcwullsc/Devel/AAI/SPRINT/modules/meddra-loaderfalsefalse&quot;,&quot;userGuidelines&quot;],&quot;requestIds&quot;:[],&quot;isPinned&quot;:false,&quot;isShareable&quot;:true,&quot;extraData&quot;:{&quot;hasDirtyEdits&quot;:false},&quot;personaType&quot;:0},&quot;6eefd832-7b5d-4d83-adc8-a36e82c3fa6b&quot;:{&quot;id&quot;:&quot;6eefd832-7b5d-4d83-adc8-a36e82c3fa6b&quot;,&quot;createdAtIso&quot;:&quot;2025-06-24T15:08:06.785Z&quot;,&quot;lastInteractedAtIso&quot;:&quot;2025-06-24T15:08:06.785Z&quot;,&quot;chatHistory&quot;:[],&quot;feedbackStates&quot;:{},&quot;toolUseStates&quot;:{},&quot;draftExchange&quot;:{&quot;request_message&quot;:&quot;&quot;,&quot;rich_text_json_repr&quot;:{&quot;type&quot;:&quot;doc&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;paragraph&quot;}]},&quot;status&quot;:&quot;draft&quot;},&quot;requestIds&quot;:[],&quot;isPinned&quot;:false,&quot;isShareable&quot;:false,&quot;extraData&quot;:{&quot;hasDirtyEdits&quot;:false},&quot;personaType&quot;:0,&quot;rootTaskUuid&quot;:&quot;a3d6d285-11b6-439b-8d1e-364bac7d3512&quot;},&quot;74af6f30-1148-4e4e-9aa9-b13b1280d4ca&quot;:{&quot;id&quot;:&quot;74af6f30-1148-4e4e-9aa9-b13b1280d4ca&quot;,&quot;createdAtIso&quot;:&quot;2025-06-24T15:08:06.807Z&quot;,&quot;lastInteractedAtIso&quot;:&quot;2025-06-24T15:25:13.712Z&quot;,&quot;chatHistory&quot;:[{&quot;request_id&quot;:&quot;0754726c-177e-4f8c-b608-6f204d8e2c91&quot;,&quot;uuid&quot;:&quot;615dcb46-8630-4794-ad74-5f8ac64a4177&quot;,&quot;chatItemType&quot;:&quot;agentic-checkpoint-delimiter&quot;,&quot;status&quot;:&quot;success&quot;,&quot;fromTimestamp&quot;:0,&quot;toTimestamp&quot;:1750777686807,&quot;seen_state&quot;:&quot;seen&quot;},{&quot;status&quot;:&quot;success&quot;,&quot;request_id&quot;:&quot;68c58f66-79b7-42b3-9dd2-94f5034470c4&quot;,&quot;request_message&quot;:&quot;Please add a short usage section to the readme. Keep it light.&quot;,&quot;rich_text_json_repr&quot;:{&quot;type&quot;:&quot;doc&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;Please add a short usage section to the readme. Keep it light.&quot;}]}]},&quot;mentioned_items&quot;:[],&quot;structured_output_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:5,&quot;content&quot;:&quot;&quot;,&quot;tool_use&quot;:{&quot;tool_use_id&quot;:&quot;toolu_vrtx_01SZRN6HjGMhVujvHAoHbehE&quot;,&quot;tool_name&quot;:&quot;view&quot;,&quot;input_json&quot;:&quot;{\&quot;path\&quot;: \&quot;README.md\&quot;, \&quot;type\&quot;: \&quot;file\&quot;}&quot;,&quot;mcp_server_name&quot;:&quot;&quot;,&quot;mcp_tool_name&quot;:&quot;&quot;}},{&quot;id&quot;:0,&quot;type&quot;:0,&quot;content&quot;:&quot;I'll help you add a short usage section to the README.md file. Let me first examine the current content of the README to understand the structure and context.\n&quot;},{&quot;id&quot;:2,&quot;type&quot;:2,&quot;content&quot;:&quot;&quot;},{&quot;id&quot;:3,&quot;type&quot;:3,&quot;content&quot;:&quot;&quot;}],&quot;seen_state&quot;:&quot;seen&quot;,&quot;structured_request_nodes&quot;:[{&quot;id&quot;:0,&quot;type&quot;:0,&quot;text_node&quot;:{&quot;content&quot;:&quot;Please add a short usage section to the readme. Keep it light.&quot;}},{&quot;id&quot;:1,&quot;type&quot;:4,&quot;ide_state_node&quot;:{&quot;workspaceFolders&quot;:[{&quot;repositoryRoot&quot;:&quot;/Users/tcwullsc/Devel/AAI/SPRINT/modules/meddra-loader&quot;,&quot;folderRoot&quot;:&quot;/Users/tcwullsc/Devel/AAI/SPRINT/modules/meddra-loader&quot;}],&quot;workspaceFoldersUnchanged&quot;:false}}],&quot;timestamp&quot;:&quot;2025-06-24T15:24:50.047Z&quot;,&quot;response_text&quot;:&quot;I'll help you add a short usage section to the README.md file. Let me first examine the current content of the README to understand the structure and context.\n&quot;,&quot;workspace_file_chunks&quot;:[]},{&quot;status&quot;:&quot;success&quot;,&quot;request_id&quot;:&quot;2c8f692c-1a4d-4de1-9764-65f8988a5bdf&quot;,&quot;request_message&quot;:&quot;&quot;,&quot;structured_output_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:5,&quot;content&quot;:&quot;&quot;,&quot;tool_use&quot;:{&quot;tool_use_id&quot;:&quot;toolu_vrtx_019ysJTWxYWskYGiBaYNXCfT&quot;,&quot;tool_name&quot;:&quot;view&quot;,&quot;input_json&quot;:&quot;{\&quot;path\&quot;: \&quot;.\&quot;, \&quot;type\&quot;: \&quot;directory\&quot;}&quot;,&quot;mcp_server_name&quot;:&quot;&quot;,&quot;mcp_tool_name&quot;:&quot;&quot;}},{&quot;id&quot;:0,&quot;type&quot;:0,&quot;content&quot;:&quot;Now let me check if there are any source files to understand what this tool does and how it's used:\n&quot;},{&quot;id&quot;:2,&quot;type&quot;:2,&quot;content&quot;:&quot;&quot;},{&quot;id&quot;:3,&quot;type&quot;:3,&quot;content&quot;:&quot;&quot;}],&quot;seen_state&quot;:&quot;seen&quot;,&quot;structured_request_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:1,&quot;tool_result_node&quot;:{&quot;content&quot;:&quot;Here's the result of running `cat -n` on README.md:\n     1\t\n     2\t\n     3\t# MedDRA Loader\n     4\t\n     5\t[![CI](https://github.com/wullli/meddra-loader/workflows/CI/badge.svg)](https://github.com/wullli/meddra-loader/actions/workflows/ci.yml)\n     6\t[![codecov](https://codecov.io/gh/wullli/meddra-loader/branch/main/graph/badge.svg)](https://codecov.io/gh/wullli/meddra-loader)\n     7\t\n     8\tDISCLAIMER: This software does not give you access to MedDRA and you need a valid subscription to work with MedDRA data: https://www.meddra.org/. It merely provides tooling for loading the MedDRA data and hierarchy with python into a networkx graph. It is only intended for use with legitimately licensed MedDRA data and users are responsible for obtaining a valid license from the MSSO.\n     9\t\nTotal lines in file: 9\n&quot;,&quot;is_error&quot;:false,&quot;request_id&quot;:&quot;&quot;,&quot;tool_use_id&quot;:&quot;toolu_vrtx_01SZRN6HjGMhVujvHAoHbehE&quot;}},{&quot;id&quot;:2,&quot;type&quot;:4,&quot;ide_state_node&quot;:{&quot;workspaceFolders&quot;:[{&quot;repositoryRoot&quot;:&quot;/Users/tcwullsc/Devel/AAI/SPRINT/modules/meddra-loader&quot;,&quot;folderRoot&quot;:&quot;/Users/tcwullsc/Devel/AAI/SPRINT/modules/meddra-loader&quot;}],&quot;workspaceFoldersUnchanged&quot;:false}}],&quot;timestamp&quot;:&quot;2025-06-24T15:24:53.343Z&quot;,&quot;response_text&quot;:&quot;Now let me check if there are any source files to understand what this tool does and how it's used:\n&quot;,&quot;workspace_file_chunks&quot;:[]},{&quot;status&quot;:&quot;success&quot;,&quot;request_id&quot;:&quot;989a41b6-e576-444f-8ec3-3224a4f12b54&quot;,&quot;request_message&quot;:&quot;&quot;,&quot;structured_output_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:5,&quot;content&quot;:&quot;&quot;,&quot;tool_use&quot;:{&quot;tool_use_id&quot;:&quot;toolu_vrtx_01ByTgEk3UXbUDEHer4JoYT4&quot;,&quot;tool_name&quot;:&quot;view&quot;,&quot;input_json&quot;:&quot;{\&quot;path\&quot;: \&quot;src/meddra_graph\&quot;, \&quot;type\&quot;: \&quot;directory\&quot;}&quot;,&quot;mcp_server_name&quot;:&quot;&quot;,&quot;mcp_tool_name&quot;:&quot;&quot;}},{&quot;id&quot;:0,&quot;type&quot;:0,&quot;content&quot;:&quot;Let me examine the main source code to understand the functionality:\n&quot;},{&quot;id&quot;:2,&quot;type&quot;:2,&quot;content&quot;:&quot;&quot;},{&quot;id&quot;:3,&quot;type&quot;:3,&quot;content&quot;:&quot;&quot;}],&quot;seen_state&quot;:&quot;seen&quot;,&quot;structured_request_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:1,&quot;tool_result_node&quot;:{&quot;content&quot;:&quot;Here's the files and directories up to 2 levels deep in ., excluding hidden items:\n./LICENSE\n./README.md\n./coverage.xml\n./modules\n./modules/meddra-loader\n./pyproject.toml\n./scripts\n./scripts/run_ci_checks.sh\n./src\n./src/meddra_graph\n./src/meddra_loader.egg-info\n./src/resources\n&quot;,&quot;is_error&quot;:false,&quot;request_id&quot;:&quot;&quot;,&quot;tool_use_id&quot;:&quot;toolu_vrtx_019ysJTWxYWskYGiBaYNXCfT&quot;}},{&quot;id&quot;:2,&quot;type&quot;:4,&quot;ide_state_node&quot;:{&quot;workspaceFolders&quot;:[{&quot;repositoryRoot&quot;:&quot;/Users/tcwullsc/Devel/AAI/SPRINT/modules/meddra-loader&quot;,&quot;folderRoot&quot;:&quot;/Users/tcwullsc/Devel/AAI/SPRINT/modules/meddra-loader&quot;}],&quot;workspaceFoldersUnchanged&quot;:false}}],&quot;timestamp&quot;:&quot;2025-06-24T15:24:57.003Z&quot;,&quot;response_text&quot;:&quot;Let me examine the main source code to understand the functionality:\n&quot;,&quot;workspace_file_chunks&quot;:[]},{&quot;status&quot;:&quot;success&quot;,&quot;request_id&quot;:&quot;fbe0b876-56d3-43fc-982e-c1c244818671&quot;,&quot;request_message&quot;:&quot;&quot;,&quot;structured_output_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:5,&quot;content&quot;:&quot;&quot;,&quot;tool_use&quot;:{&quot;tool_use_id&quot;:&quot;toolu_vrtx_01KHh1xS62pgozFFzUpZGwMK&quot;,&quot;tool_name&quot;:&quot;view&quot;,&quot;input_json&quot;:&quot;{\&quot;path\&quot;: \&quot;src/meddra_graph/__init__.py\&quot;, \&quot;type\&quot;: \&quot;file\&quot;}&quot;,&quot;mcp_server_name&quot;:&quot;&quot;,&quot;mcp_tool_name&quot;:&quot;&quot;}},{&quot;id&quot;:0,&quot;type&quot;:0,&quot;content&quot;:&quot;Let me check the main module and pyproject.toml to understand the package structure and usage:\n&quot;},{&quot;id&quot;:2,&quot;type&quot;:2,&quot;content&quot;:&quot;&quot;},{&quot;id&quot;:3,&quot;type&quot;:3,&quot;content&quot;:&quot;&quot;}],&quot;seen_state&quot;:&quot;seen&quot;,&quot;structured_request_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:1,&quot;tool_result_node&quot;:{&quot;content&quot;:&quot;Here's the files and directories up to 2 levels deep in src/meddra_graph, excluding hidden items:\nsrc/meddra_graph/__init__.py\nsrc/meddra_graph/__pycache__\nsrc/meddra_graph/__pycache__/__init__.cpython-311.pyc\nsrc/meddra_graph/__pycache__/__init__.cpython-312.pyc\nsrc/meddra_graph/__pycache__/meddra_digraph.cpython-311.pyc\nsrc/meddra_graph/__pycache__/meddra_digraph.cpython-312.pyc\nsrc/meddra_graph/meddra_digraph.py\nsrc/meddra_graph/resources\nsrc/meddra_graph/resources/meddra_schema_v28.json\nsrc/meddra_graph/tests\nsrc/meddra_graph/tests/__init__.py\nsrc/meddra_graph/tests/__pycache__\nsrc/meddra_graph/tests/test_data\nsrc/meddra_graph/tests/test_meddra_digraph.py\n&quot;,&quot;is_error&quot;:false,&quot;request_id&quot;:&quot;&quot;,&quot;tool_use_id&quot;:&quot;toolu_vrtx_01ByTgEk3UXbUDEHer4JoYT4&quot;}},{&quot;id&quot;:2,&quot;type&quot;:4,&quot;ide_state_node&quot;:{&quot;workspaceFolders&quot;:[{&quot;repositoryRoot&quot;:&quot;/Users/tcwullsc/Devel/AAI/SPRINT/modules/meddra-loader&quot;,&quot;folderRoot&quot;:&quot;/Users/tcwullsc/Devel/AAI/SPRINT/modules/meddra-loader&quot;}],&quot;workspaceFoldersUnchanged&quot;:false}}],&quot;timestamp&quot;:&quot;2025-06-24T15:25:00.461Z&quot;,&quot;response_text&quot;:&quot;Let me check the main module and pyproject.toml to understand the package structure and usage:\n&quot;,&quot;workspace_file_chunks&quot;:[]},{&quot;status&quot;:&quot;success&quot;,&quot;request_id&quot;:&quot;e7d85324-35c4-4fa3-aa6d-16b02692483e&quot;,&quot;request_message&quot;:&quot;&quot;,&quot;structured_output_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:5,&quot;content&quot;:&quot;&quot;,&quot;tool_use&quot;:{&quot;tool_use_id&quot;:&quot;toolu_vrtx_016Mz6QVPJSLKcwA5vrCtZra&quot;,&quot;tool_name&quot;:&quot;view&quot;,&quot;input_json&quot;:&quot;{\&quot;path\&quot;: \&quot;src/meddra_graph/meddra_digraph.py\&quot;, \&quot;type\&quot;: \&quot;file\&quot;, \&quot;view_range\&quot;: [1, 50]}&quot;,&quot;mcp_server_name&quot;:&quot;&quot;,&quot;mcp_tool_name&quot;:&quot;&quot;}},{&quot;id&quot;:0,&quot;type&quot;:0,&quot;content&quot;:&quot;&quot;},{&quot;id&quot;:2,&quot;type&quot;:2,&quot;content&quot;:&quot;&quot;},{&quot;id&quot;:3,&quot;type&quot;:3,&quot;content&quot;:&quot;&quot;}],&quot;seen_state&quot;:&quot;seen&quot;,&quot;structured_request_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:1,&quot;tool_result_node&quot;:{&quot;content&quot;:&quot;Here's the result of running `cat -n` on src/meddra_graph/__init__.py:\n     1\tVERSION = \&quot;0.0.1\&quot;\n     2\t\nTotal lines in file: 2\n&quot;,&quot;is_error&quot;:false,&quot;request_id&quot;:&quot;&quot;,&quot;tool_use_id&quot;:&quot;toolu_vrtx_01KHh1xS62pgozFFzUpZGwMK&quot;}},{&quot;id&quot;:2,&quot;type&quot;:4,&quot;ide_state_node&quot;:{&quot;workspaceFolders&quot;:[{&quot;repositoryRoot&quot;:&quot;/Users/tcwullsc/Devel/AAI/SPRINT/modules/meddra-loader&quot;,&quot;folderRoot&quot;:&quot;/Users/tcwullsc/Devel/AAI/SPRINT/modules/meddra-loader&quot;}],&quot;workspaceFoldersUnchanged&quot;:false}}],&quot;timestamp&quot;:&quot;2025-06-24T15:25:03.882Z&quot;,&quot;response_text&quot;:&quot;&quot;,&quot;workspace_file_chunks&quot;:[]},{&quot;status&quot;:&quot;success&quot;,&quot;request_id&quot;:&quot;fecab5f8-60ce-4cf7-a4a0-410bfb937acb&quot;,&quot;request_message&quot;:&quot;&quot;,&quot;structured_output_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:5,&quot;content&quot;:&quot;&quot;,&quot;tool_use&quot;:{&quot;tool_use_id&quot;:&quot;toolu_vrtx_018YL3qXFktcnQqND8TWmEB8&quot;,&quot;tool_name&quot;:&quot;view&quot;,&quot;input_json&quot;:&quot;{\&quot;path\&quot;: \&quot;pyproject.toml\&quot;, \&quot;type\&quot;: \&quot;file\&quot;}&quot;,&quot;mcp_server_name&quot;:&quot;&quot;,&quot;mcp_tool_name&quot;:&quot;&quot;}},{&quot;id&quot;:0,&quot;type&quot;:0,&quot;content&quot;:&quot;&quot;},{&quot;id&quot;:2,&quot;type&quot;:2,&quot;content&quot;:&quot;&quot;},{&quot;id&quot;:3,&quot;type&quot;:3,&quot;content&quot;:&quot;&quot;}],&quot;seen_state&quot;:&quot;seen&quot;,&quot;structured_request_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:1,&quot;tool_result_node&quot;:{&quot;content&quot;:&quot;Note:\nView range expanded to meet minimum size of 500 lines. End line adjusted to last line of file (88).\n\nHere's the result of running `cat -n` on src/meddra_graph/meddra_digraph.py:\n     1\timport json\n     2\tfrom pathlib import Path\n     3\tfrom typing import Any, Union, cast\n     4\t\n     5\timport networkx as nx\n     6\t\n     7\tDEFAULT_SCHEMA_PATH = Path(__file__).parent / \&quot;resources\&quot; / \&quot;meddra_schema_v28.json\&quot;\n     8\t\n     9\t\n    10\tclass MedDRADiGraph(nx.DiGraph):\n    11\t\n    12\t    def __init__(self, *args: Any, **kwargs: Any) -&gt; None:\n    13\t        super().__init__(*args, **kwargs)\n    14\t        self.schema: dict[str, dict[str, str]] = {}\n    15\t        self.term_levels: set[str] = set()\n    16\t        self.edges: set[tuple[str, ...]] = set()\n    17\t        self.terms: dict[str, dict[str, Any]] = {}\n    18\t        self.meddra_version: Union[str, None] = None\n    19\t\n    20\t    def load(\n    21\t        self, meddra_directory_path: Union[str, Path], schema_path: Union[str, Path] = DEFAULT_SCHEMA_PATH\n    22\t    ) -&gt; None:\n    23\t        meddra_directory_path = Path(meddra_directory_path)\n    24\t        self.schema = self._load_schema(schema_path)\n    25\t        self.meddra_version = \&quot; \&quot;.join(self._load_file(meddra_directory_path / \&quot;meddra_release.asc\&quot;)[0]).strip()\n    26\t        assert meddra_directory_path.is_dir()\n    27\t        self.term_levels = self._get_term_levels(meddra_directory_path)\n    28\t        edges = set()\n    29\t        self.terms = {}\n    30\t        for file_path in meddra_directory_path.glob(\&quot;*.asc\&quot;):\n    31\t            if self._is_edge_file(file_path):\n    32\t                edges.update(self._load_file(file_path))\n    33\t\n    34\t        for file_path in meddra_directory_path.glob(\&quot;*.asc\&quot;):\n    35\t            if self._is_term_file(file_path):\n    36\t                data = self._load_file(file_path)\n    37\t                file_name = file_path.name\n    38\t                node_type = file_path.name.split(\&quot;.\&quot;)[0]\n    39\t\n    40\t                # Process each row of data\n    41\t                for row in data:\n    42\t                    if len(row) &gt;= len(self.schema[file_name]):\n    43\t                        # Create a dictionary for this term using the schema\n    44\t                        term_dict = dict(zip(self.schema[file_name].keys(), row))\n    45\t                        term_dict[\&quot;node_type\&quot;] = node_type\n    46\t\n    47\t                        # Use the first field as the key (usually the code)\n    48\t                        first_field = list(self.schema[file_name].keys())[0]\n    49\t                        term_key = term_dict[first_field]\n    50\t                        self.terms[term_key] = term_dict\n    51\t        self.add_edges_from(edges)\n    52\t        self.add_nodes_from(self.terms.keys())\n    53\t        nx.set_node_attributes(self, self.terms)\n    54\t\n    55\t    def _load_schema(self, schema_path: Union[str, Path]) -&gt; dict[str, dict[str, str]]:\n    56\t        with open(schema_path, \&quot;r\&quot;, encoding=\&quot;utf-8\&quot;) as f:\n    57\t            return cast(dict[str, dict[str, str]], json.load(f))\n    58\t\n    59\t    def _get_term_levels(self, meddra_directory_path: Path) -&gt; set[str]:\n    60\t        term_levels = set()\n    61\t        for file_path in meddra_directory_path.glob(\&quot;*.asc\&quot;):\n    62\t            file_name = file_path.name.split(\&quot;.\&quot;)[0]\n    63\t            if not \&quot;_\&quot; in file_name:\n    64\t                term_levels.add(file_name)\n    65\t        return term_levels\n    66\t\n    67\t    def _is_term_file(self, file_path: Path) -&gt; bool:\n    68\t        return file_path.name.split(\&quot;.\&quot;)[0] in self.term_levels\n    69\t\n    70\t    def _is_edge_file(self, file_path: Path) -&gt; bool:\n    71\t        if not \&quot;_\&quot; in file_path.name:\n    72\t            return False\n    73\t        try:\n    74\t            t0, t1 = file_path.name.split(\&quot;.\&quot;)[0].split(\&quot;_\&quot;)\n    75\t            return t0 in self.term_levels and t1 in self.term_levels\n    76\t        except (ValueError, IndexError):\n    77\t            return False\n    78\t\n    79\t    def _load_file(self, file_path: Path) -&gt; list[tuple[str, ...]]:\n    80\t        lines = []\n    81\t        with open(file_path, \&quot;r\&quot;, encoding=\&quot;utf-8\&quot;) as f:\n    82\t            for line in f:\n    83\t                lines.append(self._load_line(line))\n    84\t        return lines\n    85\t\n    86\t    def _load_line(self, line: str) -&gt; tuple[str, ...]:\n    87\t        return tuple(line.strip().split(\&quot;$\&quot;))\n    88\t\nTotal lines in file: 88\n&quot;,&quot;is_error&quot;:false,&quot;request_id&quot;:&quot;&quot;,&quot;tool_use_id&quot;:&quot;toolu_vrtx_016Mz6QVPJSLKcwA5vrCtZra&quot;}},{&quot;id&quot;:2,&quot;type&quot;:4,&quot;ide_state_node&quot;:{&quot;workspaceFolders&quot;:[{&quot;repositoryRoot&quot;:&quot;/Users/tcwullsc/Devel/AAI/SPRINT/modules/meddra-loader&quot;,&quot;folderRoot&quot;:&quot;/Users/tcwullsc/Devel/AAI/SPRINT/modules/meddra-loader&quot;}],&quot;workspaceFoldersUnchanged&quot;:false}}],&quot;timestamp&quot;:&quot;2025-06-24T15:25:07.101Z&quot;,&quot;response_text&quot;:&quot;&quot;,&quot;workspace_file_chunks&quot;:[]},{&quot;status&quot;:&quot;success&quot;,&quot;request_id&quot;:&quot;1e398c8d-d5a4-4e3a-9d0a-1be440f2f96f&quot;,&quot;request_message&quot;:&quot;&quot;,&quot;structured_output_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:5,&quot;content&quot;:&quot;&quot;,&quot;tool_use&quot;:{&quot;tool_use_id&quot;:&quot;toolu_vrtx_01NVXRwoJEFP3S3rM2SZ9Q4c&quot;,&quot;tool_name&quot;:&quot;view&quot;,&quot;input_json&quot;:&quot;{\&quot;path\&quot;: \&quot;src/meddra_graph/tests/test_meddra_digraph.py\&quot;, \&quot;type\&quot;: \&quot;file\&quot;, \&quot;view_range\&quot;: [1, 30]}&quot;,&quot;mcp_server_name&quot;:&quot;&quot;,&quot;mcp_tool_name&quot;:&quot;&quot;}},{&quot;id&quot;:0,&quot;type&quot;:0,&quot;content&quot;:&quot;Let me also check the test file to better understand the usage:\n&quot;},{&quot;id&quot;:2,&quot;type&quot;:2,&quot;content&quot;:&quot;&quot;},{&quot;id&quot;:3,&quot;type&quot;:3,&quot;content&quot;:&quot;&quot;}],&quot;seen_state&quot;:&quot;seen&quot;,&quot;structured_request_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:1,&quot;tool_result_node&quot;:{&quot;content&quot;:&quot;Here's the result of running `cat -n` on pyproject.toml:\n     1\t[build-system]\n     2\trequires = [\n     3\t    \&quot;setuptools&gt;=64\&quot;,\n     4\t    \&quot;wheel\&quot;\n     5\t]\n     6\tbuild-backend = \&quot;setuptools.build_meta\&quot;\n     7\t\n     8\t[project]\n     9\tname = \&quot;meddra-graph\&quot;\n    10\tversion = \&quot;0.1.0\&quot;\n    11\tauthors = [\n    12\t    {name = \&quot;Pascal Wullschleger\&quot;}\n    13\t]\n    14\tdescription = \&quot;Package for loading and processing MedDRA data\&quot;\n    15\treadme = \&quot;README.md\&quot;\n    16\trequires-python = \&quot;&gt;=3.9\&quot;\n    17\tclassifiers = [\n    18\t    \&quot;Programming Language :: Python :: 3\&quot;,\n    19\t    \&quot;License :: OSI Approved :: MIT License\&quot;,\n    20\t    \&quot;Operating System :: OS Independent\&quot;\n    21\t]\n    22\tdependencies = [\n    23\t    \&quot;networkx\&quot;,\n    24\t    \&quot;pandas\&quot;\n    25\t]\n    26\t\n    27\t[project.optional-dependencies]\n    28\tdev = [\n    29\t    \&quot;pytest&gt;=7.0\&quot;,\n    30\t    \&quot;pytest-cov&gt;=4.0\&quot;,\n    31\t    \&quot;black&gt;=23.0\&quot;,\n    32\t    \&quot;isort&gt;=5.0\&quot;,\n    33\t    \&quot;mypy&gt;=1.0\&quot;,\n    34\t    \&quot;pylint&gt;=2.15\&quot;,\n    35\t    \&quot;coverage&gt;=7.0\&quot;\n    36\t]\n    37\t\n    38\t[tool.setuptools]\n    39\tpackage-dir = {\&quot;\&quot; = \&quot;src\&quot;}\n    40\t\n    41\t[tool.setuptools.packages.find]\n    42\twhere = [\&quot;src\&quot;]\n    43\t\n    44\t[tool.black]\n    45\tline-length = 120\n    46\ttarget-version = ['py39']\n    47\t\n    48\t[tool.isort]\n    49\tprofile = \&quot;black\&quot;\n    50\tline_length = 120\n    51\t\n    52\t[tool.mypy]\n    53\tpython_version = \&quot;3.9\&quot;\n    54\twarn_return_any = true\n    55\twarn_unused_configs = true\n    56\tdisallow_untyped_defs = true\n    57\tdisallow_incomplete_defs = true\n    58\tcheck_untyped_defs = true\n    59\tdisallow_untyped_decorators = true\n    60\tno_implicit_optional = true\n    61\twarn_redundant_casts = true\n    62\twarn_unused_ignores = true\n    63\twarn_no_return = true\n    64\twarn_unreachable = true\n    65\tstrict_equality = true\n    66\t\n    67\t[tool.pylint.messages_control]\n    68\tdisable = [\n    69\t    \&quot;missing-docstring\&quot;,\n    70\t    \&quot;too-few-public-methods\&quot;,\n    71\t    \&quot;invalid-name\&quot;,\n    72\t    \&quot;line-too-long\&quot;\n    73\t]\n    74\t\n    75\t[tool.pylint.format]\n    76\tmax-line-length = 120\n    77\t\n    78\t[tool.pytest.ini_options]\n    79\ttestpaths = [\&quot;src/meddra_graph/tests\&quot;]\n    80\tpython_files = [\&quot;test_*.py\&quot;]\n    81\tpython_classes = [\&quot;Test*\&quot;]\n    82\tpython_functions = [\&quot;test_*\&quot;]\n    83\taddopts = \&quot;--strict-markers --strict-config\&quot;\n    84\t\n    85\t[tool.coverage.run]\n    86\tsource = [\&quot;src/meddra_graph\&quot;]\n    87\tomit = [\&quot;*/tests/*\&quot;]\n    88\t\n    89\t[tool.coverage.report]\n    90\texclude_lines = [\n    91\t    \&quot;pragma: no cover\&quot;,\n    92\t    \&quot;def __repr__\&quot;,\n    93\t    \&quot;raise AssertionError\&quot;,\n    94\t    \&quot;raise NotImplementedError\&quot;\n    95\t]\n    96\t\nTotal lines in file: 96\n&quot;,&quot;is_error&quot;:false,&quot;request_id&quot;:&quot;&quot;,&quot;tool_use_id&quot;:&quot;toolu_vrtx_018YL3qXFktcnQqND8TWmEB8&quot;}},{&quot;id&quot;:2,&quot;type&quot;:4,&quot;ide_state_node&quot;:{&quot;workspaceFolders&quot;:[{&quot;repositoryRoot&quot;:&quot;/Users/tcwullsc/Devel/AAI/SPRINT/modules/meddra-loader&quot;,&quot;folderRoot&quot;:&quot;/Users/tcwullsc/Devel/AAI/SPRINT/modules/meddra-loader&quot;}],&quot;workspaceFoldersUnchanged&quot;:false}}],&quot;timestamp&quot;:&quot;2025-06-24T15:25:10.426Z&quot;,&quot;response_text&quot;:&quot;Let me also check the test file to better understand the usage:\n&quot;,&quot;workspace_file_chunks&quot;:[]},{&quot;status&quot;:&quot;success&quot;,&quot;request_id&quot;:&quot;6bf6b3fe-9f4c-485f-9c7b-ffd28c2ce307&quot;,&quot;request_message&quot;:&quot;&quot;,&quot;structured_output_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:5,&quot;content&quot;:&quot;&quot;,&quot;tool_use&quot;:{&quot;tool_use_id&quot;:&quot;toolu_vrtx_01XGa2oNN4UcGQp7WxBUspVA&quot;,&quot;tool_name&quot;:&quot;str-replace-editor&quot;,&quot;input_json&quot;:&quot;{\&quot;command\&quot;: \&quot;str_replace\&quot;, \&quot;path\&quot;: \&quot;README.md\&quot;, \&quot;instruction_reminder\&quot;: \&quot;ALWAYS BREAK DOWN EDITS INTO SMALLER CHUNKS OF AT MOST 150 LINES EACH.\&quot;, \&quot;old_str\&quot;: \&quot;DISCLAIMER: This software does not give you access to MedDRA and you need a valid subscription to work with MedDRA data: https://www.meddra.org/. It merely provides tooling for loading the MedDRA data and hierarchy with python into a networkx graph. It is only intended for use with legitimately licensed MedDRA data and users are responsible for obtaining a valid license from the MSSO.\&quot;, \&quot;new_str\&quot;: \&quot;DISCLAIMER: This software does not give you access to MedDRA and you need a valid subscription to work with MedDRA data: https://www.meddra.org/. It merely provides tooling for loading the MedDRA data and hierarchy with python into a networkx graph. It is only intended for use with legitimately licensed MedDRA data and users are responsible for obtaining a valid license from the MSSO.\\n\\n## Usage\\n\\n```python\\nfrom meddra_graph import MedDRADiGraph\\n\\n# Create a new MedDRA graph instance\\ngraph = MedDRADiGraph()\\n\\n# Load MedDRA data from directory containing .asc files\\ngraph.load(\\\&quot;/path/to/meddra/data/directory\\\&quot;)\\n\\n# Access the loaded NetworkX graph\\nprint(f\\\&quot;Loaded {len(graph.nodes)} terms\\\&quot;)\\nprint(f\\\&quot;MedDRA version: {graph.meddra_version}\\\&quot;)\\n\\n# Query specific terms\\nterm_data = graph.terms[\\\&quot;10001000\\\&quot;]  # Access by term code\\nprint(f\\\&quot;Term: {term_data['soc_name']}\\\&quot;)\\n```\&quot;, \&quot;old_str_start_line_number\&quot;: 8, \&quot;old_str_end_line_number\&quot;: 8}&quot;,&quot;mcp_server_name&quot;:&quot;&quot;,&quot;mcp_tool_name&quot;:&quot;&quot;}},{&quot;id&quot;:0,&quot;type&quot;:0,&quot;content&quot;:&quot;Now I have a good understanding of the MedDRA Loader package. Let me add a concise usage section to the README.md file.\n&quot;},{&quot;id&quot;:2,&quot;type&quot;:2,&quot;content&quot;:&quot;&quot;},{&quot;id&quot;:3,&quot;type&quot;:3,&quot;content&quot;:&quot;&quot;}],&quot;seen_state&quot;:&quot;seen&quot;,&quot;structured_request_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:1,&quot;tool_result_node&quot;:{&quot;content&quot;:&quot;Note:\nView range expanded to meet minimum size of 500 lines. End line adjusted to last line of file (99).\n\nHere's the result of running `cat -n` on src/meddra_graph/tests/test_meddra_digraph.py:\n     1\tfrom pathlib import Path\n     2\t\n     3\timport pytest\n     4\t\n     5\tfrom meddra_graph.meddra_digraph import MedDRADiGraph\n     6\t\n     7\tTEST_TERMS = [\n     8\t    # SOC (System Organ Class) test cases\n     9\t    (\&quot;soc\&quot;, \&quot;10001000\&quot;, \&quot;Lorem ipsum dolor sit amet\&quot;),\n    10\t    (\&quot;soc\&quot;, \&quot;10002000\&quot;, \&quot;Consectetur adipiscing elit\&quot;),\n    11\t    (\&quot;soc\&quot;, \&quot;10003000\&quot;, \&quot;Sed do eiusmod tempor incididunt\&quot;),\n    12\t    # HLGT (High Level Group Term) test cases\n    13\t    (\&quot;hlgt\&quot;, \&quot;10001001\&quot;, \&quot;Nostrud exercitation ullamco\&quot;),\n    14\t    (\&quot;hlgt\&quot;, \&quot;10001002\&quot;, \&quot;Laboris nisi ut aliquip ex ea\&quot;),\n    15\t    (\&quot;hlgt\&quot;, \&quot;10002001\&quot;, \&quot;Commodo consequat duis aute irure\&quot;),\n    16\t    # HLT (High Level Term) test cases\n    17\t    (\&quot;hlt\&quot;, \&quot;10001101\&quot;, \&quot;Nulla pariatur excepteur sint occaecat\&quot;),\n    18\t    (\&quot;hlt\&quot;, \&quot;10001102\&quot;, \&quot;Cupidatat non proident sunt in culpa\&quot;),\n    19\t    (\&quot;hlt\&quot;, \&quot;10002101\&quot;, \&quot;Est laborum lorem ipsum dolor sit\&quot;),\n    20\t    # LLT (Lowest Level Term) test cases - using codes that don't conflict with mdhier.asc\n    21\t    (\&quot;llt\&quot;, \&quot;10001302\&quot;, \&quot;Cillum dolore eu fugiat nulla\&quot;),\n    22\t    (\&quot;llt\&quot;, \&quot;10001303\&quot;, \&quot;Pariatur excepteur sint occaecat\&quot;),\n    23\t    (\&quot;llt\&quot;, \&quot;10002302\&quot;, \&quot;Anim id est laborum sed ut\&quot;),\n    24\t]\n    25\t\n    26\t\n    27\t@pytest.fixture(name=\&quot;meddra_digraph\&quot;)\n    28\tdef meddra_digraph_fixture() -&gt; MedDRADiGraph:\n    29\t    return MedDRADiGraph()\n    30\t\n    31\t\n    32\t@pytest.fixture(name=\&quot;test_data_path\&quot;)\n    33\tdef test_data_path_fixture() -&gt; Path:\n    34\t    return Path(__file__).parent / \&quot;test_data\&quot;\n    35\t\n    36\t\n    37\tdef test_term_levels_loaded(meddra_digraph: MedDRADiGraph, test_data_path: Path) -&gt; None:\n    38\t    meddra_digraph.load(test_data_path)\n    39\t    assert meddra_digraph.meddra_version is not None\n    40\t    assert len(meddra_digraph.term_levels) == 6\n    41\t    assert set(meddra_digraph.term_levels) == {\&quot;soc\&quot;, \&quot;hlgt\&quot;, \&quot;hlt\&quot;, \&quot;pt\&quot;, \&quot;llt\&quot;, \&quot;mdhier\&quot;}\n    42\t\n    43\t\n    44\tdef test_schema_levels_loaded(meddra_digraph: MedDRADiGraph, test_data_path: Path) -&gt; None:\n    45\t    meddra_digraph.load(test_data_path)\n    46\t    assert len(meddra_digraph.schema) == 12\n    47\t    # Check that core term files are in schema\n    48\t    assert \&quot;soc.asc\&quot; in meddra_digraph.schema\n    49\t    assert \&quot;hlgt.asc\&quot; in meddra_digraph.schema\n    50\t    assert \&quot;hlt.asc\&quot; in meddra_digraph.schema\n    51\t    assert \&quot;pt.asc\&quot; in meddra_digraph.schema\n    52\t    assert \&quot;llt.asc\&quot; in meddra_digraph.schema\n    53\t    assert \&quot;mdhier.asc\&quot; in meddra_digraph.schema\n    54\t\n    55\t\n    56\tdef test_edges_loaded(meddra_digraph: MedDRADiGraph, test_data_path: Path) -&gt; None:\n    57\t    meddra_digraph.load(test_data_path)\n    58\t    assert len(meddra_digraph.edges) &gt;= 0\n    59\t\n    60\t\n    61\tdef test_terms_loaded(meddra_digraph: MedDRADiGraph, test_data_path: Path) -&gt; None:\n    62\t    meddra_digraph.load(test_data_path)\n    63\t    assert len(meddra_digraph.terms) &gt; 1\n    64\t\n    65\t\n    66\tdef test_nodes_loaded(meddra_digraph: MedDRADiGraph, test_data_path: Path) -&gt; None:\n    67\t    meddra_digraph.load(test_data_path)\n    68\t    assert len(meddra_digraph.nodes) &gt; 1\n    69\t\n    70\t\n    71\t# Generate IDs automatically from the test parameters\n    72\tdef _generate_test_ids() -&gt; list[str]:\n    73\t    \&quot;\&quot;\&quot;Generate test IDs like soc1, soc2, hlgt1, hlgt2, etc.\&quot;\&quot;\&quot;\n    74\t    term_counts: dict[str, int] = {}\n    75\t    ids: list[str] = []\n    76\t    for term_level, _, _ in TEST_TERMS:\n    77\t        term_counts[term_level] = term_counts.get(term_level, 0) + 1\n    78\t        ids.append(f\&quot;{term_level}{term_counts[term_level]}\&quot;)\n    79\t    return ids\n    80\t\n    81\t\n    82\t@pytest.mark.parametrize(\&quot;term_level, term_code, expected_name\&quot;, TEST_TERMS, ids=_generate_test_ids())\n    83\tdef test_term_definitions_correct(\n    84\t    meddra_digraph: MedDRADiGraph, test_data_path: Path, term_level: str, term_code: str, expected_name: str\n    85\t) -&gt; None:\n    86\t    \&quot;\&quot;\&quot;Test that each term level has the correct definition/name in the test data.\&quot;\&quot;\&quot;\n    87\t    meddra_digraph.load(test_data_path)\n    88\t\n    89\t    assert term_code in meddra_digraph.terms, f\&quot;Term {term_code} not found in loaded terms\&quot;\n    90\t\n    91\t    term_data = meddra_digraph.terms[term_code]\n    92\t    assert term_data[\&quot;node_type\&quot;] == term_level, f\&quot;Expected node_type {term_level}, got {term_data['node_type']}\&quot;\n    93\t\n    94\t    name_field = f\&quot;{term_level}_name\&quot;\n    95\t    assert name_field in term_data, f\&quot;Name field {name_field} not found in term data\&quot;\n    96\t    assert (\n    97\t        term_data[name_field] == expected_name\n    98\t    ), f\&quot;Expected {name_field} to be '{expected_name}', got '{term_data[name_field]}'\&quot;\n    99\t\nTotal lines in file: 99\n&quot;,&quot;is_error&quot;:false,&quot;request_id&quot;:&quot;&quot;,&quot;tool_use_id&quot;:&quot;toolu_vrtx_01NVXRwoJEFP3S3rM2SZ9Q4c&quot;}},{&quot;id&quot;:2,&quot;type&quot;:4,&quot;ide_state_node&quot;:{&quot;workspaceFolders&quot;:[{&quot;repositoryRoot&quot;:&quot;/Users/tcwullsc/Devel/AAI/SPRINT/modules/meddra-loader&quot;,&quot;folderRoot&quot;:&quot;/Users/tcwullsc/Devel/AAI/SPRINT/modules/meddra-loader&quot;}],&quot;workspaceFoldersUnchanged&quot;:false}}],&quot;timestamp&quot;:&quot;2025-06-24T15:25:13.712Z&quot;,&quot;response_text&quot;:&quot;Now I have a good understanding of the MedDRA Loader package. Let me add a concise usage section to the README.md file.\n&quot;,&quot;workspace_file_chunks&quot;:[]}],&quot;feedbackStates&quot;:{&quot;temp-fe-fc36dc9d-1b8e-40f2-bd98-46274bf45459&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-4c400a33-75f5-47b5-ac6a-296db43467a8&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-a9bee4d0-785e-4fb0-9d7a-1da54a5004c4&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-e6df565e-6ca7-40bd-ae5d-e1daac6f453a&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-ec92b64b-cd3f-4f0f-9aa3-7cdd76319628&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-dda44068-8df8-465d-8f31-f8cf57ac3cf9&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-e1e2db5b-ad45-4cc7-9dde-d301d6171d9f&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-4331b11d-5767-4cb1-ab40-0c46891e5fef&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-9a9de766-d8a7-4634-b485-d9d24d3c6a1d&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-115c2548-d381-4d69-ad2a-38d8f4272bae&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-da2a998b-a12f-4ec6-bd0c-a2f1bb85a6dc&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-ef031d57-19aa-426a-9d8c-ba9ffdeebe8b&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-01a422c6-799c-4fc1-9cd7-ddc77bbeaa8c&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-c5297be1-918f-40da-bd51-793894a15fec&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-53a0025c-d306-45ac-82da-f9dfddc8dc6c&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-d1c7c909-14b0-48f8-9e96-72c65f0b24ee&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-1ecde75a-599c-4a92-a72e-edc37e51f10f&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-37c6593c-77d6-466e-a272-d6837c05d41f&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-696447ba-f56c-4662-88a4-d7a9ad9893ed&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-ae69d32d-fc9c-4aba-a9f4-7a5eef5ff62f&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-b0fc9a21-1783-4724-875b-ce99820fc4e9&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-53e725b7-e7a6-482b-b96d-a76e987dadec&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-f90e0d0d-ac62-46ac-ae90-a97d8745c05c&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-9e87a42b-a3a9-46e3-bcd5-d024d0f98d1f&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-d44856c6-cfaa-4b03-bf11-107674ec404d&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-a3bcfda0-6300-48e9-a0fb-8354bcb33d8e&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;}},&quot;toolUseStates&quot;:{&quot;53eac6a5-ed18-4ec3-9921-f462c6d2938e;toolu_vrtx_01Lt232W8MyGYAb6mW62fvKh&quot;:{&quot;requestId&quot;:&quot;53eac6a5-ed18-4ec3-9921-f462c6d2938e&quot;,&quot;toolUseId&quot;:&quot;toolu_vrtx_01Lt232W8MyGYAb6mW62fvKh&quot;,&quot;phase&quot;:5,&quot;result&quot;:{&quot;text&quot;:&quot;Here's the result of running `cat -n` on README.md:\n     1\t\n     2\t\n     3\t# MedDRA Loader\n     4\t\n     5\t[![CI](https://github.com/wullli/meddra-loader/workflows/CI/badge.svg)](https://github.com/wullli/meddra-loader/actions/workflows/ci.yml)\n     6\t[![codecov](https://codecov.io/gh/wullli/meddra-loader/branch/main/graph/badge.svg)](https://codecov.io/gh/wullli/meddra-loader)\n     7\t\n     8\tDISCLAIMER: This software does not give you access to MedDRA and you need a valid subscription to work with MedDRA data: https://www.meddra.org/. It merely provides tooling for loading the MedDRA data and hierarchy with python into a networkx graph. It is only intended for use with legitimately licensed MedDRA data and users are responsible for obtaining a valid license from the MSSO.\n     9\t\nTotal lines in file: 9\n&quot;,&quot;isError&quot;:false,&quot;requestId&quot;:&quot;&quot;}},&quot;241e3d9f-af68-47a2-a308-104d3d56474c;toolu_vrtx_01KXnAsoFakoAiiVsCTtoM1h&quot;:{&quot;requestId&quot;:&quot;241e3d9f-af68-47a2-a308-104d3d56474c&quot;,&quot;toolUseId&quot;:&quot;toolu_vrtx_01KXnAsoFakoAiiVsCTtoM1h&quot;,&quot;phase&quot;:5,&quot;result&quot;:{&quot;text&quot;:&quot;Here's the files and directories up to 2 levels deep in ., excluding hidden items:\n./LICENSE\n./README.md\n./coverage.xml\n./modules\n./modules/meddra-loader\n./pyproject.toml\n./scripts\n./scripts/run_ci_checks.sh\n./src\n./src/meddra_loader\n./src/meddra_loader.egg-info\n./src/resources\n&quot;,&quot;isError&quot;:false,&quot;requestId&quot;:&quot;&quot;}},&quot;7807b05b-022f-4f32-b98e-929c88a2ad8a;toolu_vrtx_01E36dwdztV7uQVkxoEyf8Q1&quot;:{&quot;requestId&quot;:&quot;7807b05b-022f-4f32-b98e-929c88a2ad8a&quot;,&quot;toolUseId&quot;:&quot;toolu_vrtx_01E36dwdztV7uQVkxoEyf8Q1&quot;,&quot;phase&quot;:5,&quot;result&quot;:{&quot;text&quot;:&quot;Here's the files and directories up to 2 levels deep in src/meddra_loader, excluding hidden items:\nsrc/meddra_loader/__init__.py\nsrc/meddra_loader/__pycache__\nsrc/meddra_loader/__pycache__/__init__.cpython-311.pyc\nsrc/meddra_loader/__pycache__/__init__.cpython-312.pyc\nsrc/meddra_loader/__pycache__/meddra_digraph.cpython-311.pyc\nsrc/meddra_loader/__pycache__/meddra_digraph.cpython-312.pyc\nsrc/meddra_loader/meddra_digraph.py\nsrc/meddra_loader/resources\nsrc/meddra_loader/resources/meddra_schema_v28.json\nsrc/meddra_loader/tests\nsrc/meddra_loader/tests/__init__.py\nsrc/meddra_loader/tests/__pycache__\nsrc/meddra_loader/tests/test_data\nsrc/meddra_loader/tests/test_meddra_digraph.py\n&quot;,&quot;isError&quot;:false,&quot;requestId&quot;:&quot;&quot;}},&quot;bd158901-ddaf-4ceb-990c-b5503831e6d9;toolu_vrtx_01FtNkD49C3rXDzXYixagFPc&quot;:{&quot;requestId&quot;:&quot;bd158901-ddaf-4ceb-990c-b5503831e6d9&quot;,&quot;toolUseId&quot;:&quot;toolu_vrtx_01FtNkD49C3rXDzXYixagFPc&quot;,&quot;phase&quot;:5,&quot;result&quot;:{&quot;text&quot;:&quot;Here's the result of running `cat -n` on src/meddra_loader/__init__.py:\n     1\tVERSION = \&quot;0.0.1\&quot;\n     2\t\nTotal lines in file: 2\n&quot;,&quot;isError&quot;:false,&quot;requestId&quot;:&quot;&quot;}},&quot;51f47244-12f5-488c-a398-fcde94214be1;toolu_vrtx_01G8GDD34nDGgALrQTbHjNTd&quot;:{&quot;requestId&quot;:&quot;51f47244-12f5-488c-a398-fcde94214be1&quot;,&quot;toolUseId&quot;:&quot;toolu_vrtx_01G8GDD34nDGgALrQTbHjNTd&quot;,&quot;phase&quot;:5,&quot;result&quot;:{&quot;text&quot;:&quot;Here's the result of running `cat -n` on src/meddra_loader/meddra_digraph.py:\n     1\timport json\n     2\tfrom pathlib import Path\n     3\tfrom typing import Any, Union, cast\n     4\t\n     5\timport networkx as nx\n     6\t\n     7\tDEFAULT_SCHEMA_PATH = Path(__file__).parent / \&quot;resources\&quot; / \&quot;meddra_schema_v28.json\&quot;\n     8\t\n     9\t\n    10\tclass MedDRADiGraph(nx.DiGraph):\n    11\t\n    12\t    def __init__(self, *args: Any, **kwargs: Any) -&gt; None:\n    13\t        super().__init__(*args, **kwargs)\n    14\t        self.schema: dict[str, dict[str, str]] = {}\n    15\t        self.term_levels: set[str] = set()\n    16\t        self.edges: set[tuple[str, ...]] = set()\n    17\t        self.terms: dict[str, dict[str, Any]] = {}\n    18\t        self.meddra_version: Union[str, None] = None\n    19\t\n    20\t    def load(\n    21\t        self, meddra_directory_path: Union[str, Path], schema_path: Union[str, Path] = DEFAULT_SCHEMA_PATH\n    22\t    ) -&gt; None:\n    23\t        meddra_directory_path = Path(meddra_directory_path)\n    24\t        self.schema = self._load_schema(schema_path)\n    25\t        self.meddra_version = \&quot; \&quot;.join(self._load_file(meddra_directory_path / \&quot;meddra_release.asc\&quot;)[0]).strip()\n    26\t        assert meddra_directory_path.is_dir()\n    27\t        self.term_levels = self._get_term_levels(meddra_directory_path)\n    28\t        edges = set()\n    29\t        self.terms = {}\n    30\t        for file_path in meddra_directory_path.glob(\&quot;*.asc\&quot;):\n    31\t            if self._is_edge_file(file_path):\n    32\t                edges.update(self._load_file(file_path))\n    33\t\n    34\t        for file_path in meddra_directory_path.glob(\&quot;*.asc\&quot;):\n    35\t            if self._is_term_file(file_path):\n    36\t                data = self._load_file(file_path)\n    37\t                file_name = file_path.name\n    38\t                node_type = file_path.name.split(\&quot;.\&quot;)[0]\n    39\t\n    40\t                # Process each row of data\n    41\t                for row in data:\n    42\t                    if len(row) &gt;= len(self.schema[file_name]):\n    43\t                        # Create a dictionary for this term using the schema\n    44\t                        term_dict = dict(zip(self.schema[file_name].keys(), row))\n    45\t                        term_dict[\&quot;node_type\&quot;] = node_type\n    46\t\n    47\t                        # Use the first field as the key (usually the code)\n    48\t                        first_field = list(self.schema[file_name].keys())[0]\n    49\t                        term_key = term_dict[first_field]\n    50\t                        self.terms[term_key] = term_dict\n    51\t        self.add_edges_from(edges)\n    52\t        self.add_nodes_from(self.terms.keys())\n    53\t        nx.set_node_attributes(self, self.terms)\n    54\t\n    55\t    def _load_schema(self, schema_path: Union[str, Path]) -&gt; dict[str, dict[str, str]]:\n    56\t        with open(schema_path, \&quot;r\&quot;, encoding=\&quot;utf-8\&quot;) as f:\n    57\t            return cast(dict[str, dict[str, str]], json.load(f))\n    58\t\n    59\t    def _get_term_levels(self, meddra_directory_path: Path) -&gt; set[str]:\n    60\t        term_levels = set()\n    61\t        for file_path in meddra_directory_path.glob(\&quot;*.asc\&quot;):\n    62\t            file_name = file_path.name.split(\&quot;.\&quot;)[0]\n    63\t            if not \&quot;_\&quot; in file_name:\n    64\t                term_levels.add(file_name)\n    65\t        return term_levels\n    66\t\n    67\t    def _is_term_file(self, file_path: Path) -&gt; bool:\n    68\t        return file_path.name.split(\&quot;.\&quot;)[0] in self.term_levels\n    69\t\n    70\t    def _is_edge_file(self, file_path: Path) -&gt; bool:\n    71\t        if not \&quot;_\&quot; in file_path.name:\n    72\t            return False\n    73\t        try:\n    74\t            t0, t1 = file_path.name.split(\&quot;.\&quot;)[0].split(\&quot;_\&quot;)\n    75\t            return t0 in self.term_levels and t1 in self.term_levels\n    76\t        except (ValueError, IndexError):\n    77\t            return False\n    78\t\n    79\t    def _load_file(self, file_path: Path) -&gt; list[tuple[str, ...]]:\n    80\t        lines = []\n    81\t        with open(file_path, \&quot;r\&quot;, encoding=\&quot;utf-8\&quot;) as f:\n    82\t            for line in f:\n    83\t                lines.append(self._load_line(line))\n    84\t        return lines\n    85\t\n    86\t    def _load_line(self, line: str) -&gt; tuple[str, ...]:\n    87\t        return tuple(line.strip().split(\&quot;$\&quot;))\n    88\t\nTotal lines in file: 88\n&quot;,&quot;isError&quot;:false,&quot;requestId&quot;:&quot;&quot;}},&quot;f76c217a-e547-4da5-8640-7e80408b378e;toolu_vrtx_01EKyPRS6VSako19dVXepoM7&quot;:{&quot;requestId&quot;:&quot;f76c217a-e547-4da5-8640-7e80408b378e&quot;,&quot;toolUseId&quot;:&quot;toolu_vrtx_01EKyPRS6VSako19dVXepoM7&quot;,&quot;phase&quot;:5,&quot;result&quot;:{&quot;text&quot;:&quot;Here's the result of running `cat -n` on pyproject.toml:\n     1\t[build-system]\n     2\trequires = [\n     3\t    \&quot;setuptools&gt;=64\&quot;,\n     4\t    \&quot;wheel\&quot;\n     5\t]\n     6\tbuild-backend = \&quot;setuptools.build_meta\&quot;\n     7\t\n     8\t[project]\n     9\tname = \&quot;meddra-loader\&quot;\n    10\tversion = \&quot;0.1.0\&quot;\n    11\tauthors = [\n    12\t    {name = \&quot;Pascal Wullschleger\&quot;}\n    13\t]\n    14\tdescription = \&quot;Package for loading and processing MedDRA data\&quot;\n    15\treadme = \&quot;README.md\&quot;\n    16\trequires-python = \&quot;&gt;=3.9\&quot;\n    17\tclassifiers = [\n    18\t    \&quot;Programming Language :: Python :: 3\&quot;,\n    19\t    \&quot;License :: OSI Approved :: MIT License\&quot;,\n    20\t    \&quot;Operating System :: OS Independent\&quot;\n    21\t]\n    22\tdependencies = [\n    23\t    \&quot;networkx\&quot;,\n    24\t    \&quot;pandas\&quot;\n    25\t]\n    26\t\n    27\t[project.optional-dependencies]\n    28\tdev = [\n    29\t    \&quot;pytest&gt;=7.0\&quot;,\n    30\t    \&quot;pytest-cov&gt;=4.0\&quot;,\n    31\t    \&quot;black&gt;=23.0\&quot;,\n    32\t    \&quot;isort&gt;=5.0\&quot;,\n    33\t    \&quot;mypy&gt;=1.0\&quot;,\n    34\t    \&quot;pylint&gt;=2.15\&quot;,\n    35\t    \&quot;coverage&gt;=7.0\&quot;\n    36\t]\n    37\t\n    38\t[tool.setuptools]\n    39\tpackage-dir = {\&quot;\&quot; = \&quot;src\&quot;}\n    40\t\n    41\t[tool.setuptools.packages.find]\n    42\twhere = [\&quot;src\&quot;]\n    43\t\n    44\t[tool.black]\n    45\tline-length = 120\n    46\ttarget-version = ['py39']\n    47\t\n    48\t[tool.isort]\n    49\tprofile = \&quot;black\&quot;\n    50\tline_length = 120\n    51\t\n    52\t[tool.mypy]\n    53\tpython_version = \&quot;3.9\&quot;\n    54\twarn_return_any = true\n    55\twarn_unused_configs = true\n    56\tdisallow_untyped_defs = true\n    57\tdisallow_incomplete_defs = true\n    58\tcheck_untyped_defs = true\n    59\tdisallow_untyped_decorators = true\n    60\tno_implicit_optional = true\n    61\twarn_redundant_casts = true\n    62\twarn_unused_ignores = true\n    63\twarn_no_return = true\n    64\twarn_unreachable = true\n    65\tstrict_equality = true\n    66\t\n    67\t[tool.pylint.messages_control]\n    68\tdisable = [\n    69\t    \&quot;missing-docstring\&quot;,\n    70\t    \&quot;too-few-public-methods\&quot;,\n    71\t    \&quot;invalid-name\&quot;,\n    72\t    \&quot;line-too-long\&quot;\n    73\t]\n    74\t\n    75\t[tool.pylint.format]\n    76\tmax-line-length = 120\n    77\t\n    78\t[tool.pytest.ini_options]\n    79\ttestpaths = [\&quot;src/meddra_loader/tests\&quot;]\n    80\tpython_files = [\&quot;test_*.py\&quot;]\n    81\tpython_classes = [\&quot;Test*\&quot;]\n    82\tpython_functions = [\&quot;test_*\&quot;]\n    83\taddopts = \&quot;--strict-markers --strict-config\&quot;\n    84\t\n    85\t[tool.coverage.run]\n    86\tsource = [\&quot;src/meddra_loader\&quot;]\n    87\tomit = [\&quot;*/tests/*\&quot;]\n    88\t\n    89\t[tool.coverage.report]\n    90\texclude_lines = [\n    91\t    \&quot;pragma: no cover\&quot;,\n    92\t    \&quot;def __repr__\&quot;,\n    93\t    \&quot;raise AssertionError\&quot;,\n    94\t    \&quot;raise NotImplementedError\&quot;\n    95\t]\n    96\t\nTotal lines in file: 96\n&quot;,&quot;isError&quot;:false,&quot;requestId&quot;:&quot;&quot;}},&quot;8aa91ad8-6b29-4983-a4df-8ac98ec9db02;toolu_vrtx_01N2F8DJCqpM2UzyewuqG6wv&quot;:{&quot;requestId&quot;:&quot;8aa91ad8-6b29-4983-a4df-8ac98ec9db02&quot;,&quot;toolUseId&quot;:&quot;toolu_vrtx_01N2F8DJCqpM2UzyewuqG6wv&quot;,&quot;phase&quot;:5,&quot;result&quot;:{&quot;text&quot;:&quot;Here's the result of running `cat -n` on src/meddra_loader/tests/test_meddra_digraph.py:\n     1\tfrom pathlib import Path\n     2\t\n     3\timport pytest\n     4\t\n     5\tfrom meddra_loader.meddra_digraph import MedDRADiGraph\n     6\t\n     7\tTEST_TERMS = [\n     8\t    # SOC (System Organ Class) test cases\n     9\t    (\&quot;soc\&quot;, \&quot;10001000\&quot;, \&quot;Lorem ipsum dolor sit amet\&quot;),\n    10\t    (\&quot;soc\&quot;, \&quot;10002000\&quot;, \&quot;Consectetur adipiscing elit\&quot;),\n    11\t    (\&quot;soc\&quot;, \&quot;10003000\&quot;, \&quot;Sed do eiusmod tempor incididunt\&quot;),\n    12\t    # HLGT (High Level Group Term) test cases\n    13\t    (\&quot;hlgt\&quot;, \&quot;10001001\&quot;, \&quot;Nostrud exercitation ullamco\&quot;),\n    14\t    (\&quot;hlgt\&quot;, \&quot;10001002\&quot;, \&quot;Laboris nisi ut aliquip ex ea\&quot;),\n    15\t    (\&quot;hlgt\&quot;, \&quot;10002001\&quot;, \&quot;Commodo consequat duis aute irure\&quot;),\n    16\t    # HLT (High Level Term) test cases\n    17\t    (\&quot;hlt\&quot;, \&quot;10001101\&quot;, \&quot;Nulla pariatur excepteur sint occaecat\&quot;),\n    18\t    (\&quot;hlt\&quot;, \&quot;10001102\&quot;, \&quot;Cupidatat non proident sunt in culpa\&quot;),\n    19\t    (\&quot;hlt\&quot;, \&quot;10002101\&quot;, \&quot;Est laborum lorem ipsum dolor sit\&quot;),\n    20\t    # LLT (Lowest Level Term) test cases - using codes that don't conflict with mdhier.asc\n    21\t    (\&quot;llt\&quot;, \&quot;10001302\&quot;, \&quot;Cillum dolore eu fugiat nulla\&quot;),\n    22\t    (\&quot;llt\&quot;, \&quot;10001303\&quot;, \&quot;Pariatur excepteur sint occaecat\&quot;),\n    23\t    (\&quot;llt\&quot;, \&quot;10002302\&quot;, \&quot;Anim id est laborum sed ut\&quot;),\n    24\t]\n    25\t\n    26\t\n    27\t@pytest.fixture(name=\&quot;meddra_digraph\&quot;)\n    28\tdef meddra_digraph_fixture() -&gt; MedDRADiGraph:\n    29\t    return MedDRADiGraph()\n    30\t\n    31\t\n    32\t@pytest.fixture(name=\&quot;test_data_path\&quot;)\n    33\tdef test_data_path_fixture() -&gt; Path:\n    34\t    return Path(__file__).parent / \&quot;test_data\&quot;\n    35\t\n    36\t\n    37\tdef test_term_levels_loaded(meddra_digraph: MedDRADiGraph, test_data_path: Path) -&gt; None:\n    38\t    meddra_digraph.load(test_data_path)\n    39\t    assert meddra_digraph.meddra_version is not None\n    40\t    assert len(meddra_digraph.term_levels) == 6\n    41\t    assert set(meddra_digraph.term_levels) == {\&quot;soc\&quot;, \&quot;hlgt\&quot;, \&quot;hlt\&quot;, \&quot;pt\&quot;, \&quot;llt\&quot;, \&quot;mdhier\&quot;}\n    42\t\n    43\t\n    44\tdef test_schema_levels_loaded(meddra_digraph: MedDRADiGraph, test_data_path: Path) -&gt; None:\n    45\t    meddra_digraph.load(test_data_path)\n    46\t    assert len(meddra_digraph.schema) == 12\n    47\t    # Check that core term files are in schema\n    48\t    assert \&quot;soc.asc\&quot; in meddra_digraph.schema\n    49\t    assert \&quot;hlgt.asc\&quot; in meddra_digraph.schema\n    50\t    assert \&quot;hlt.asc\&quot; in meddra_digraph.schema\n    51\t    assert \&quot;pt.asc\&quot; in meddra_digraph.schema\n    52\t    assert \&quot;llt.asc\&quot; in meddra_digraph.schema\n    53\t    assert \&quot;mdhier.asc\&quot; in meddra_digraph.schema\n    54\t\n    55\t\n    56\tdef test_edges_loaded(meddra_digraph: MedDRADiGraph, test_data_path: Path) -&gt; None:\n    57\t    meddra_digraph.load(test_data_path)\n    58\t    assert len(meddra_digraph.edges) &gt;= 0\n    59\t\n    60\t\n    61\tdef test_terms_loaded(meddra_digraph: MedDRADiGraph, test_data_path: Path) -&gt; None:\n    62\t    meddra_digraph.load(test_data_path)\n    63\t    assert len(meddra_digraph.terms) &gt; 1\n    64\t\n    65\t\n    66\tdef test_nodes_loaded(meddra_digraph: MedDRADiGraph, test_data_path: Path) -&gt; None:\n    67\t    meddra_digraph.load(test_data_path)\n    68\t    assert len(meddra_digraph.nodes) &gt; 1\n    69\t\n    70\t\n    71\t# Generate IDs automatically from the test parameters\n    72\tdef _generate_test_ids() -&gt; list[str]:\n    73\t    \&quot;\&quot;\&quot;Generate test IDs like soc1, soc2, hlgt1, hlgt2, etc.\&quot;\&quot;\&quot;\n    74\t    term_counts: dict[str, int] = {}\n    75\t    ids: list[str] = []\n    76\t    for term_level, _, _ in TEST_TERMS:\n    77\t        term_counts[term_level] = term_counts.get(term_level, 0) + 1\n    78\t        ids.append(f\&quot;{term_level}{term_counts[term_level]}\&quot;)\n    79\t    return ids\n    80\t\n    81\t\n    82\t@pytest.mark.parametrize(\&quot;term_level, term_code, expected_name\&quot;, TEST_TERMS, ids=_generate_test_ids())\n    83\tdef test_term_definitions_correct(\n    84\t    meddra_digraph: MedDRADiGraph, test_data_path: Path, term_level: str, term_code: str, expected_name: str\n    85\t) -&gt; None:\n    86\t    \&quot;\&quot;\&quot;Test that each term level has the correct definition/name in the test data.\&quot;\&quot;\&quot;\n    87\t    meddra_digraph.load(test_data_path)\n    88\t\n    89\t    assert term_code in meddra_digraph.terms, f\&quot;Term {term_code} not found in loaded terms\&quot;\n    90\t\n    91\t    term_data = meddra_digraph.terms[term_code]\n    92\t    assert term_data[\&quot;node_type\&quot;] == term_level, f\&quot;Expected node_type {term_level}, got {term_data['node_type']}\&quot;\n    93\t\n    94\t    name_field = f\&quot;{term_level}_name\&quot;\n    95\t    assert name_field in term_data, f\&quot;Name field {name_field} not found in term data\&quot;\n    96\t    assert (\n    97\t        term_data[name_field] == expected_name\n    98\t    ), f\&quot;Expected {name_field} to be '{expected_name}', got '{term_data[name_field]}'\&quot;\n    99\t\nTotal lines in file: 99\n&quot;,&quot;isError&quot;:false,&quot;requestId&quot;:&quot;&quot;}},&quot;51b60fc5-535e-4fab-b13b-02d456362ccc;toolu_vrtx_014ivm2nomQJSAacXLYVjTgw&quot;:{&quot;requestId&quot;:&quot;51b60fc5-535e-4fab-b13b-02d456362ccc&quot;,&quot;toolUseId&quot;:&quot;toolu_vrtx_014ivm2nomQJSAacXLYVjTgw&quot;,&quot;phase&quot;:7},&quot;f2b184ac-29de-4500-abda-2deb3fb08c48;toolu_vrtx_01BKbDAUAJCrsuD6M434SDCN&quot;:{&quot;requestId&quot;:&quot;f2b184ac-29de-4500-abda-2deb3fb08c48&quot;,&quot;toolUseId&quot;:&quot;toolu_vrtx_01BKbDAUAJCrsuD6M434SDCN&quot;,&quot;phase&quot;:8,&quot;result&quot;:{&quot;text&quot;:&quot;Here's the result of running `cat -n` on README.md:\n     1\t\n     2\t\n     3\t# MedDRA Loader\n     4\t\n     5\t[![CI](https://github.com/wullli/meddra-loader/workflows/CI/badge.svg)](https://github.com/wullli/meddra-loader/actions/workflows/ci.yml)\n     6\t[![codecov](https://codecov.io/gh/wullli/meddra-loader/branch/main/graph/badge.svg)](https://codecov.io/gh/wullli/meddra-loader)\n     7\t\n     8\tDISCLAIMER: This software does not give you access to MedDRA and you need a valid subscription to work with MedDRA data: https://www.meddra.org/. It merely provides tooling for loading the MedDRA data and hierarchy with python into a networkx graph. It is only intended for use with legitimately licensed MedDRA data and users are responsible for obtaining a valid license from the MSSO.\n     9\t\nTotal lines in file: 9\n&quot;,&quot;isError&quot;:false,&quot;requestId&quot;:&quot;&quot;}},&quot;c19da224-1f2a-4c76-b908-5ea03faf61b5;toolu_vrtx_01CfRYTN5BMZjgKMcwfPK1ng&quot;:{&quot;requestId&quot;:&quot;c19da224-1f2a-4c76-b908-5ea03faf61b5&quot;,&quot;toolUseId&quot;:&quot;toolu_vrtx_01CfRYTN5BMZjgKMcwfPK1ng&quot;,&quot;phase&quot;:5,&quot;result&quot;:{&quot;text&quot;:&quot;Here's the result of running `cat -n` on README.md:\n     1\t\n     2\t\n     3\t# MedDRA Loader\n     4\t\n     5\t[![CI](https://github.com/wullli/meddra-loader/workflows/CI/badge.svg)](https://github.com/wullli/meddra-loader/actions/workflows/ci.yml)\n     6\t[![codecov](https://codecov.io/gh/wullli/meddra-loader/branch/main/graph/badge.svg)](https://codecov.io/gh/wullli/meddra-loader)\n     7\t\n     8\tDISCLAIMER: This software does not give you access to MedDRA and you need a valid subscription to work with MedDRA data: https://www.meddra.org/. It merely provides tooling for loading the MedDRA data and hierarchy with python into a networkx graph. It is only intended for use with legitimately licensed MedDRA data and users are responsible for obtaining a valid license from the MSSO.\n     9\t\nTotal lines in file: 9\n&quot;,&quot;isError&quot;:false,&quot;requestId&quot;:&quot;&quot;}},&quot;386cc6fa-97fc-45cf-b79d-266e46238212;toolu_vrtx_01BjUSauHj5JbA9dQtw3CByY&quot;:{&quot;requestId&quot;:&quot;386cc6fa-97fc-45cf-b79d-266e46238212&quot;,&quot;toolUseId&quot;:&quot;toolu_vrtx_01BjUSauHj5JbA9dQtw3CByY&quot;,&quot;phase&quot;:5,&quot;result&quot;:{&quot;text&quot;:&quot;Here's the files and directories up to 2 levels deep in ., excluding hidden items:\n./LICENSE\n./README.md\n./coverage.xml\n./modules\n./modules/meddra-loader\n./pyproject.toml\n./scripts\n./scripts/run_ci_checks.sh\n./src\n./src/meddra_loader\n./src/meddra_loader.egg-info\n./src/resources\n&quot;,&quot;isError&quot;:false,&quot;requestId&quot;:&quot;&quot;}},&quot;59667e9d-1f89-4993-8419-9b78f0b1b2da;toolu_vrtx_01SJeeJHehSEd5kBhNRDfwGi&quot;:{&quot;requestId&quot;:&quot;59667e9d-1f89-4993-8419-9b78f0b1b2da&quot;,&quot;toolUseId&quot;:&quot;toolu_vrtx_01SJeeJHehSEd5kBhNRDfwGi&quot;,&quot;phase&quot;:5,&quot;result&quot;:{&quot;text&quot;:&quot;Here's the files and directories up to 2 levels deep in src/meddra_loader, excluding hidden items:\nsrc/meddra_loader/__init__.py\nsrc/meddra_loader/__pycache__\nsrc/meddra_loader/__pycache__/__init__.cpython-311.pyc\nsrc/meddra_loader/__pycache__/__init__.cpython-312.pyc\nsrc/meddra_loader/__pycache__/meddra_digraph.cpython-311.pyc\nsrc/meddra_loader/__pycache__/meddra_digraph.cpython-312.pyc\nsrc/meddra_loader/meddra_digraph.py\nsrc/meddra_loader/resources\nsrc/meddra_loader/resources/meddra_schema_v28.json\nsrc/meddra_loader/tests\nsrc/meddra_loader/tests/__init__.py\nsrc/meddra_loader/tests/__pycache__\nsrc/meddra_loader/tests/test_data\nsrc/meddra_loader/tests/test_meddra_digraph.py\n&quot;,&quot;isError&quot;:false,&quot;requestId&quot;:&quot;&quot;}},&quot;f5afc2d7-556c-4153-bc7a-3cae7aa65fc7;toolu_vrtx_019jDmmEzVGoSdN3Pm1KP7Hd&quot;:{&quot;requestId&quot;:&quot;f5afc2d7-556c-4153-bc7a-3cae7aa65fc7&quot;,&quot;toolUseId&quot;:&quot;toolu_vrtx_019jDmmEzVGoSdN3Pm1KP7Hd&quot;,&quot;phase&quot;:5,&quot;result&quot;:{&quot;text&quot;:&quot;Here's the result of running `cat -n` on src/meddra_loader/__init__.py:\n     1\tVERSION = \&quot;0.0.1\&quot;\n     2\t\nTotal lines in file: 2\n&quot;,&quot;isError&quot;:false,&quot;requestId&quot;:&quot;&quot;}},&quot;5aa6d61b-a26c-4d4b-a9b5-d69f7b0a3098;toolu_vrtx_01DfkZ6e8stcHoXswmagj8uD&quot;:{&quot;requestId&quot;:&quot;5aa6d61b-a26c-4d4b-a9b5-d69f7b0a3098&quot;,&quot;toolUseId&quot;:&quot;toolu_vrtx_01DfkZ6e8stcHoXswmagj8uD&quot;,&quot;phase&quot;:5,&quot;result&quot;:{&quot;text&quot;:&quot;Note:\nView range expanded to meet minimum size of 500 lines. End line adjusted to last line of file (88).\n\nHere's the result of running `cat -n` on src/meddra_loader/meddra_digraph.py:\n     1\timport json\n     2\tfrom pathlib import Path\n     3\tfrom typing import Any, Union, cast\n     4\t\n     5\timport networkx as nx\n     6\t\n     7\tDEFAULT_SCHEMA_PATH = Path(__file__).parent / \&quot;resources\&quot; / \&quot;meddra_schema_v28.json\&quot;\n     8\t\n     9\t\n    10\tclass MedDRADiGraph(nx.DiGraph):\n    11\t\n    12\t    def __init__(self, *args: Any, **kwargs: Any) -&gt; None:\n    13\t        super().__init__(*args, **kwargs)\n    14\t        self.schema: dict[str, dict[str, str]] = {}\n    15\t        self.term_levels: set[str] = set()\n    16\t        self.edges: set[tuple[str, ...]] = set()\n    17\t        self.terms: dict[str, dict[str, Any]] = {}\n    18\t        self.meddra_version: Union[str, None] = None\n    19\t\n    20\t    def load(\n    21\t        self, meddra_directory_path: Union[str, Path], schema_path: Union[str, Path] = DEFAULT_SCHEMA_PATH\n    22\t    ) -&gt; None:\n    23\t        meddra_directory_path = Path(meddra_directory_path)\n    24\t        self.schema = self._load_schema(schema_path)\n    25\t        self.meddra_version = \&quot; \&quot;.join(self._load_file(meddra_directory_path / \&quot;meddra_release.asc\&quot;)[0]).strip()\n    26\t        assert meddra_directory_path.is_dir()\n    27\t        self.term_levels = self._get_term_levels(meddra_directory_path)\n    28\t        edges = set()\n    29\t        self.terms = {}\n    30\t        for file_path in meddra_directory_path.glob(\&quot;*.asc\&quot;):\n    31\t            if self._is_edge_file(file_path):\n    32\t                edges.update(self._load_file(file_path))\n    33\t\n    34\t        for file_path in meddra_directory_path.glob(\&quot;*.asc\&quot;):\n    35\t            if self._is_term_file(file_path):\n    36\t                data = self._load_file(file_path)\n    37\t                file_name = file_path.name\n    38\t                node_type = file_path.name.split(\&quot;.\&quot;)[0]\n    39\t\n    40\t                # Process each row of data\n    41\t                for row in data:\n    42\t                    if len(row) &gt;= len(self.schema[file_name]):\n    43\t                        # Create a dictionary for this term using the schema\n    44\t                        term_dict = dict(zip(self.schema[file_name].keys(), row))\n    45\t                        term_dict[\&quot;node_type\&quot;] = node_type\n    46\t\n    47\t                        # Use the first field as the key (usually the code)\n    48\t                        first_field = list(self.schema[file_name].keys())[0]\n    49\t                        term_key = term_dict[first_field]\n    50\t                        self.terms[term_key] = term_dict\n    51\t        self.add_edges_from(edges)\n    52\t        self.add_nodes_from(self.terms.keys())\n    53\t        nx.set_node_attributes(self, self.terms)\n    54\t\n    55\t    def _load_schema(self, schema_path: Union[str, Path]) -&gt; dict[str, dict[str, str]]:\n    56\t        with open(schema_path, \&quot;r\&quot;, encoding=\&quot;utf-8\&quot;) as f:\n    57\t            return cast(dict[str, dict[str, str]], json.load(f))\n    58\t\n    59\t    def _get_term_levels(self, meddra_directory_path: Path) -&gt; set[str]:\n    60\t        term_levels = set()\n    61\t        for file_path in meddra_directory_path.glob(\&quot;*.asc\&quot;):\n    62\t            file_name = file_path.name.split(\&quot;.\&quot;)[0]\n    63\t            if not \&quot;_\&quot; in file_name:\n    64\t                term_levels.add(file_name)\n    65\t        return term_levels\n    66\t\n    67\t    def _is_term_file(self, file_path: Path) -&gt; bool:\n    68\t        return file_path.name.split(\&quot;.\&quot;)[0] in self.term_levels\n    69\t\n    70\t    def _is_edge_file(self, file_path: Path) -&gt; bool:\n    71\t        if not \&quot;_\&quot; in file_path.name:\n    72\t            return False\n    73\t        try:\n    74\t            t0, t1 = file_path.name.split(\&quot;.\&quot;)[0].split(\&quot;_\&quot;)\n    75\t            return t0 in self.term_levels and t1 in self.term_levels\n    76\t        except (ValueError, IndexError):\n    77\t            return False\n    78\t\n    79\t    def _load_file(self, file_path: Path) -&gt; list[tuple[str, ...]]:\n    80\t        lines = []\n    81\t        with open(file_path, \&quot;r\&quot;, encoding=\&quot;utf-8\&quot;) as f:\n    82\t            for line in f:\n    83\t                lines.append(self._load_line(line))\n    84\t        return lines\n    85\t\n    86\t    def _load_line(self, line: str) -&gt; tuple[str, ...]:\n    87\t        return tuple(line.strip().split(\&quot;$\&quot;))\n    88\t\nTotal lines in file: 88\n&quot;,&quot;isError&quot;:false,&quot;requestId&quot;:&quot;&quot;}},&quot;0d68e4d4-cfee-4982-bc78-944e50ae8125;toolu_vrtx_01UtsjbD6x7FrtBENdKsYG9t&quot;:{&quot;requestId&quot;:&quot;0d68e4d4-cfee-4982-bc78-944e50ae8125&quot;,&quot;toolUseId&quot;:&quot;toolu_vrtx_01UtsjbD6x7FrtBENdKsYG9t&quot;,&quot;phase&quot;:5,&quot;result&quot;:{&quot;text&quot;:&quot;Here's the result of running `cat -n` on pyproject.toml:\n     1\t[build-system]\n     2\trequires = [\n     3\t    \&quot;setuptools&gt;=64\&quot;,\n     4\t    \&quot;wheel\&quot;\n     5\t]\n     6\tbuild-backend = \&quot;setuptools.build_meta\&quot;\n     7\t\n     8\t[project]\n     9\tname = \&quot;meddra-loader\&quot;\n    10\tversion = \&quot;0.1.0\&quot;\n    11\tauthors = [\n    12\t    {name = \&quot;Pascal Wullschleger\&quot;}\n    13\t]\n    14\tdescription = \&quot;Package for loading and processing MedDRA data\&quot;\n    15\treadme = \&quot;README.md\&quot;\n    16\trequires-python = \&quot;&gt;=3.9\&quot;\n    17\tclassifiers = [\n    18\t    \&quot;Programming Language :: Python :: 3\&quot;,\n    19\t    \&quot;License :: OSI Approved :: MIT License\&quot;,\n    20\t    \&quot;Operating System :: OS Independent\&quot;\n    21\t]\n    22\tdependencies = [\n    23\t    \&quot;networkx\&quot;,\n    24\t    \&quot;pandas\&quot;\n    25\t]\n    26\t\n    27\t[project.optional-dependencies]\n    28\tdev = [\n    29\t    \&quot;pytest&gt;=7.0\&quot;,\n    30\t    \&quot;pytest-cov&gt;=4.0\&quot;,\n    31\t    \&quot;black&gt;=23.0\&quot;,\n    32\t    \&quot;isort&gt;=5.0\&quot;,\n    33\t    \&quot;mypy&gt;=1.0\&quot;,\n    34\t    \&quot;pylint&gt;=2.15\&quot;,\n    35\t    \&quot;coverage&gt;=7.0\&quot;\n    36\t]\n    37\t\n    38\t[tool.setuptools]\n    39\tpackage-dir = {\&quot;\&quot; = \&quot;src\&quot;}\n    40\t\n    41\t[tool.setuptools.packages.find]\n    42\twhere = [\&quot;src\&quot;]\n    43\t\n    44\t[tool.black]\n    45\tline-length = 120\n    46\ttarget-version = ['py39']\n    47\t\n    48\t[tool.isort]\n    49\tprofile = \&quot;black\&quot;\n    50\tline_length = 120\n    51\t\n    52\t[tool.mypy]\n    53\tpython_version = \&quot;3.9\&quot;\n    54\twarn_return_any = true\n    55\twarn_unused_configs = true\n    56\tdisallow_untyped_defs = true\n    57\tdisallow_incomplete_defs = true\n    58\tcheck_untyped_defs = true\n    59\tdisallow_untyped_decorators = true\n    60\tno_implicit_optional = true\n    61\twarn_redundant_casts = true\n    62\twarn_unused_ignores = true\n    63\twarn_no_return = true\n    64\twarn_unreachable = true\n    65\tstrict_equality = true\n    66\t\n    67\t[tool.pylint.messages_control]\n    68\tdisable = [\n    69\t    \&quot;missing-docstring\&quot;,\n    70\t    \&quot;too-few-public-methods\&quot;,\n    71\t    \&quot;invalid-name\&quot;,\n    72\t    \&quot;line-too-long\&quot;\n    73\t]\n    74\t\n    75\t[tool.pylint.format]\n    76\tmax-line-length = 120\n    77\t\n    78\t[tool.pytest.ini_options]\n    79\ttestpaths = [\&quot;src/meddra_loader/tests\&quot;]\n    80\tpython_files = [\&quot;test_*.py\&quot;]\n    81\tpython_classes = [\&quot;Test*\&quot;]\n    82\tpython_functions = [\&quot;test_*\&quot;]\n    83\taddopts = \&quot;--strict-markers --strict-config\&quot;\n    84\t\n    85\t[tool.coverage.run]\n    86\tsource = [\&quot;src/meddra_loader\&quot;]\n    87\tomit = [\&quot;*/tests/*\&quot;]\n    88\t\n    89\t[tool.coverage.report]\n    90\texclude_lines = [\n    91\t    \&quot;pragma: no cover\&quot;,\n    92\t    \&quot;def __repr__\&quot;,\n    93\t    \&quot;raise AssertionError\&quot;,\n    94\t    \&quot;raise NotImplementedError\&quot;\n    95\t]\n    96\t\nTotal lines in file: 96\n&quot;,&quot;isError&quot;:false,&quot;requestId&quot;:&quot;&quot;}},&quot;7d4a074a-4acb-48fa-8dff-011aeff75ed4;toolu_vrtx_01YPrGqZ7cU8zDkn5b2DqLvb&quot;:{&quot;requestId&quot;:&quot;7d4a074a-4acb-48fa-8dff-011aeff75ed4&quot;,&quot;toolUseId&quot;:&quot;toolu_vrtx_01YPrGqZ7cU8zDkn5b2DqLvb&quot;,&quot;phase&quot;:5,&quot;result&quot;:{&quot;text&quot;:&quot;Note:\nView range expanded to meet minimum size of 500 lines. End line adjusted to last line of file (99).\n\nHere's the result of running `cat -n` on src/meddra_loader/tests/test_meddra_digraph.py:\n     1\tfrom pathlib import Path\n     2\t\n     3\timport pytest\n     4\t\n     5\tfrom meddra_loader.meddra_digraph import MedDRADiGraph\n     6\t\n     7\tTEST_TERMS = [\n     8\t    # SOC (System Organ Class) test cases\n     9\t    (\&quot;soc\&quot;, \&quot;10001000\&quot;, \&quot;Lorem ipsum dolor sit amet\&quot;),\n    10\t    (\&quot;soc\&quot;, \&quot;10002000\&quot;, \&quot;Consectetur adipiscing elit\&quot;),\n    11\t    (\&quot;soc\&quot;, \&quot;10003000\&quot;, \&quot;Sed do eiusmod tempor incididunt\&quot;),\n    12\t    # HLGT (High Level Group Term) test cases\n    13\t    (\&quot;hlgt\&quot;, \&quot;10001001\&quot;, \&quot;Nostrud exercitation ullamco\&quot;),\n    14\t    (\&quot;hlgt\&quot;, \&quot;10001002\&quot;, \&quot;Laboris nisi ut aliquip ex ea\&quot;),\n    15\t    (\&quot;hlgt\&quot;, \&quot;10002001\&quot;, \&quot;Commodo consequat duis aute irure\&quot;),\n    16\t    # HLT (High Level Term) test cases\n    17\t    (\&quot;hlt\&quot;, \&quot;10001101\&quot;, \&quot;Nulla pariatur excepteur sint occaecat\&quot;),\n    18\t    (\&quot;hlt\&quot;, \&quot;10001102\&quot;, \&quot;Cupidatat non proident sunt in culpa\&quot;),\n    19\t    (\&quot;hlt\&quot;, \&quot;10002101\&quot;, \&quot;Est laborum lorem ipsum dolor sit\&quot;),\n    20\t    # LLT (Lowest Level Term) test cases - using codes that don't conflict with mdhier.asc\n    21\t    (\&quot;llt\&quot;, \&quot;10001302\&quot;, \&quot;Cillum dolore eu fugiat nulla\&quot;),\n    22\t    (\&quot;llt\&quot;, \&quot;10001303\&quot;, \&quot;Pariatur excepteur sint occaecat\&quot;),\n    23\t    (\&quot;llt\&quot;, \&quot;10002302\&quot;, \&quot;Anim id est laborum sed ut\&quot;),\n    24\t]\n    25\t\n    26\t\n    27\t@pytest.fixture(name=\&quot;meddra_digraph\&quot;)\n    28\tdef meddra_digraph_fixture() -&gt; MedDRADiGraph:\n    29\t    return MedDRADiGraph()\n    30\t\n    31\t\n    32\t@pytest.fixture(name=\&quot;test_data_path\&quot;)\n    33\tdef test_data_path_fixture() -&gt; Path:\n    34\t    return Path(__file__).parent / \&quot;test_data\&quot;\n    35\t\n    36\t\n    37\tdef test_term_levels_loaded(meddra_digraph: MedDRADiGraph, test_data_path: Path) -&gt; None:\n    38\t    meddra_digraph.load(test_data_path)\n    39\t    assert meddra_digraph.meddra_version is not None\n    40\t    assert len(meddra_digraph.term_levels) == 6\n    41\t    assert set(meddra_digraph.term_levels) == {\&quot;soc\&quot;, \&quot;hlgt\&quot;, \&quot;hlt\&quot;, \&quot;pt\&quot;, \&quot;llt\&quot;, \&quot;mdhier\&quot;}\n    42\t\n    43\t\n    44\tdef test_schema_levels_loaded(meddra_digraph: MedDRADiGraph, test_data_path: Path) -&gt; None:\n    45\t    meddra_digraph.load(test_data_path)\n    46\t    assert len(meddra_digraph.schema) == 12\n    47\t    # Check that core term files are in schema\n    48\t    assert \&quot;soc.asc\&quot; in meddra_digraph.schema\n    49\t    assert \&quot;hlgt.asc\&quot; in meddra_digraph.schema\n    50\t    assert \&quot;hlt.asc\&quot; in meddra_digraph.schema\n    51\t    assert \&quot;pt.asc\&quot; in meddra_digraph.schema\n    52\t    assert \&quot;llt.asc\&quot; in meddra_digraph.schema\n    53\t    assert \&quot;mdhier.asc\&quot; in meddra_digraph.schema\n    54\t\n    55\t\n    56\tdef test_edges_loaded(meddra_digraph: MedDRADiGraph, test_data_path: Path) -&gt; None:\n    57\t    meddra_digraph.load(test_data_path)\n    58\t    assert len(meddra_digraph.edges) &gt;= 0\n    59\t\n    60\t\n    61\tdef test_terms_loaded(meddra_digraph: MedDRADiGraph, test_data_path: Path) -&gt; None:\n    62\t    meddra_digraph.load(test_data_path)\n    63\t    assert len(meddra_digraph.terms) &gt; 1\n    64\t\n    65\t\n    66\tdef test_nodes_loaded(meddra_digraph: MedDRADiGraph, test_data_path: Path) -&gt; None:\n    67\t    meddra_digraph.load(test_data_path)\n    68\t    assert len(meddra_digraph.nodes) &gt; 1\n    69\t\n    70\t\n    71\t# Generate IDs automatically from the test parameters\n    72\tdef _generate_test_ids() -&gt; list[str]:\n    73\t    \&quot;\&quot;\&quot;Generate test IDs like soc1, soc2, hlgt1, hlgt2, etc.\&quot;\&quot;\&quot;\n    74\t    term_counts: dict[str, int] = {}\n    75\t    ids: list[str] = []\n    76\t    for term_level, _, _ in TEST_TERMS:\n    77\t        term_counts[term_level] = term_counts.get(term_level, 0) + 1\n    78\t        ids.append(f\&quot;{term_level}{term_counts[term_level]}\&quot;)\n    79\t    return ids\n    80\t\n    81\t\n    82\t@pytest.mark.parametrize(\&quot;term_level, term_code, expected_name\&quot;, TEST_TERMS, ids=_generate_test_ids())\n    83\tdef test_term_definitions_correct(\n    84\t    meddra_digraph: MedDRADiGraph, test_data_path: Path, term_level: str, term_code: str, expected_name: str\n    85\t) -&gt; None:\n    86\t    \&quot;\&quot;\&quot;Test that each term level has the correct definition/name in the test data.\&quot;\&quot;\&quot;\n    87\t    meddra_digraph.load(test_data_path)\n    88\t\n    89\t    assert term_code in meddra_digraph.terms, f\&quot;Term {term_code} not found in loaded terms\&quot;\n    90\t\n    91\t    term_data = meddra_digraph.terms[term_code]\n    92\t    assert term_data[\&quot;node_type\&quot;] == term_level, f\&quot;Expected node_type {term_level}, got {term_data['node_type']}\&quot;\n    93\t\n    94\t    name_field = f\&quot;{term_level}_name\&quot;\n    95\t    assert name_field in term_data, f\&quot;Name field {name_field} not found in term data\&quot;\n    96\t    assert (\n    97\t        term_data[name_field] == expected_name\n    98\t    ), f\&quot;Expected {name_field} to be '{expected_name}', got '{term_data[name_field]}'\&quot;\n    99\t\nTotal lines in file: 99\n&quot;,&quot;isError&quot;:false,&quot;requestId&quot;:&quot;&quot;}},&quot;ec7e13e5-a0a5-4666-90cd-5caa577f25dd;toolu_vrtx_01U4SWUTYZttoYpnzT7fqpbC&quot;:{&quot;requestId&quot;:&quot;ec7e13e5-a0a5-4666-90cd-5caa577f25dd&quot;,&quot;toolUseId&quot;:&quot;toolu_vrtx_01U4SWUTYZttoYpnzT7fqpbC&quot;,&quot;phase&quot;:7},&quot;77a91342-6bc8-4769-9f18-cb4be46840ae;toolu_vrtx_01NWgrZDGyg5XjB2kpeZSM3y&quot;:{&quot;requestId&quot;:&quot;77a91342-6bc8-4769-9f18-cb4be46840ae&quot;,&quot;toolUseId&quot;:&quot;toolu_vrtx_01NWgrZDGyg5XjB2kpeZSM3y&quot;,&quot;phase&quot;:8,&quot;result&quot;:{&quot;text&quot;:&quot;Here's the result of running `cat -n` on README.md:\n     1\t\n     2\t\n     3\t# MedDRA Loader\n     4\t\n     5\t[![CI](https://github.com/wullli/meddra-loader/workflows/CI/badge.svg)](https://github.com/wullli/meddra-loader/actions/workflows/ci.yml)\n     6\t[![codecov](https://codecov.io/gh/wullli/meddra-loader/branch/main/graph/badge.svg)](https://codecov.io/gh/wullli/meddra-loader)\n     7\t\n     8\tDISCLAIMER: This software does not give you access to MedDRA and you need a valid subscription to work with MedDRA data: https://www.meddra.org/. It merely provides tooling for loading the MedDRA data and hierarchy with python into a networkx graph. It is only intended for use with legitimately licensed MedDRA data and users are responsible for obtaining a valid license from the MSSO.\n     9\t\nTotal lines in file: 9\n&quot;,&quot;isError&quot;:false,&quot;requestId&quot;:&quot;&quot;}},&quot;68c58f66-79b7-42b3-9dd2-94f5034470c4;toolu_vrtx_01SZRN6HjGMhVujvHAoHbehE&quot;:{&quot;requestId&quot;:&quot;68c58f66-79b7-42b3-9dd2-94f5034470c4&quot;,&quot;toolUseId&quot;:&quot;toolu_vrtx_01SZRN6HjGMhVujvHAoHbehE&quot;,&quot;phase&quot;:5,&quot;result&quot;:{&quot;text&quot;:&quot;Here's the result of running `cat -n` on README.md:\n     1\t\n     2\t\n     3\t# MedDRA Loader\n     4\t\n     5\t[![CI](https://github.com/wullli/meddra-loader/workflows/CI/badge.svg)](https://github.com/wullli/meddra-loader/actions/workflows/ci.yml)\n     6\t[![codecov](https://codecov.io/gh/wullli/meddra-loader/branch/main/graph/badge.svg)](https://codecov.io/gh/wullli/meddra-loader)\n     7\t\n     8\tDISCLAIMER: This software does not give you access to MedDRA and you need a valid subscription to work with MedDRA data: https://www.meddra.org/. It merely provides tooling for loading the MedDRA data and hierarchy with python into a networkx graph. It is only intended for use with legitimately licensed MedDRA data and users are responsible for obtaining a valid license from the MSSO.\n     9\t\nTotal lines in file: 9\n&quot;,&quot;isError&quot;:false,&quot;requestId&quot;:&quot;&quot;}},&quot;2c8f692c-1a4d-4de1-9764-65f8988a5bdf;toolu_vrtx_019ysJTWxYWskYGiBaYNXCfT&quot;:{&quot;requestId&quot;:&quot;2c8f692c-1a4d-4de1-9764-65f8988a5bdf&quot;,&quot;toolUseId&quot;:&quot;toolu_vrtx_019ysJTWxYWskYGiBaYNXCfT&quot;,&quot;phase&quot;:5,&quot;result&quot;:{&quot;text&quot;:&quot;Here's the files and directories up to 2 levels deep in ., excluding hidden items:\n./LICENSE\n./README.md\n./coverage.xml\n./modules\n./modules/meddra-loader\n./pyproject.toml\n./scripts\n./scripts/run_ci_checks.sh\n./src\n./src/meddra_graph\n./src/meddra_loader.egg-info\n./src/resources\n&quot;,&quot;isError&quot;:false,&quot;requestId&quot;:&quot;&quot;}},&quot;989a41b6-e576-444f-8ec3-3224a4f12b54;toolu_vrtx_01ByTgEk3UXbUDEHer4JoYT4&quot;:{&quot;requestId&quot;:&quot;989a41b6-e576-444f-8ec3-3224a4f12b54&quot;,&quot;toolUseId&quot;:&quot;toolu_vrtx_01ByTgEk3UXbUDEHer4JoYT4&quot;,&quot;phase&quot;:5,&quot;result&quot;:{&quot;text&quot;:&quot;Here's the files and directories up to 2 levels deep in src/meddra_graph, excluding hidden items:\nsrc/meddra_graph/__init__.py\nsrc/meddra_graph/__pycache__\nsrc/meddra_graph/__pycache__/__init__.cpython-311.pyc\nsrc/meddra_graph/__pycache__/__init__.cpython-312.pyc\nsrc/meddra_graph/__pycache__/meddra_digraph.cpython-311.pyc\nsrc/meddra_graph/__pycache__/meddra_digraph.cpython-312.pyc\nsrc/meddra_graph/meddra_digraph.py\nsrc/meddra_graph/resources\nsrc/meddra_graph/resources/meddra_schema_v28.json\nsrc/meddra_graph/tests\nsrc/meddra_graph/tests/__init__.py\nsrc/meddra_graph/tests/__pycache__\nsrc/meddra_graph/tests/test_data\nsrc/meddra_graph/tests/test_meddra_digraph.py\n&quot;,&quot;isError&quot;:false,&quot;requestId&quot;:&quot;&quot;}},&quot;fbe0b876-56d3-43fc-982e-c1c244818671;toolu_vrtx_01KHh1xS62pgozFFzUpZGwMK&quot;:{&quot;requestId&quot;:&quot;fbe0b876-56d3-43fc-982e-c1c244818671&quot;,&quot;toolUseId&quot;:&quot;toolu_vrtx_01KHh1xS62pgozFFzUpZGwMK&quot;,&quot;phase&quot;:5,&quot;result&quot;:{&quot;text&quot;:&quot;Here's the result of running `cat -n` on src/meddra_graph/__init__.py:\n     1\tVERSION = \&quot;0.0.1\&quot;\n     2\t\nTotal lines in file: 2\n&quot;,&quot;isError&quot;:false,&quot;requestId&quot;:&quot;&quot;}},&quot;e7d85324-35c4-4fa3-aa6d-16b02692483e;toolu_vrtx_016Mz6QVPJSLKcwA5vrCtZra&quot;:{&quot;requestId&quot;:&quot;e7d85324-35c4-4fa3-aa6d-16b02692483e&quot;,&quot;toolUseId&quot;:&quot;toolu_vrtx_016Mz6QVPJSLKcwA5vrCtZra&quot;,&quot;phase&quot;:5,&quot;result&quot;:{&quot;text&quot;:&quot;Note:\nView range expanded to meet minimum size of 500 lines. End line adjusted to last line of file (88).\n\nHere's the result of running `cat -n` on src/meddra_graph/meddra_digraph.py:\n     1\timport json\n     2\tfrom pathlib import Path\n     3\tfrom typing import Any, Union, cast\n     4\t\n     5\timport networkx as nx\n     6\t\n     7\tDEFAULT_SCHEMA_PATH = Path(__file__).parent / \&quot;resources\&quot; / \&quot;meddra_schema_v28.json\&quot;\n     8\t\n     9\t\n    10\tclass MedDRADiGraph(nx.DiGraph):\n    11\t\n    12\t    def __init__(self, *args: Any, **kwargs: Any) -&gt; None:\n    13\t        super().__init__(*args, **kwargs)\n    14\t        self.schema: dict[str, dict[str, str]] = {}\n    15\t        self.term_levels: set[str] = set()\n    16\t        self.edges: set[tuple[str, ...]] = set()\n    17\t        self.terms: dict[str, dict[str, Any]] = {}\n    18\t        self.meddra_version: Union[str, None] = None\n    19\t\n    20\t    def load(\n    21\t        self, meddra_directory_path: Union[str, Path], schema_path: Union[str, Path] = DEFAULT_SCHEMA_PATH\n    22\t    ) -&gt; None:\n    23\t        meddra_directory_path = Path(meddra_directory_path)\n    24\t        self.schema = self._load_schema(schema_path)\n    25\t        self.meddra_version = \&quot; \&quot;.join(self._load_file(meddra_directory_path / \&quot;meddra_release.asc\&quot;)[0]).strip()\n    26\t        assert meddra_directory_path.is_dir()\n    27\t        self.term_levels = self._get_term_levels(meddra_directory_path)\n    28\t        edges = set()\n    29\t        self.terms = {}\n    30\t        for file_path in meddra_directory_path.glob(\&quot;*.asc\&quot;):\n    31\t            if self._is_edge_file(file_path):\n    32\t                edges.update(self._load_file(file_path))\n    33\t\n    34\t        for file_path in meddra_directory_path.glob(\&quot;*.asc\&quot;):\n    35\t            if self._is_term_file(file_path):\n    36\t                data = self._load_file(file_path)\n    37\t                file_name = file_path.name\n    38\t                node_type = file_path.name.split(\&quot;.\&quot;)[0]\n    39\t\n    40\t                # Process each row of data\n    41\t                for row in data:\n    42\t                    if len(row) &gt;= len(self.schema[file_name]):\n    43\t                        # Create a dictionary for this term using the schema\n    44\t                        term_dict = dict(zip(self.schema[file_name].keys(), row))\n    45\t                        term_dict[\&quot;node_type\&quot;] = node_type\n    46\t\n    47\t                        # Use the first field as the key (usually the code)\n    48\t                        first_field = list(self.schema[file_name].keys())[0]\n    49\t                        term_key = term_dict[first_field]\n    50\t                        self.terms[term_key] = term_dict\n    51\t        self.add_edges_from(edges)\n    52\t        self.add_nodes_from(self.terms.keys())\n    53\t        nx.set_node_attributes(self, self.terms)\n    54\t\n    55\t    def _load_schema(self, schema_path: Union[str, Path]) -&gt; dict[str, dict[str, str]]:\n    56\t        with open(schema_path, \&quot;r\&quot;, encoding=\&quot;utf-8\&quot;) as f:\n    57\t            return cast(dict[str, dict[str, str]], json.load(f))\n    58\t\n    59\t    def _get_term_levels(self, meddra_directory_path: Path) -&gt; set[str]:\n    60\t        term_levels = set()\n    61\t        for file_path in meddra_directory_path.glob(\&quot;*.asc\&quot;):\n    62\t            file_name = file_path.name.split(\&quot;.\&quot;)[0]\n    63\t            if not \&quot;_\&quot; in file_name:\n    64\t                term_levels.add(file_name)\n    65\t        return term_levels\n    66\t\n    67\t    def _is_term_file(self, file_path: Path) -&gt; bool:\n    68\t        return file_path.name.split(\&quot;.\&quot;)[0] in self.term_levels\n    69\t\n    70\t    def _is_edge_file(self, file_path: Path) -&gt; bool:\n    71\t        if not \&quot;_\&quot; in file_path.name:\n    72\t            return False\n    73\t        try:\n    74\t            t0, t1 = file_path.name.split(\&quot;.\&quot;)[0].split(\&quot;_\&quot;)\n    75\t            return t0 in self.term_levels and t1 in self.term_levels\n    76\t        except (ValueError, IndexError):\n    77\t            return False\n    78\t\n    79\t    def _load_file(self, file_path: Path) -&gt; list[tuple[str, ...]]:\n    80\t        lines = []\n    81\t        with open(file_path, \&quot;r\&quot;, encoding=\&quot;utf-8\&quot;) as f:\n    82\t            for line in f:\n    83\t                lines.append(self._load_line(line))\n    84\t        return lines\n    85\t\n    86\t    def _load_line(self, line: str) -&gt; tuple[str, ...]:\n    87\t        return tuple(line.strip().split(\&quot;$\&quot;))\n    88\t\nTotal lines in file: 88\n&quot;,&quot;isError&quot;:false,&quot;requestId&quot;:&quot;&quot;}},&quot;fecab5f8-60ce-4cf7-a4a0-410bfb937acb;toolu_vrtx_018YL3qXFktcnQqND8TWmEB8&quot;:{&quot;requestId&quot;:&quot;fecab5f8-60ce-4cf7-a4a0-410bfb937acb&quot;,&quot;toolUseId&quot;:&quot;toolu_vrtx_018YL3qXFktcnQqND8TWmEB8&quot;,&quot;phase&quot;:5,&quot;result&quot;:{&quot;text&quot;:&quot;Here's the result of running `cat -n` on pyproject.toml:\n     1\t[build-system]\n     2\trequires = [\n     3\t    \&quot;setuptools&gt;=64\&quot;,\n     4\t    \&quot;wheel\&quot;\n     5\t]\n     6\tbuild-backend = \&quot;setuptools.build_meta\&quot;\n     7\t\n     8\t[project]\n     9\tname = \&quot;meddra-graph\&quot;\n    10\tversion = \&quot;0.1.0\&quot;\n    11\tauthors = [\n    12\t    {name = \&quot;Pascal Wullschleger\&quot;}\n    13\t]\n    14\tdescription = \&quot;Package for loading and processing MedDRA data\&quot;\n    15\treadme = \&quot;README.md\&quot;\n    16\trequires-python = \&quot;&gt;=3.9\&quot;\n    17\tclassifiers = [\n    18\t    \&quot;Programming Language :: Python :: 3\&quot;,\n    19\t    \&quot;License :: OSI Approved :: MIT License\&quot;,\n    20\t    \&quot;Operating System :: OS Independent\&quot;\n    21\t]\n    22\tdependencies = [\n    23\t    \&quot;networkx\&quot;,\n    24\t    \&quot;pandas\&quot;\n    25\t]\n    26\t\n    27\t[project.optional-dependencies]\n    28\tdev = [\n    29\t    \&quot;pytest&gt;=7.0\&quot;,\n    30\t    \&quot;pytest-cov&gt;=4.0\&quot;,\n    31\t    \&quot;black&gt;=23.0\&quot;,\n    32\t    \&quot;isort&gt;=5.0\&quot;,\n    33\t    \&quot;mypy&gt;=1.0\&quot;,\n    34\t    \&quot;pylint&gt;=2.15\&quot;,\n    35\t    \&quot;coverage&gt;=7.0\&quot;\n    36\t]\n    37\t\n    38\t[tool.setuptools]\n    39\tpackage-dir = {\&quot;\&quot; = \&quot;src\&quot;}\n    40\t\n    41\t[tool.setuptools.packages.find]\n    42\twhere = [\&quot;src\&quot;]\n    43\t\n    44\t[tool.black]\n    45\tline-length = 120\n    46\ttarget-version = ['py39']\n    47\t\n    48\t[tool.isort]\n    49\tprofile = \&quot;black\&quot;\n    50\tline_length = 120\n    51\t\n    52\t[tool.mypy]\n    53\tpython_version = \&quot;3.9\&quot;\n    54\twarn_return_any = true\n    55\twarn_unused_configs = true\n    56\tdisallow_untyped_defs = true\n    57\tdisallow_incomplete_defs = true\n    58\tcheck_untyped_defs = true\n    59\tdisallow_untyped_decorators = true\n    60\tno_implicit_optional = true\n    61\twarn_redundant_casts = true\n    62\twarn_unused_ignores = true\n    63\twarn_no_return = true\n    64\twarn_unreachable = true\n    65\tstrict_equality = true\n    66\t\n    67\t[tool.pylint.messages_control]\n    68\tdisable = [\n    69\t    \&quot;missing-docstring\&quot;,\n    70\t    \&quot;too-few-public-methods\&quot;,\n    71\t    \&quot;invalid-name\&quot;,\n    72\t    \&quot;line-too-long\&quot;\n    73\t]\n    74\t\n    75\t[tool.pylint.format]\n    76\tmax-line-length = 120\n    77\t\n    78\t[tool.pytest.ini_options]\n    79\ttestpaths = [\&quot;src/meddra_graph/tests\&quot;]\n    80\tpython_files = [\&quot;test_*.py\&quot;]\n    81\tpython_classes = [\&quot;Test*\&quot;]\n    82\tpython_functions = [\&quot;test_*\&quot;]\n    83\taddopts = \&quot;--strict-markers --strict-config\&quot;\n    84\t\n    85\t[tool.coverage.run]\n    86\tsource = [\&quot;src/meddra_graph\&quot;]\n    87\tomit = [\&quot;*/tests/*\&quot;]\n    88\t\n    89\t[tool.coverage.report]\n    90\texclude_lines = [\n    91\t    \&quot;pragma: no cover\&quot;,\n    92\t    \&quot;def __repr__\&quot;,\n    93\t    \&quot;raise AssertionError\&quot;,\n    94\t    \&quot;raise NotImplementedError\&quot;\n    95\t]\n    96\t\nTotal lines in file: 96\n&quot;,&quot;isError&quot;:false,&quot;requestId&quot;:&quot;&quot;}},&quot;1e398c8d-d5a4-4e3a-9d0a-1be440f2f96f;toolu_vrtx_01NVXRwoJEFP3S3rM2SZ9Q4c&quot;:{&quot;requestId&quot;:&quot;1e398c8d-d5a4-4e3a-9d0a-1be440f2f96f&quot;,&quot;toolUseId&quot;:&quot;toolu_vrtx_01NVXRwoJEFP3S3rM2SZ9Q4c&quot;,&quot;phase&quot;:5,&quot;result&quot;:{&quot;text&quot;:&quot;Note:\nView range expanded to meet minimum size of 500 lines. End line adjusted to last line of file (99).\n\nHere's the result of running `cat -n` on src/meddra_graph/tests/test_meddra_digraph.py:\n     1\tfrom pathlib import Path\n     2\t\n     3\timport pytest\n     4\t\n     5\tfrom meddra_graph.meddra_digraph import MedDRADiGraph\n     6\t\n     7\tTEST_TERMS = [\n     8\t    # SOC (System Organ Class) test cases\n     9\t    (\&quot;soc\&quot;, \&quot;10001000\&quot;, \&quot;Lorem ipsum dolor sit amet\&quot;),\n    10\t    (\&quot;soc\&quot;, \&quot;10002000\&quot;, \&quot;Consectetur adipiscing elit\&quot;),\n    11\t    (\&quot;soc\&quot;, \&quot;10003000\&quot;, \&quot;Sed do eiusmod tempor incididunt\&quot;),\n    12\t    # HLGT (High Level Group Term) test cases\n    13\t    (\&quot;hlgt\&quot;, \&quot;10001001\&quot;, \&quot;Nostrud exercitation ullamco\&quot;),\n    14\t    (\&quot;hlgt\&quot;, \&quot;10001002\&quot;, \&quot;Laboris nisi ut aliquip ex ea\&quot;),\n    15\t    (\&quot;hlgt\&quot;, \&quot;10002001\&quot;, \&quot;Commodo consequat duis aute irure\&quot;),\n    16\t    # HLT (High Level Term) test cases\n    17\t    (\&quot;hlt\&quot;, \&quot;10001101\&quot;, \&quot;Nulla pariatur excepteur sint occaecat\&quot;),\n    18\t    (\&quot;hlt\&quot;, \&quot;10001102\&quot;, \&quot;Cupidatat non proident sunt in culpa\&quot;),\n    19\t    (\&quot;hlt\&quot;, \&quot;10002101\&quot;, \&quot;Est laborum lorem ipsum dolor sit\&quot;),\n    20\t    # LLT (Lowest Level Term) test cases - using codes that don't conflict with mdhier.asc\n    21\t    (\&quot;llt\&quot;, \&quot;10001302\&quot;, \&quot;Cillum dolore eu fugiat nulla\&quot;),\n    22\t    (\&quot;llt\&quot;, \&quot;10001303\&quot;, \&quot;Pariatur excepteur sint occaecat\&quot;),\n    23\t    (\&quot;llt\&quot;, \&quot;10002302\&quot;, \&quot;Anim id est laborum sed ut\&quot;),\n    24\t]\n    25\t\n    26\t\n    27\t@pytest.fixture(name=\&quot;meddra_digraph\&quot;)\n    28\tdef meddra_digraph_fixture() -&gt; MedDRADiGraph:\n    29\t    return MedDRADiGraph()\n    30\t\n    31\t\n    32\t@pytest.fixture(name=\&quot;test_data_path\&quot;)\n    33\tdef test_data_path_fixture() -&gt; Path:\n    34\t    return Path(__file__).parent / \&quot;test_data\&quot;\n    35\t\n    36\t\n    37\tdef test_term_levels_loaded(meddra_digraph: MedDRADiGraph, test_data_path: Path) -&gt; None:\n    38\t    meddra_digraph.load(test_data_path)\n    39\t    assert meddra_digraph.meddra_version is not None\n    40\t    assert len(meddra_digraph.term_levels) == 6\n    41\t    assert set(meddra_digraph.term_levels) == {\&quot;soc\&quot;, \&quot;hlgt\&quot;, \&quot;hlt\&quot;, \&quot;pt\&quot;, \&quot;llt\&quot;, \&quot;mdhier\&quot;}\n    42\t\n    43\t\n    44\tdef test_schema_levels_loaded(meddra_digraph: MedDRADiGraph, test_data_path: Path) -&gt; None:\n    45\t    meddra_digraph.load(test_data_path)\n    46\t    assert len(meddra_digraph.schema) == 12\n    47\t    # Check that core term files are in schema\n    48\t    assert \&quot;soc.asc\&quot; in meddra_digraph.schema\n    49\t    assert \&quot;hlgt.asc\&quot; in meddra_digraph.schema\n    50\t    assert \&quot;hlt.asc\&quot; in meddra_digraph.schema\n    51\t    assert \&quot;pt.asc\&quot; in meddra_digraph.schema\n    52\t    assert \&quot;llt.asc\&quot; in meddra_digraph.schema\n    53\t    assert \&quot;mdhier.asc\&quot; in meddra_digraph.schema\n    54\t\n    55\t\n    56\tdef test_edges_loaded(meddra_digraph: MedDRADiGraph, test_data_path: Path) -&gt; None:\n    57\t    meddra_digraph.load(test_data_path)\n    58\t    assert len(meddra_digraph.edges) &gt;= 0\n    59\t\n    60\t\n    61\tdef test_terms_loaded(meddra_digraph: MedDRADiGraph, test_data_path: Path) -&gt; None:\n    62\t    meddra_digraph.load(test_data_path)\n    63\t    assert len(meddra_digraph.terms) &gt; 1\n    64\t\n    65\t\n    66\tdef test_nodes_loaded(meddra_digraph: MedDRADiGraph, test_data_path: Path) -&gt; None:\n    67\t    meddra_digraph.load(test_data_path)\n    68\t    assert len(meddra_digraph.nodes) &gt; 1\n    69\t\n    70\t\n    71\t# Generate IDs automatically from the test parameters\n    72\tdef _generate_test_ids() -&gt; list[str]:\n    73\t    \&quot;\&quot;\&quot;Generate test IDs like soc1, soc2, hlgt1, hlgt2, etc.\&quot;\&quot;\&quot;\n    74\t    term_counts: dict[str, int] = {}\n    75\t    ids: list[str] = []\n    76\t    for term_level, _, _ in TEST_TERMS:\n    77\t        term_counts[term_level] = term_counts.get(term_level, 0) + 1\n    78\t        ids.append(f\&quot;{term_level}{term_counts[term_level]}\&quot;)\n    79\t    return ids\n    80\t\n    81\t\n    82\t@pytest.mark.parametrize(\&quot;term_level, term_code, expected_name\&quot;, TEST_TERMS, ids=_generate_test_ids())\n    83\tdef test_term_definitions_correct(\n    84\t    meddra_digraph: MedDRADiGraph, test_data_path: Path, term_level: str, term_code: str, expected_name: str\n    85\t) -&gt; None:\n    86\t    \&quot;\&quot;\&quot;Test that each term level has the correct definition/name in the test data.\&quot;\&quot;\&quot;\n    87\t    meddra_digraph.load(test_data_path)\n    88\t\n    89\t    assert term_code in meddra_digraph.terms, f\&quot;Term {term_code} not found in loaded terms\&quot;\n    90\t\n    91\t    term_data = meddra_digraph.terms[term_code]\n    92\t    assert term_data[\&quot;node_type\&quot;] == term_level, f\&quot;Expected node_type {term_level}, got {term_data['node_type']}\&quot;\n    93\t\n    94\t    name_field = f\&quot;{term_level}_name\&quot;\n    95\t    assert name_field in term_data, f\&quot;Name field {name_field} not found in term data\&quot;\n    96\t    assert (\n    97\t        term_data[name_field] == expected_name\n    98\t    ), f\&quot;Expected {name_field} to be '{expected_name}', got '{term_data[name_field]}'\&quot;\n    99\t\nTotal lines in file: 99\n&quot;,&quot;isError&quot;:false,&quot;requestId&quot;:&quot;&quot;}},&quot;6bf6b3fe-9f4c-485f-9c7b-ffd28c2ce307;toolu_vrtx_01XGa2oNN4UcGQp7WxBUspVA&quot;:{&quot;requestId&quot;:&quot;6bf6b3fe-9f4c-485f-9c7b-ffd28c2ce307&quot;,&quot;toolUseId&quot;:&quot;toolu_vrtx_01XGa2oNN4UcGQp7WxBUspVA&quot;,&quot;phase&quot;:4}},&quot;draftExchange&quot;:{&quot;request_message&quot;:&quot;&quot;,&quot;rich_text_json_repr&quot;:{&quot;type&quot;:&quot;doc&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;paragraph&quot;}]},&quot;status&quot;:&quot;draft&quot;},&quot;requestIds&quot;:[],&quot;isPinned&quot;:false,&quot;isShareable&quot;:true,&quot;extraData&quot;:{&quot;isAgentConversation&quot;:true,&quot;hasDirtyEdits&quot;:false},&quot;personaType&quot;:0,&quot;rootTaskUuid&quot;:&quot;0a3b1907-aa72-4d5d-91df-e5f1a9e944a3&quot;}},&quot;agentExecutionMode&quot;:&quot;manual&quot;,&quot;isPanelCollapsed&quot;:true,&quot;displayedAnnouncements&quot;:[]}" />
      </map>
    </option>
  </component>
</project>